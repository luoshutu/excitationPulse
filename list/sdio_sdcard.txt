; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\sdio_sdcard.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\sdio_sdcard.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -IF:\excitationPulse\Ver_F8_·­Ò³\RTE -ID:\Keil_v5\MDK\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\Keil_v5\MDK\ARM\CMSIS\Include -D__UVISION_VERSION=515 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\sdio_sdcard.crf user\sdio_sdcard.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SD_LowLevel_DeInit PROC
;;;221    
;;;222    void SD_LowLevel_DeInit(void)
000000  b508              PUSH     {r3,lr}
;;;223    {
;;;224      GPIO_InitTypeDef  GPIO_InitStructure;
;;;225      
;;;226      /*!< Disable SDIO Clock */
;;;227      SDIO_ClockCmd(DISABLE);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       SDIO_ClockCmd
;;;228      
;;;229      /*!< Set Power State to OFF */
;;;230      SDIO_SetPowerState(SDIO_PowerState_OFF);
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       SDIO_SetPowerState
;;;231    
;;;232      /*!< DeInitializes the SDIO peripheral */
;;;233      SDIO_DeInit();
00000e  f7fffffe          BL       SDIO_DeInit
;;;234      
;;;235      /*!< Disable the SDIO AHB Clock */
;;;236      RCC_AHBPeriphClockCmd(RCC_AHBPeriph_SDIO, DISABLE);
000012  2100              MOVS     r1,#0
000014  f44f6080          MOV      r0,#0x400
000018  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;237    
;;;238      /*!< Configure PC.08, PC.09, PC.10, PC.11, PC.12 pin: D0, D1, D2, D3, CLK pin */
;;;239      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12;
00001c  f44f50f8          MOV      r0,#0x1f00
000020  f8ad0000          STRH     r0,[sp,#0]
;;;240      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000024  2004              MOVS     r0,#4
000026  f88d0003          STRB     r0,[sp,#3]
;;;241      GPIO_Init(GPIOC, &GPIO_InitStructure);
00002a  4669              MOV      r1,sp
00002c  48fe              LDR      r0,|L1.1064|
00002e  f7fffffe          BL       GPIO_Init
;;;242    
;;;243      /*!< Configure PD.02 CMD line */
;;;244      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
000032  2004              MOVS     r0,#4
000034  f8ad0000          STRH     r0,[sp,#0]
;;;245      GPIO_Init(GPIOD, &GPIO_InitStructure);
000038  4669              MOV      r1,sp
00003a  48fc              LDR      r0,|L1.1068|
00003c  f7fffffe          BL       GPIO_Init
;;;246    }
000040  bd08              POP      {r3,pc}
;;;247    
                          ENDP

                  SD_LowLevel_Init PROC
;;;253      */
;;;254    void SD_LowLevel_Init(void)
000042  b508              PUSH     {r3,lr}
;;;255    {
;;;256      GPIO_InitTypeDef  GPIO_InitStructure;
;;;257    
;;;258      /*!< GPIOC and GPIOD Periph clock enable */
;;;259      RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD | SD_DETECT_GPIO_CLK, ENABLE);
000044  2101              MOVS     r1,#1
000046  20b0              MOVS     r0,#0xb0
000048  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;260    
;;;261      /*!< Configure PC.08, PC.09, PC.10, PC.11, PC.12 pin: D0, D1, D2, D3, CLK pin */
;;;262      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12;
00004c  f44f50f8          MOV      r0,#0x1f00
000050  f8ad0000          STRH     r0,[sp,#0]
;;;263      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000054  2003              MOVS     r0,#3
000056  f88d0002          STRB     r0,[sp,#2]
;;;264      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00005a  2018              MOVS     r0,#0x18
00005c  f88d0003          STRB     r0,[sp,#3]
;;;265      GPIO_Init(GPIOC, &GPIO_InitStructure);
000060  4669              MOV      r1,sp
000062  48f1              LDR      r0,|L1.1064|
000064  f7fffffe          BL       GPIO_Init
;;;266    
;;;267      /*!< Configure PD.02 CMD line */
;;;268      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
000068  2004              MOVS     r0,#4
00006a  f8ad0000          STRH     r0,[sp,#0]
;;;269      GPIO_Init(GPIOD, &GPIO_InitStructure);
00006e  4669              MOV      r1,sp
000070  48ee              LDR      r0,|L1.1068|
000072  f7fffffe          BL       GPIO_Init
;;;270    
;;;271      /*!< Configure SD_SPI_DETECT_PIN pin: SD Card detect pin */
;;;272      GPIO_InitStructure.GPIO_Pin = SD_DETECT_PIN;
000076  f44f6000          MOV      r0,#0x800
00007a  f8ad0000          STRH     r0,[sp,#0]
;;;273      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
00007e  2048              MOVS     r0,#0x48
000080  f88d0003          STRB     r0,[sp,#3]
;;;274      GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStructure);
000084  4669              MOV      r1,sp
000086  48ea              LDR      r0,|L1.1072|
000088  f7fffffe          BL       GPIO_Init
;;;275      
;;;276      /*!< Enable the SDIO AHB Clock */
;;;277      RCC_AHBPeriphClockCmd(RCC_AHBPeriph_SDIO, ENABLE);
00008c  2101              MOVS     r1,#1
00008e  0288              LSLS     r0,r1,#10
000090  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;278    
;;;279      /*!< Enable the DMA2 Clock */
;;;280      RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);
000094  2101              MOVS     r1,#1
000096  2002              MOVS     r0,#2
000098  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;281    }
00009c  bd08              POP      {r3,pc}
;;;282    
                          ENDP

                  SD_LowLevel_DMA_TxConfig PROC
;;;288      */
;;;289    void SD_LowLevel_DMA_TxConfig(uint32_t *BufferSRC, uint32_t BufferSize)
00009e  b530              PUSH     {r4,r5,lr}
;;;290    {
0000a0  b08b              SUB      sp,sp,#0x2c
0000a2  4605              MOV      r5,r0
0000a4  460c              MOV      r4,r1
;;;291    
;;;292      DMA_InitTypeDef DMA_InitStructure;
;;;293    
;;;294      DMA_ClearFlag(DMA2_FLAG_TC4 | DMA2_FLAG_TE4 | DMA2_FLAG_HT4 | DMA2_FLAG_GL4);
0000a6  48e3              LDR      r0,|L1.1076|
0000a8  f7fffffe          BL       DMA_ClearFlag
;;;295    
;;;296      /*!< DMA2 Channel4 disable */
;;;297      DMA_Cmd(DMA2_Channel4, DISABLE);
0000ac  2100              MOVS     r1,#0
0000ae  48e2              LDR      r0,|L1.1080|
0000b0  f7fffffe          BL       DMA_Cmd
;;;298    
;;;299      /*!< DMA2 Channel4 Config */
;;;300      DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
0000b4  48e1              LDR      r0,|L1.1084|
0000b6  9000              STR      r0,[sp,#0]
;;;301      DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)BufferSRC;
0000b8  9501              STR      r5,[sp,#4]
;;;302      DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
0000ba  2010              MOVS     r0,#0x10
0000bc  9002              STR      r0,[sp,#8]
;;;303      DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
0000be  08a0              LSRS     r0,r4,#2
0000c0  9003              STR      r0,[sp,#0xc]
;;;304      DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
0000c2  2000              MOVS     r0,#0
0000c4  9004              STR      r0,[sp,#0x10]
;;;305      DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
0000c6  2080              MOVS     r0,#0x80
0000c8  9005              STR      r0,[sp,#0x14]
;;;306      DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
0000ca  0080              LSLS     r0,r0,#2
0000cc  9006              STR      r0,[sp,#0x18]
;;;307      DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
0000ce  0080              LSLS     r0,r0,#2
0000d0  9007              STR      r0,[sp,#0x1c]
;;;308      DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
0000d2  2000              MOVS     r0,#0
0000d4  9008              STR      r0,[sp,#0x20]
;;;309      DMA_InitStructure.DMA_Priority = DMA_Priority_High;
0000d6  f44f5000          MOV      r0,#0x2000
0000da  9009              STR      r0,[sp,#0x24]
;;;310      DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
0000dc  2000              MOVS     r0,#0
0000de  900a              STR      r0,[sp,#0x28]
;;;311      DMA_Init(DMA2_Channel4, &DMA_InitStructure);
0000e0  4669              MOV      r1,sp
0000e2  48d5              LDR      r0,|L1.1080|
0000e4  f7fffffe          BL       DMA_Init
;;;312    
;;;313      /*!< DMA2 Channel4 enable */
;;;314      DMA_Cmd(DMA2_Channel4, ENABLE);  
0000e8  2101              MOVS     r1,#1
0000ea  48d3              LDR      r0,|L1.1080|
0000ec  f7fffffe          BL       DMA_Cmd
;;;315    }
0000f0  b00b              ADD      sp,sp,#0x2c
0000f2  bd30              POP      {r4,r5,pc}
;;;316    
                          ENDP

                  SD_LowLevel_DMA_RxConfig PROC
;;;322      */
;;;323    void SD_LowLevel_DMA_RxConfig(uint32_t *BufferDST, uint32_t BufferSize)
0000f4  b530              PUSH     {r4,r5,lr}
;;;324    {
0000f6  b08b              SUB      sp,sp,#0x2c
0000f8  4605              MOV      r5,r0
0000fa  460c              MOV      r4,r1
;;;325      DMA_InitTypeDef DMA_InitStructure;
;;;326    
;;;327      DMA_ClearFlag(DMA2_FLAG_TC4 | DMA2_FLAG_TE4 | DMA2_FLAG_HT4 | DMA2_FLAG_GL4);
0000fc  48cd              LDR      r0,|L1.1076|
0000fe  f7fffffe          BL       DMA_ClearFlag
;;;328    
;;;329      /*!< DMA2 Channel4 disable */
;;;330      DMA_Cmd(DMA2_Channel4, DISABLE);
000102  2100              MOVS     r1,#0
000104  48cc              LDR      r0,|L1.1080|
000106  f7fffffe          BL       DMA_Cmd
;;;331    
;;;332      /*!< DMA2 Channel4 Config */
;;;333      DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
00010a  48cc              LDR      r0,|L1.1084|
00010c  9000              STR      r0,[sp,#0]
;;;334      DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)BufferDST;
00010e  9501              STR      r5,[sp,#4]
;;;335      DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
000110  2000              MOVS     r0,#0
000112  9002              STR      r0,[sp,#8]
;;;336      DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
000114  08a0              LSRS     r0,r4,#2
000116  9003              STR      r0,[sp,#0xc]
;;;337      DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
000118  2000              MOVS     r0,#0
00011a  9004              STR      r0,[sp,#0x10]
;;;338      DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
00011c  2080              MOVS     r0,#0x80
00011e  9005              STR      r0,[sp,#0x14]
;;;339      DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
000120  0080              LSLS     r0,r0,#2
000122  9006              STR      r0,[sp,#0x18]
;;;340      DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
000124  0080              LSLS     r0,r0,#2
000126  9007              STR      r0,[sp,#0x1c]
;;;341      DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
000128  2000              MOVS     r0,#0
00012a  9008              STR      r0,[sp,#0x20]
;;;342      DMA_InitStructure.DMA_Priority = DMA_Priority_High;
00012c  f44f5000          MOV      r0,#0x2000
000130  9009              STR      r0,[sp,#0x24]
;;;343      DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
000132  2000              MOVS     r0,#0
000134  900a              STR      r0,[sp,#0x28]
;;;344      DMA_Init(DMA2_Channel4, &DMA_InitStructure);
000136  4669              MOV      r1,sp
000138  48bf              LDR      r0,|L1.1080|
00013a  f7fffffe          BL       DMA_Init
;;;345    
;;;346      /*!< DMA2 Channel4 enable */
;;;347      DMA_Cmd(DMA2_Channel4, ENABLE); 
00013e  2101              MOVS     r1,#1
000140  48bd              LDR      r0,|L1.1080|
000142  f7fffffe          BL       DMA_Cmd
;;;348    }
000146  b00b              ADD      sp,sp,#0x2c
000148  bd30              POP      {r4,r5,pc}
;;;349    
                          ENDP

                  SD_DMAEndOfTransferStatus PROC
;;;354      */
;;;355    uint32_t SD_DMAEndOfTransferStatus(void)
00014a  b510              PUSH     {r4,lr}
;;;356    {
;;;357      return (uint32_t)DMA_GetFlagStatus(DMA2_FLAG_TC4);
00014c  48bc              LDR      r0,|L1.1088|
00014e  f7fffffe          BL       DMA_GetFlagStatus
;;;358    }
000152  bd10              POP      {r4,pc}
;;;359    
                          ENDP

                  SD_DeInit PROC
;;;374      */
;;;375    void SD_DeInit(void)
000154  b510              PUSH     {r4,lr}
;;;376    { 
;;;377      SD_LowLevel_DeInit();
000156  f7fffffe          BL       SD_LowLevel_DeInit
;;;378    }
00015a  bd10              POP      {r4,pc}
;;;379    
                          ENDP

                  SD_SetDeviceMode PROC
;;;1046     */
;;;1047   SD_Error SD_SetDeviceMode(uint32_t Mode)
00015c  4601              MOV      r1,r0
;;;1048   {
;;;1049     SD_Error errorstatus = SD_OK;
00015e  202a              MOVS     r0,#0x2a
;;;1050   
;;;1051     if ((Mode == SD_DMA_MODE) || (Mode == SD_INTERRUPT_MODE) || (Mode == SD_POLLING_MODE))
000160  b119              CBZ      r1,|L1.362|
000162  2901              CMP      r1,#1
000164  d001              BEQ      |L1.362|
000166  2902              CMP      r1,#2
000168  d102              BNE      |L1.368|
                  |L1.362|
;;;1052     {
;;;1053       DeviceMode = Mode;
00016a  4ab6              LDR      r2,|L1.1092|
00016c  6011              STR      r1,[r2,#0]  ; DeviceMode
00016e  e000              B        |L1.370|
                  |L1.368|
;;;1054     }
;;;1055     else
;;;1056     {
;;;1057       errorstatus = SD_INVALID_PARAMETER;
000170  2026              MOVS     r0,#0x26
                  |L1.370|
;;;1058     }
;;;1059     return(errorstatus);
;;;1060   
;;;1061   }
000172  4770              BX       lr
;;;1062   
                          ENDP

                  CmdResp1Error PROC
;;;2457     */
;;;2458   static SD_Error CmdResp1Error(uint8_t cmd)
000174  e92d41f0          PUSH     {r4-r8,lr}
;;;2459   {
000178  4606              MOV      r6,r0
;;;2460     SD_Error errorstatus = SD_OK;
00017a  272a              MOVS     r7,#0x2a
;;;2461     uint32_t status;
;;;2462     uint32_t response_r1;
;;;2463   
;;;2464     status = SDIO->STA;
00017c  48af              LDR      r0,|L1.1084|
00017e  3880              SUBS     r0,r0,#0x80
000180  6b45              LDR      r5,[r0,#0x34]
;;;2465   
;;;2466     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
000182  e002              B        |L1.394|
                  |L1.388|
;;;2467     {
;;;2468       status = SDIO->STA;
000184  48ad              LDR      r0,|L1.1084|
000186  3880              SUBS     r0,r0,#0x80
000188  6b45              LDR      r5,[r0,#0x34]
                  |L1.394|
00018a  f0050045          AND      r0,r5,#0x45           ;2466
00018e  2800              CMP      r0,#0                 ;2466
000190  d0f8              BEQ      |L1.388|
;;;2469     }
;;;2470   
;;;2471     if (status & SDIO_FLAG_CTIMEOUT)
000192  f0050004          AND      r0,r5,#4
000196  b130              CBZ      r0,|L1.422|
;;;2472     {
;;;2473       errorstatus = SD_CMD_RSP_TIMEOUT;
000198  2703              MOVS     r7,#3
;;;2474       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
00019a  2004              MOVS     r0,#4
00019c  f7fffffe          BL       SDIO_ClearFlag
;;;2475       return(errorstatus);
0001a0  4638              MOV      r0,r7
                  |L1.418|
;;;2476     }
;;;2477     else if (status & SDIO_FLAG_CCRCFAIL)
;;;2478     {
;;;2479       errorstatus = SD_CMD_CRC_FAIL;
;;;2480       SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
;;;2481       return(errorstatus);
;;;2482     }
;;;2483   
;;;2484     /*!< Check response received is of desired command */
;;;2485     if (SDIO_GetCommandResponse() != cmd)
;;;2486     {
;;;2487       errorstatus = SD_ILLEGAL_CMD;
;;;2488       return(errorstatus);
;;;2489     }
;;;2490   
;;;2491     /*!< Clear all the static flags */
;;;2492     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2493   
;;;2494     /*!< We have received response, retrieve it for analysis  */
;;;2495     response_r1 = SDIO_GetResponse(SDIO_RESP1);
;;;2496   
;;;2497     if ((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
;;;2498     {
;;;2499       return(errorstatus);
;;;2500     }
;;;2501   
;;;2502     if (response_r1 & SD_OCR_ADDR_OUT_OF_RANGE)
;;;2503     {
;;;2504       return(SD_ADDR_OUT_OF_RANGE);
;;;2505     }
;;;2506   
;;;2507     if (response_r1 & SD_OCR_ADDR_MISALIGNED)
;;;2508     {
;;;2509       return(SD_ADDR_MISALIGNED);
;;;2510     }
;;;2511   
;;;2512     if (response_r1 & SD_OCR_BLOCK_LEN_ERR)
;;;2513     {
;;;2514       return(SD_BLOCK_LEN_ERR);
;;;2515     }
;;;2516   
;;;2517     if (response_r1 & SD_OCR_ERASE_SEQ_ERR)
;;;2518     {
;;;2519       return(SD_ERASE_SEQ_ERR);
;;;2520     }
;;;2521   
;;;2522     if (response_r1 & SD_OCR_BAD_ERASE_PARAM)
;;;2523     {
;;;2524       return(SD_BAD_ERASE_PARAM);
;;;2525     }
;;;2526   
;;;2527     if (response_r1 & SD_OCR_WRITE_PROT_VIOLATION)
;;;2528     {
;;;2529       return(SD_WRITE_PROT_VIOLATION);
;;;2530     }
;;;2531   
;;;2532     if (response_r1 & SD_OCR_LOCK_UNLOCK_FAILED)
;;;2533     {
;;;2534       return(SD_LOCK_UNLOCK_FAILED);
;;;2535     }
;;;2536   
;;;2537     if (response_r1 & SD_OCR_COM_CRC_FAILED)
;;;2538     {
;;;2539       return(SD_COM_CRC_FAILED);
;;;2540     }
;;;2541   
;;;2542     if (response_r1 & SD_OCR_ILLEGAL_CMD)
;;;2543     {
;;;2544       return(SD_ILLEGAL_CMD);
;;;2545     }
;;;2546   
;;;2547     if (response_r1 & SD_OCR_CARD_ECC_FAILED)
;;;2548     {
;;;2549       return(SD_CARD_ECC_FAILED);
;;;2550     }
;;;2551   
;;;2552     if (response_r1 & SD_OCR_CC_ERROR)
;;;2553     {
;;;2554       return(SD_CC_ERROR);
;;;2555     }
;;;2556   
;;;2557     if (response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR)
;;;2558     {
;;;2559       return(SD_GENERAL_UNKNOWN_ERROR);
;;;2560     }
;;;2561   
;;;2562     if (response_r1 & SD_OCR_STREAM_READ_UNDERRUN)
;;;2563     {
;;;2564       return(SD_STREAM_READ_UNDERRUN);
;;;2565     }
;;;2566   
;;;2567     if (response_r1 & SD_OCR_STREAM_WRITE_OVERRUN)
;;;2568     {
;;;2569       return(SD_STREAM_WRITE_OVERRUN);
;;;2570     }
;;;2571   
;;;2572     if (response_r1 & SD_OCR_CID_CSD_OVERWRIETE)
;;;2573     {
;;;2574       return(SD_CID_CSD_OVERWRITE);
;;;2575     }
;;;2576   
;;;2577     if (response_r1 & SD_OCR_WP_ERASE_SKIP)
;;;2578     {
;;;2579       return(SD_WP_ERASE_SKIP);
;;;2580     }
;;;2581   
;;;2582     if (response_r1 & SD_OCR_CARD_ECC_DISABLED)
;;;2583     {
;;;2584       return(SD_CARD_ECC_DISABLED);
;;;2585     }
;;;2586   
;;;2587     if (response_r1 & SD_OCR_ERASE_RESET)
;;;2588     {
;;;2589       return(SD_ERASE_RESET);
;;;2590     }
;;;2591   
;;;2592     if (response_r1 & SD_OCR_AKE_SEQ_ERROR)
;;;2593     {
;;;2594       return(SD_AKE_SEQ_ERROR);
;;;2595     }
;;;2596     return(errorstatus);
;;;2597   }
0001a2  e8bd81f0          POP      {r4-r8,pc}
                  |L1.422|
0001a6  f0050001          AND      r0,r5,#1              ;2477
0001aa  b128              CBZ      r0,|L1.440|
0001ac  2701              MOVS     r7,#1                 ;2479
0001ae  2001              MOVS     r0,#1                 ;2480
0001b0  f7fffffe          BL       SDIO_ClearFlag
0001b4  4638              MOV      r0,r7                 ;2481
0001b6  e7f4              B        |L1.418|
                  |L1.440|
0001b8  f7fffffe          BL       SDIO_GetCommandResponse
0001bc  42b0              CMP      r0,r6                 ;2485
0001be  d002              BEQ      |L1.454|
0001c0  2710              MOVS     r7,#0x10              ;2487
0001c2  4638              MOV      r0,r7                 ;2488
0001c4  e7ed              B        |L1.418|
                  |L1.454|
0001c6  f24050ff          MOV      r0,#0x5ff             ;2492
0001ca  f7fffffe          BL       SDIO_ClearFlag
0001ce  2000              MOVS     r0,#0                 ;2495
0001d0  f7fffffe          BL       SDIO_GetResponse
0001d4  4604              MOV      r4,r0                 ;2495
0001d6  489c              LDR      r0,|L1.1096|
0001d8  4020              ANDS     r0,r0,r4              ;2497
0001da  b908              CBNZ     r0,|L1.480|
0001dc  4638              MOV      r0,r7                 ;2499
0001de  e7e0              B        |L1.418|
                  |L1.480|
0001e0  f0044000          AND      r0,r4,#0x80000000     ;2502
0001e4  b108              CBZ      r0,|L1.490|
0001e6  201c              MOVS     r0,#0x1c              ;2504
0001e8  e7db              B        |L1.418|
                  |L1.490|
0001ea  f0044080          AND      r0,r4,#0x40000000     ;2507
0001ee  b108              CBZ      r0,|L1.500|
0001f0  2009              MOVS     r0,#9                 ;2509
0001f2  e7d6              B        |L1.418|
                  |L1.500|
0001f4  f0045000          AND      r0,r4,#0x20000000     ;2512
0001f8  b108              CBZ      r0,|L1.510|
0001fa  200a              MOVS     r0,#0xa               ;2514
0001fc  e7d1              B        |L1.418|
                  |L1.510|
0001fe  f0045080          AND      r0,r4,#0x10000000     ;2517
000202  b108              CBZ      r0,|L1.520|
000204  200b              MOVS     r0,#0xb               ;2519
000206  e7cc              B        |L1.418|
                  |L1.520|
000208  f0046000          AND      r0,r4,#0x8000000      ;2522
00020c  b108              CBZ      r0,|L1.530|
00020e  200c              MOVS     r0,#0xc               ;2524
000210  e7c7              B        |L1.418|
                  |L1.530|
000212  f0046080          AND      r0,r4,#0x4000000      ;2527
000216  b108              CBZ      r0,|L1.540|
000218  200d              MOVS     r0,#0xd               ;2529
00021a  e7c2              B        |L1.418|
                  |L1.540|
00021c  f0047080          AND      r0,r4,#0x1000000      ;2532
000220  b108              CBZ      r0,|L1.550|
000222  200e              MOVS     r0,#0xe               ;2534
000224  e7bd              B        |L1.418|
                  |L1.550|
000226  f4040000          AND      r0,r4,#0x800000       ;2537
00022a  b108              CBZ      r0,|L1.560|
00022c  200f              MOVS     r0,#0xf               ;2539
00022e  e7b8              B        |L1.418|
                  |L1.560|
000230  f4040080          AND      r0,r4,#0x400000       ;2542
000234  b108              CBZ      r0,|L1.570|
000236  2010              MOVS     r0,#0x10              ;2544
000238  e7b3              B        |L1.418|
                  |L1.570|
00023a  f4041000          AND      r0,r4,#0x200000       ;2547
00023e  b108              CBZ      r0,|L1.580|
000240  2011              MOVS     r0,#0x11              ;2549
000242  e7ae              B        |L1.418|
                  |L1.580|
000244  f4041080          AND      r0,r4,#0x100000       ;2552
000248  b108              CBZ      r0,|L1.590|
00024a  2012              MOVS     r0,#0x12              ;2554
00024c  e7a9              B        |L1.418|
                  |L1.590|
00024e  f4042000          AND      r0,r4,#0x80000        ;2557
000252  b108              CBZ      r0,|L1.600|
000254  2013              MOVS     r0,#0x13              ;2559
000256  e7a4              B        |L1.418|
                  |L1.600|
000258  f4042080          AND      r0,r4,#0x40000        ;2562
00025c  b108              CBZ      r0,|L1.610|
00025e  2014              MOVS     r0,#0x14              ;2564
000260  e79f              B        |L1.418|
                  |L1.610|
000262  f4043000          AND      r0,r4,#0x20000        ;2567
000266  b108              CBZ      r0,|L1.620|
000268  2015              MOVS     r0,#0x15              ;2569
00026a  e79a              B        |L1.418|
                  |L1.620|
00026c  f4043080          AND      r0,r4,#0x10000        ;2572
000270  b108              CBZ      r0,|L1.630|
000272  2016              MOVS     r0,#0x16              ;2574
000274  e795              B        |L1.418|
                  |L1.630|
000276  f4044000          AND      r0,r4,#0x8000         ;2577
00027a  b108              CBZ      r0,|L1.640|
00027c  2017              MOVS     r0,#0x17              ;2579
00027e  e790              B        |L1.418|
                  |L1.640|
000280  f4044080          AND      r0,r4,#0x4000         ;2582
000284  b108              CBZ      r0,|L1.650|
000286  2018              MOVS     r0,#0x18              ;2584
000288  e78b              B        |L1.418|
                  |L1.650|
00028a  f4045000          AND      r0,r4,#0x2000         ;2587
00028e  b108              CBZ      r0,|L1.660|
000290  2019              MOVS     r0,#0x19              ;2589
000292  e786              B        |L1.418|
                  |L1.660|
000294  f0040008          AND      r0,r4,#8              ;2592
000298  b108              CBZ      r0,|L1.670|
00029a  201a              MOVS     r0,#0x1a              ;2594
00029c  e781              B        |L1.418|
                  |L1.670|
00029e  4638              MOV      r0,r7                 ;2596
0002a0  e77f              B        |L1.418|
;;;2598   
                          ENDP

                  FindSCR PROC
;;;3011     */
;;;3012   static SD_Error FindSCR(uint16_t rca, uint32_t *pscr)
0002a2  e92d41fc          PUSH     {r2-r8,lr}
;;;3013   {
0002a6  4607              MOV      r7,r0
0002a8  460d              MOV      r5,r1
;;;3014     uint32_t index = 0;
0002aa  2600              MOVS     r6,#0
;;;3015     SD_Error errorstatus = SD_OK;
0002ac  242a              MOVS     r4,#0x2a
;;;3016     uint32_t tempscr[2] = {0, 0};
0002ae  2000              MOVS     r0,#0
0002b0  9000              STR      r0,[sp,#0]
0002b2  9001              STR      r0,[sp,#4]
;;;3017   
;;;3018     /*!< Set Block Size To 8 Bytes */
;;;3019     /*!< Send CMD55 APP_CMD with argument as card's RCA */
;;;3020     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)8;
0002b4  2008              MOVS     r0,#8
0002b6  4965              LDR      r1,|L1.1100|
0002b8  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
;;;3021     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
0002ba  2010              MOVS     r0,#0x10
0002bc  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;3022     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
0002be  2040              MOVS     r0,#0x40
0002c0  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;3023     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
0002c2  2000              MOVS     r0,#0
0002c4  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;3024     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
0002c6  f44f6080          MOV      r0,#0x400
0002ca  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;3025     SDIO_SendCommand(&SDIO_CmdInitStructure);
0002cc  4608              MOV      r0,r1
0002ce  f7fffffe          BL       SDIO_SendCommand
;;;3026   
;;;3027     errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
0002d2  2010              MOVS     r0,#0x10
0002d4  f7fffffe          BL       CmdResp1Error
0002d8  4604              MOV      r4,r0
;;;3028   
;;;3029     if (errorstatus != SD_OK)
0002da  2c2a              CMP      r4,#0x2a
0002dc  d002              BEQ      |L1.740|
;;;3030     {
;;;3031       return(errorstatus);
0002de  4620              MOV      r0,r4
                  |L1.736|
;;;3032     }
;;;3033   
;;;3034     /*!< Send CMD55 APP_CMD with argument as card's RCA */
;;;3035     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
;;;3036     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;3037     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;3038     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;3039     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;3040     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;3041   
;;;3042     errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;3043   
;;;3044     if (errorstatus != SD_OK)
;;;3045     {
;;;3046       return(errorstatus);
;;;3047     }
;;;3048     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;3049     SDIO_DataInitStructure.SDIO_DataLength = 8;
;;;3050     SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_8b;
;;;3051     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
;;;3052     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;3053     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;3054     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;3055   
;;;3056   
;;;3057     /*!< Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
;;;3058     SDIO_CmdInitStructure.SDIO_Argument = 0x0;
;;;3059     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_SEND_SCR;
;;;3060     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;3061     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;3062     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;3063     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;3064   
;;;3065     errorstatus = CmdResp1Error(SD_CMD_SD_APP_SEND_SCR);
;;;3066   
;;;3067     if (errorstatus != SD_OK)
;;;3068     {
;;;3069       return(errorstatus);
;;;3070     }
;;;3071   
;;;3072     while (!(SDIO->STA & (SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
;;;3073     {
;;;3074       if (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
;;;3075       {
;;;3076         *(tempscr + index) = SDIO_ReadData();
;;;3077         index++;
;;;3078       }
;;;3079     }
;;;3080   
;;;3081     if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;3082     {
;;;3083       SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;3084       errorstatus = SD_DATA_TIMEOUT;
;;;3085       return(errorstatus);
;;;3086     }
;;;3087     else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;3088     {
;;;3089       SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;3090       errorstatus = SD_DATA_CRC_FAIL;
;;;3091       return(errorstatus);
;;;3092     }
;;;3093     else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
;;;3094     {
;;;3095       SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
;;;3096       errorstatus = SD_RX_OVERRUN;
;;;3097       return(errorstatus);
;;;3098     }
;;;3099     else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;3100     {
;;;3101       SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;3102       errorstatus = SD_START_BIT_ERR;
;;;3103       return(errorstatus);
;;;3104     }
;;;3105   
;;;3106     /*!< Clear all the static flags */
;;;3107     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;3108   
;;;3109     *(pscr + 1) = ((tempscr[0] & SD_0TO7BITS) << 24) | ((tempscr[0] & SD_8TO15BITS) << 8) | ((tempscr[0] & SD_16TO23BITS) >> 8) | ((tempscr[0] & SD_24TO31BITS) >> 24);
;;;3110   
;;;3111     *(pscr) = ((tempscr[1] & SD_0TO7BITS) << 24) | ((tempscr[1] & SD_8TO15BITS) << 8) | ((tempscr[1] & SD_16TO23BITS) >> 8) | ((tempscr[1] & SD_24TO31BITS) >> 24);
;;;3112   
;;;3113     return(errorstatus);
;;;3114   }
0002e0  e8bd81fc          POP      {r2-r8,pc}
                  |L1.740|
0002e4  485a              LDR      r0,|L1.1104|
0002e6  8800              LDRH     r0,[r0,#0]            ;3035  ; RCA
0002e8  0400              LSLS     r0,r0,#16             ;3035
0002ea  4958              LDR      r1,|L1.1100|
0002ec  6008              STR      r0,[r1,#0]            ;3035  ; SDIO_CmdInitStructure
0002ee  2037              MOVS     r0,#0x37              ;3036
0002f0  6048              STR      r0,[r1,#4]            ;3036  ; SDIO_CmdInitStructure
0002f2  2040              MOVS     r0,#0x40              ;3037
0002f4  6088              STR      r0,[r1,#8]            ;3037  ; SDIO_CmdInitStructure
0002f6  2000              MOVS     r0,#0                 ;3038
0002f8  60c8              STR      r0,[r1,#0xc]          ;3038  ; SDIO_CmdInitStructure
0002fa  f44f6080          MOV      r0,#0x400             ;3039
0002fe  6108              STR      r0,[r1,#0x10]         ;3039  ; SDIO_CmdInitStructure
000300  4608              MOV      r0,r1                 ;3040
000302  f7fffffe          BL       SDIO_SendCommand
000306  2037              MOVS     r0,#0x37              ;3042
000308  f7fffffe          BL       CmdResp1Error
00030c  4604              MOV      r4,r0                 ;3042
00030e  2c2a              CMP      r4,#0x2a              ;3044
000310  d001              BEQ      |L1.790|
000312  4620              MOV      r0,r4                 ;3046
000314  e7e4              B        |L1.736|
                  |L1.790|
000316  484f              LDR      r0,|L1.1108|
000318  494f              LDR      r1,|L1.1112|
00031a  6008              STR      r0,[r1,#0]            ;3048  ; SDIO_DataInitStructure
00031c  2008              MOVS     r0,#8                 ;3049
00031e  6048              STR      r0,[r1,#4]            ;3049  ; SDIO_DataInitStructure
000320  2030              MOVS     r0,#0x30              ;3050
000322  6088              STR      r0,[r1,#8]            ;3050  ; SDIO_DataInitStructure
000324  2002              MOVS     r0,#2                 ;3051
000326  60c8              STR      r0,[r1,#0xc]          ;3051  ; SDIO_DataInitStructure
000328  2000              MOVS     r0,#0                 ;3052
00032a  6108              STR      r0,[r1,#0x10]         ;3052  ; SDIO_DataInitStructure
00032c  2001              MOVS     r0,#1                 ;3053
00032e  6148              STR      r0,[r1,#0x14]         ;3053  ; SDIO_DataInitStructure
000330  4608              MOV      r0,r1                 ;3054
000332  f7fffffe          BL       SDIO_DataConfig
000336  2000              MOVS     r0,#0                 ;3058
000338  4944              LDR      r1,|L1.1100|
00033a  6008              STR      r0,[r1,#0]            ;3058  ; SDIO_CmdInitStructure
00033c  2033              MOVS     r0,#0x33              ;3059
00033e  6048              STR      r0,[r1,#4]            ;3059  ; SDIO_CmdInitStructure
000340  2040              MOVS     r0,#0x40              ;3060
000342  6088              STR      r0,[r1,#8]            ;3060  ; SDIO_CmdInitStructure
000344  2000              MOVS     r0,#0                 ;3061
000346  60c8              STR      r0,[r1,#0xc]          ;3061  ; SDIO_CmdInitStructure
000348  f44f6080          MOV      r0,#0x400             ;3062
00034c  6108              STR      r0,[r1,#0x10]         ;3062  ; SDIO_CmdInitStructure
00034e  4608              MOV      r0,r1                 ;3063
000350  f7fffffe          BL       SDIO_SendCommand
000354  2033              MOVS     r0,#0x33              ;3065
000356  f7fffffe          BL       CmdResp1Error
00035a  4604              MOV      r4,r0                 ;3065
00035c  2c2a              CMP      r4,#0x2a              ;3067
00035e  d001              BEQ      |L1.868|
000360  4620              MOV      r0,r4                 ;3069
000362  e7bd              B        |L1.736|
                  |L1.868|
000364  e009              B        |L1.890|
                  |L1.870|
000366  f44f1000          MOV      r0,#0x200000          ;3074
00036a  f7fffffe          BL       SDIO_GetFlagStatus
00036e  b120              CBZ      r0,|L1.890|
000370  f7fffffe          BL       SDIO_ReadData
000374  f84d0026          STR      r0,[sp,r6,LSL #2]     ;3076
000378  1c76              ADDS     r6,r6,#1              ;3077
                  |L1.890|
00037a  4830              LDR      r0,|L1.1084|
00037c  3880              SUBS     r0,r0,#0x80           ;3072
00037e  6b40              LDR      r0,[r0,#0x34]         ;3072
000380  f240612a          MOV      r1,#0x62a             ;3072
000384  4008              ANDS     r0,r0,r1              ;3072
000386  2800              CMP      r0,#0                 ;3072
000388  d0ed              BEQ      |L1.870|
00038a  2008              MOVS     r0,#8                 ;3081
00038c  f7fffffe          BL       SDIO_GetFlagStatus
000390  b128              CBZ      r0,|L1.926|
000392  2008              MOVS     r0,#8                 ;3083
000394  f7fffffe          BL       SDIO_ClearFlag
000398  2404              MOVS     r4,#4                 ;3084
00039a  4620              MOV      r0,r4                 ;3085
00039c  e7a0              B        |L1.736|
                  |L1.926|
00039e  2002              MOVS     r0,#2                 ;3087
0003a0  f7fffffe          BL       SDIO_GetFlagStatus
0003a4  b128              CBZ      r0,|L1.946|
0003a6  2002              MOVS     r0,#2                 ;3089
0003a8  f7fffffe          BL       SDIO_ClearFlag
0003ac  2402              MOVS     r4,#2                 ;3090
0003ae  4620              MOV      r0,r4                 ;3091
0003b0  e796              B        |L1.736|
                  |L1.946|
0003b2  2020              MOVS     r0,#0x20              ;3093
0003b4  f7fffffe          BL       SDIO_GetFlagStatus
0003b8  b128              CBZ      r0,|L1.966|
0003ba  2020              MOVS     r0,#0x20              ;3095
0003bc  f7fffffe          BL       SDIO_ClearFlag
0003c0  2406              MOVS     r4,#6                 ;3096
0003c2  4620              MOV      r0,r4                 ;3097
0003c4  e78c              B        |L1.736|
                  |L1.966|
0003c6  f44f7000          MOV      r0,#0x200             ;3099
0003ca  f7fffffe          BL       SDIO_GetFlagStatus
0003ce  b130              CBZ      r0,|L1.990|
0003d0  f44f7000          MOV      r0,#0x200             ;3101
0003d4  f7fffffe          BL       SDIO_ClearFlag
0003d8  2407              MOVS     r4,#7                 ;3102
0003da  4620              MOV      r0,r4                 ;3103
0003dc  e780              B        |L1.736|
                  |L1.990|
0003de  f24050ff          MOV      r0,#0x5ff             ;3107
0003e2  f7fffffe          BL       SDIO_ClearFlag
0003e6  9800              LDR      r0,[sp,#0]            ;3109
0003e8  0600              LSLS     r0,r0,#24             ;3109
0003ea  9900              LDR      r1,[sp,#0]            ;3109
0003ec  f401417f          AND      r1,r1,#0xff00         ;3109
0003f0  ea402001          ORR      r0,r0,r1,LSL #8       ;3109
0003f4  9900              LDR      r1,[sp,#0]            ;3109
0003f6  f401017f          AND      r1,r1,#0xff0000       ;3109
0003fa  ea402011          ORR      r0,r0,r1,LSR #8       ;3109
0003fe  9900              LDR      r1,[sp,#0]            ;3109
000400  ea406011          ORR      r0,r0,r1,LSR #24      ;3109
000404  6068              STR      r0,[r5,#4]            ;3109
000406  9801              LDR      r0,[sp,#4]            ;3111
000408  0600              LSLS     r0,r0,#24             ;3111
00040a  9901              LDR      r1,[sp,#4]            ;3111
00040c  f401417f          AND      r1,r1,#0xff00         ;3111
000410  ea402001          ORR      r0,r0,r1,LSL #8       ;3111
000414  9901              LDR      r1,[sp,#4]            ;3111
000416  f401017f          AND      r1,r1,#0xff0000       ;3111
00041a  ea402011          ORR      r0,r0,r1,LSR #8       ;3111
00041e  9901              LDR      r1,[sp,#4]            ;3111
000420  ea406011          ORR      r0,r0,r1,LSR #24      ;3111
000424  6028              STR      r0,[r5,#0]            ;3111
000426  e019              B        |L1.1116|
                  |L1.1064|
                          DCD      0x40011000
                  |L1.1068|
                          DCD      0x40011400
                  |L1.1072|
                          DCD      0x40011c00
                  |L1.1076|
                          DCD      0x1000f000
                  |L1.1080|
                          DCD      0x40020444
                  |L1.1084|
                          DCD      0x40018080
                  |L1.1088|
                          DCD      0x10002000
                  |L1.1092|
                          DCD      DeviceMode
                  |L1.1096|
                          DCD      0xfdffe008
                  |L1.1100|
                          DCD      SDIO_CmdInitStructure
                  |L1.1104|
                          DCD      ||RCA||
                  |L1.1108|
                          DCD      0x000fffff
                  |L1.1112|
                          DCD      SDIO_DataInitStructure
                  |L1.1116|
00045c  4620              MOV      r0,r4                 ;3113
00045e  e73f              B        |L1.736|
;;;3115   
                          ENDP

                  SDEnWideBus PROC
;;;2738     */
;;;2739   static SD_Error SDEnWideBus(FunctionalState NewState)
000460  b57c              PUSH     {r2-r6,lr}
;;;2740   {
000462  4605              MOV      r5,r0
;;;2741     SD_Error errorstatus = SD_OK;
000464  242a              MOVS     r4,#0x2a
;;;2742   
;;;2743     uint32_t scr[2] = {0, 0};
000466  2000              MOVS     r0,#0
000468  9000              STR      r0,[sp,#0]
00046a  9001              STR      r0,[sp,#4]
;;;2744   
;;;2745     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
00046c  f7fffffe          BL       SDIO_GetResponse
000470  f0007000          AND      r0,r0,#0x2000000
000474  b110              CBZ      r0,|L1.1148|
;;;2746     {
;;;2747       errorstatus = SD_LOCK_UNLOCK_FAILED;
000476  240e              MOVS     r4,#0xe
;;;2748       return(errorstatus);
000478  4620              MOV      r0,r4
                  |L1.1146|
;;;2749     }
;;;2750   
;;;2751     /*!< Get SCR Register */
;;;2752     errorstatus = FindSCR(RCA, scr);
;;;2753   
;;;2754     if (errorstatus != SD_OK)
;;;2755     {
;;;2756       return(errorstatus);
;;;2757     }
;;;2758   
;;;2759     /*!< If wide bus operation to be enabled */
;;;2760     if (NewState == ENABLE)
;;;2761     {
;;;2762       /*!< If requested card supports wide bus operation */
;;;2763       if ((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
;;;2764       {
;;;2765         /*!< Send CMD55 APP_CMD with argument as card's RCA.*/
;;;2766         SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
;;;2767         SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;2768         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2769         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2770         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2771         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2772   
;;;2773         errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;2774   
;;;2775         if (errorstatus != SD_OK)
;;;2776         {
;;;2777           return(errorstatus);
;;;2778         }
;;;2779   
;;;2780         /*!< Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
;;;2781         SDIO_CmdInitStructure.SDIO_Argument = 0x2;
;;;2782         SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_SD_SET_BUSWIDTH;
;;;2783         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2784         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2785         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2786         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2787   
;;;2788         errorstatus = CmdResp1Error(SD_CMD_APP_SD_SET_BUSWIDTH);
;;;2789   
;;;2790         if (errorstatus != SD_OK)
;;;2791         {
;;;2792           return(errorstatus);
;;;2793         }
;;;2794         return(errorstatus);
;;;2795       }
;;;2796       else
;;;2797       {
;;;2798         errorstatus = SD_REQUEST_NOT_APPLICABLE;
;;;2799         return(errorstatus);
;;;2800       }
;;;2801     }   /*!< If wide bus operation to be disabled */
;;;2802     else
;;;2803     {
;;;2804       /*!< If requested card supports 1 bit mode operation */
;;;2805       if ((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
;;;2806       {
;;;2807         /*!< Send CMD55 APP_CMD with argument as card's RCA.*/
;;;2808         SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
;;;2809         SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;2810         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2811         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2812         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2813         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2814   
;;;2815   
;;;2816         errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;2817   
;;;2818         if (errorstatus != SD_OK)
;;;2819         {
;;;2820           return(errorstatus);
;;;2821         }
;;;2822   
;;;2823         /*!< Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
;;;2824         SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;2825         SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_SD_SET_BUSWIDTH;
;;;2826         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2827         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2828         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2829         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2830   
;;;2831         errorstatus = CmdResp1Error(SD_CMD_APP_SD_SET_BUSWIDTH);
;;;2832   
;;;2833         if (errorstatus != SD_OK)
;;;2834         {
;;;2835           return(errorstatus);
;;;2836         }
;;;2837   
;;;2838         return(errorstatus);
;;;2839       }
;;;2840       else
;;;2841       {
;;;2842         errorstatus = SD_REQUEST_NOT_APPLICABLE;
;;;2843         return(errorstatus);
;;;2844       }
;;;2845     }
;;;2846   }
00047a  bd7c              POP      {r2-r6,pc}
                  |L1.1148|
00047c  49fe              LDR      r1,|L1.2168|
00047e  8809              LDRH     r1,[r1,#0]            ;2752  ; RCA
000480  b288              UXTH     r0,r1                 ;2752
000482  4669              MOV      r1,sp                 ;2752
000484  f7fffffe          BL       FindSCR
000488  4604              MOV      r4,r0                 ;2752
00048a  2c2a              CMP      r4,#0x2a              ;2754
00048c  d001              BEQ      |L1.1170|
00048e  4620              MOV      r0,r4                 ;2756
000490  e7f3              B        |L1.1146|
                  |L1.1170|
000492  2d01              CMP      r5,#1                 ;2760
000494  d138              BNE      |L1.1288|
000496  9801              LDR      r0,[sp,#4]            ;2763
000498  f4002080          AND      r0,r0,#0x40000        ;2763
00049c  2800              CMP      r0,#0                 ;2763
00049e  d030              BEQ      |L1.1282|
0004a0  48f5              LDR      r0,|L1.2168|
0004a2  8800              LDRH     r0,[r0,#0]            ;2766  ; RCA
0004a4  0400              LSLS     r0,r0,#16             ;2766
0004a6  49f5              LDR      r1,|L1.2172|
0004a8  6008              STR      r0,[r1,#0]            ;2766  ; SDIO_CmdInitStructure
0004aa  2037              MOVS     r0,#0x37              ;2767
0004ac  6048              STR      r0,[r1,#4]            ;2767  ; SDIO_CmdInitStructure
0004ae  2040              MOVS     r0,#0x40              ;2768
0004b0  6088              STR      r0,[r1,#8]            ;2768  ; SDIO_CmdInitStructure
0004b2  2000              MOVS     r0,#0                 ;2769
0004b4  60c8              STR      r0,[r1,#0xc]          ;2769  ; SDIO_CmdInitStructure
0004b6  02a8              LSLS     r0,r5,#10             ;2770
0004b8  6108              STR      r0,[r1,#0x10]         ;2770  ; SDIO_CmdInitStructure
0004ba  4608              MOV      r0,r1                 ;2771
0004bc  f7fffffe          BL       SDIO_SendCommand
0004c0  2037              MOVS     r0,#0x37              ;2773
0004c2  f7fffffe          BL       CmdResp1Error
0004c6  4604              MOV      r4,r0                 ;2773
0004c8  2c2a              CMP      r4,#0x2a              ;2775
0004ca  d001              BEQ      |L1.1232|
0004cc  4620              MOV      r0,r4                 ;2777
0004ce  e7d4              B        |L1.1146|
                  |L1.1232|
0004d0  2002              MOVS     r0,#2                 ;2781
0004d2  49ea              LDR      r1,|L1.2172|
0004d4  6008              STR      r0,[r1,#0]            ;2781  ; SDIO_CmdInitStructure
0004d6  2006              MOVS     r0,#6                 ;2782
0004d8  6048              STR      r0,[r1,#4]            ;2782  ; SDIO_CmdInitStructure
0004da  2040              MOVS     r0,#0x40              ;2783
0004dc  6088              STR      r0,[r1,#8]            ;2783  ; SDIO_CmdInitStructure
0004de  2000              MOVS     r0,#0                 ;2784
0004e0  60c8              STR      r0,[r1,#0xc]          ;2784  ; SDIO_CmdInitStructure
0004e2  f44f6080          MOV      r0,#0x400             ;2785
0004e6  6108              STR      r0,[r1,#0x10]         ;2785  ; SDIO_CmdInitStructure
0004e8  4608              MOV      r0,r1                 ;2786
0004ea  f7fffffe          BL       SDIO_SendCommand
0004ee  2006              MOVS     r0,#6                 ;2788
0004f0  f7fffffe          BL       CmdResp1Error
0004f4  4604              MOV      r4,r0                 ;2788
0004f6  2c2a              CMP      r4,#0x2a              ;2790
0004f8  d001              BEQ      |L1.1278|
0004fa  4620              MOV      r0,r4                 ;2792
0004fc  e7bd              B        |L1.1146|
                  |L1.1278|
0004fe  4620              MOV      r0,r4                 ;2794
000500  e7bb              B        |L1.1146|
                  |L1.1282|
000502  2425              MOVS     r4,#0x25              ;2798
000504  4620              MOV      r0,r4                 ;2799
000506  e7b8              B        |L1.1146|
                  |L1.1288|
000508  9801              LDR      r0,[sp,#4]            ;2805
00050a  f4003080          AND      r0,r0,#0x10000        ;2805
00050e  b378              CBZ      r0,|L1.1392|
000510  48d9              LDR      r0,|L1.2168|
000512  8800              LDRH     r0,[r0,#0]            ;2808  ; RCA
000514  0400              LSLS     r0,r0,#16             ;2808
000516  49d9              LDR      r1,|L1.2172|
000518  6008              STR      r0,[r1,#0]            ;2808  ; SDIO_CmdInitStructure
00051a  2037              MOVS     r0,#0x37              ;2809
00051c  6048              STR      r0,[r1,#4]            ;2809  ; SDIO_CmdInitStructure
00051e  2040              MOVS     r0,#0x40              ;2810
000520  6088              STR      r0,[r1,#8]            ;2810  ; SDIO_CmdInitStructure
000522  2000              MOVS     r0,#0                 ;2811
000524  60c8              STR      r0,[r1,#0xc]          ;2811  ; SDIO_CmdInitStructure
000526  f44f6080          MOV      r0,#0x400             ;2812
00052a  6108              STR      r0,[r1,#0x10]         ;2812  ; SDIO_CmdInitStructure
00052c  4608              MOV      r0,r1                 ;2813
00052e  f7fffffe          BL       SDIO_SendCommand
000532  2037              MOVS     r0,#0x37              ;2816
000534  f7fffffe          BL       CmdResp1Error
000538  4604              MOV      r4,r0                 ;2816
00053a  2c2a              CMP      r4,#0x2a              ;2818
00053c  d001              BEQ      |L1.1346|
00053e  4620              MOV      r0,r4                 ;2820
000540  e79b              B        |L1.1146|
                  |L1.1346|
000542  2000              MOVS     r0,#0                 ;2824
000544  49cd              LDR      r1,|L1.2172|
000546  6008              STR      r0,[r1,#0]            ;2824  ; SDIO_CmdInitStructure
000548  2006              MOVS     r0,#6                 ;2825
00054a  6048              STR      r0,[r1,#4]            ;2825  ; SDIO_CmdInitStructure
00054c  2040              MOVS     r0,#0x40              ;2826
00054e  6088              STR      r0,[r1,#8]            ;2826  ; SDIO_CmdInitStructure
000550  2000              MOVS     r0,#0                 ;2827
000552  60c8              STR      r0,[r1,#0xc]          ;2827  ; SDIO_CmdInitStructure
000554  f44f6080          MOV      r0,#0x400             ;2828
000558  6108              STR      r0,[r1,#0x10]         ;2828  ; SDIO_CmdInitStructure
00055a  4608              MOV      r0,r1                 ;2829
00055c  f7fffffe          BL       SDIO_SendCommand
000560  2006              MOVS     r0,#6                 ;2831
000562  f7fffffe          BL       CmdResp1Error
000566  4604              MOV      r4,r0                 ;2831
000568  2c2a              CMP      r4,#0x2a              ;2833
00056a  d002              BEQ      |L1.1394|
00056c  4620              MOV      r0,r4                 ;2835
00056e  e784              B        |L1.1146|
                  |L1.1392|
000570  e001              B        |L1.1398|
                  |L1.1394|
000572  4620              MOV      r0,r4                 ;2838
000574  e781              B        |L1.1146|
                  |L1.1398|
000576  2425              MOVS     r4,#0x25              ;2842
000578  4620              MOV      r0,r4                 ;2843
00057a  e77e              B        |L1.1146|
;;;2847   
                          ENDP

                  SD_EnableWideBusOperation PROC
;;;983      */
;;;984    SD_Error SD_EnableWideBusOperation(uint32_t WideMode)
00057c  b570              PUSH     {r4-r6,lr}
;;;985    {
00057e  4604              MOV      r4,r0
;;;986      SD_Error errorstatus = SD_OK;
000580  252a              MOVS     r5,#0x2a
;;;987    
;;;988      /*!< MMC Card doesn't support this feature */
;;;989      if (SDIO_MULTIMEDIA_CARD == CardType)
000582  48bf              LDR      r0,|L1.2176|
000584  6800              LDR      r0,[r0,#0]  ; CardType
000586  2803              CMP      r0,#3
000588  d102              BNE      |L1.1424|
;;;990      {
;;;991        errorstatus = SD_UNSUPPORTED_FEATURE;
00058a  2527              MOVS     r5,#0x27
;;;992        return(errorstatus);
00058c  4628              MOV      r0,r5
                  |L1.1422|
;;;993      }
;;;994      else if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
;;;995      {
;;;996        if (SDIO_BusWide_8b == WideMode)
;;;997        {
;;;998          errorstatus = SD_UNSUPPORTED_FEATURE;
;;;999          return(errorstatus);
;;;1000       }
;;;1001       else if (SDIO_BusWide_4b == WideMode)
;;;1002       {
;;;1003         errorstatus = SDEnWideBus(ENABLE);
;;;1004   
;;;1005         if (SD_OK == errorstatus)
;;;1006         {
;;;1007           /*!< Configure the SDIO peripheral */
;;;1008           SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
;;;1009           SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
;;;1010           SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
;;;1011           SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
;;;1012           SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_4b;
;;;1013           SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
;;;1014           SDIO_Init(&SDIO_InitStructure);
;;;1015         }
;;;1016       }
;;;1017       else
;;;1018       {
;;;1019         errorstatus = SDEnWideBus(DISABLE);
;;;1020   
;;;1021         if (SD_OK == errorstatus)
;;;1022         {
;;;1023           /*!< Configure the SDIO peripheral */
;;;1024           SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
;;;1025           SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
;;;1026           SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
;;;1027           SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
;;;1028           SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
;;;1029           SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
;;;1030           SDIO_Init(&SDIO_InitStructure);
;;;1031         }
;;;1032       }
;;;1033     }
;;;1034   
;;;1035     return(errorstatus);
;;;1036   }
00058e  bd70              POP      {r4-r6,pc}
                  |L1.1424|
000590  48bb              LDR      r0,|L1.2176|
000592  6800              LDR      r0,[r0,#0]            ;994  ; CardType
000594  b138              CBZ      r0,|L1.1446|
000596  48ba              LDR      r0,|L1.2176|
000598  6800              LDR      r0,[r0,#0]            ;994  ; CardType
00059a  2801              CMP      r0,#1                 ;994
00059c  d003              BEQ      |L1.1446|
00059e  48b8              LDR      r0,|L1.2176|
0005a0  6800              LDR      r0,[r0,#0]            ;994  ; CardType
0005a2  2802              CMP      r0,#2                 ;994
0005a4  d130              BNE      |L1.1544|
                  |L1.1446|
0005a6  f5b45f80          CMP      r4,#0x1000            ;996
0005aa  d102              BNE      |L1.1458|
0005ac  2527              MOVS     r5,#0x27              ;998
0005ae  4628              MOV      r0,r5                 ;999
0005b0  e7ed              B        |L1.1422|
                  |L1.1458|
0005b2  f5b46f00          CMP      r4,#0x800             ;1001
0005b6  d115              BNE      |L1.1508|
0005b8  2001              MOVS     r0,#1                 ;1003
0005ba  f7fffffe          BL       SDEnWideBus
0005be  4605              MOV      r5,r0                 ;1003
0005c0  2d2a              CMP      r5,#0x2a              ;1005
0005c2  d121              BNE      |L1.1544|
0005c4  2001              MOVS     r0,#1                 ;1008
0005c6  49af              LDR      r1,|L1.2180|
0005c8  7508              STRB     r0,[r1,#0x14]         ;1008
0005ca  2000              MOVS     r0,#0                 ;1009
0005cc  6008              STR      r0,[r1,#0]            ;1009  ; SDIO_InitStructure
0005ce  6048              STR      r0,[r1,#4]            ;1010  ; SDIO_InitStructure
0005d0  6088              STR      r0,[r1,#8]            ;1011  ; SDIO_InitStructure
0005d2  f44f6000          MOV      r0,#0x800             ;1012
0005d6  60c8              STR      r0,[r1,#0xc]          ;1012  ; SDIO_InitStructure
0005d8  2000              MOVS     r0,#0                 ;1013
0005da  6108              STR      r0,[r1,#0x10]         ;1013  ; SDIO_InitStructure
0005dc  4608              MOV      r0,r1                 ;1014
0005de  f7fffffe          BL       SDIO_Init
0005e2  e011              B        |L1.1544|
                  |L1.1508|
0005e4  2000              MOVS     r0,#0                 ;1019
0005e6  f7fffffe          BL       SDEnWideBus
0005ea  4605              MOV      r5,r0                 ;1019
0005ec  2d2a              CMP      r5,#0x2a              ;1021
0005ee  d10b              BNE      |L1.1544|
0005f0  2001              MOVS     r0,#1                 ;1024
0005f2  49a4              LDR      r1,|L1.2180|
0005f4  7508              STRB     r0,[r1,#0x14]         ;1024
0005f6  2000              MOVS     r0,#0                 ;1025
0005f8  6008              STR      r0,[r1,#0]            ;1025  ; SDIO_InitStructure
0005fa  6048              STR      r0,[r1,#4]            ;1026  ; SDIO_InitStructure
0005fc  6088              STR      r0,[r1,#8]            ;1027  ; SDIO_InitStructure
0005fe  60c8              STR      r0,[r1,#0xc]          ;1028  ; SDIO_InitStructure
000600  6108              STR      r0,[r1,#0x10]         ;1029  ; SDIO_InitStructure
000602  4608              MOV      r0,r1                 ;1030
000604  f7fffffe          BL       SDIO_Init
                  |L1.1544|
000608  4628              MOV      r0,r5                 ;1035
00060a  e7c0              B        |L1.1422|
;;;1037   
                          ENDP

                  SD_SelectDeselect PROC
;;;1067     */
;;;1068   SD_Error SD_SelectDeselect(uint32_t addr)
00060c  b570              PUSH     {r4-r6,lr}
;;;1069   {
00060e  4604              MOV      r4,r0
;;;1070     SD_Error errorstatus = SD_OK;
000610  252a              MOVS     r5,#0x2a
;;;1071   
;;;1072     /*!< Send CMD7 SDIO_SEL_DESEL_CARD */
;;;1073     SDIO_CmdInitStructure.SDIO_Argument =  addr;
000612  489a              LDR      r0,|L1.2172|
000614  6004              STR      r4,[r0,#0]  ; SDIO_CmdInitStructure
;;;1074     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEL_DESEL_CARD;
000616  2007              MOVS     r0,#7
000618  4998              LDR      r1,|L1.2172|
00061a  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;1075     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
00061c  2040              MOVS     r0,#0x40
00061e  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;1076     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
000620  2000              MOVS     r0,#0
000622  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;1077     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000624  f44f6080          MOV      r0,#0x400
000628  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;1078     SDIO_SendCommand(&SDIO_CmdInitStructure);
00062a  4608              MOV      r0,r1
00062c  f7fffffe          BL       SDIO_SendCommand
;;;1079   
;;;1080     errorstatus = CmdResp1Error(SD_CMD_SEL_DESEL_CARD);
000630  2007              MOVS     r0,#7
000632  f7fffffe          BL       CmdResp1Error
000636  4605              MOV      r5,r0
;;;1081   
;;;1082     return(errorstatus);
000638  4628              MOV      r0,r5
;;;1083   }
00063a  bd70              POP      {r4-r6,pc}
;;;1084   
                          ENDP

                  SD_GetCardInfo PROC
;;;771      */
;;;772    SD_Error SD_GetCardInfo(SD_CardInfo *cardinfo)
00063c  b530              PUSH     {r4,r5,lr}
;;;773    {
00063e  4601              MOV      r1,r0
;;;774      SD_Error errorstatus = SD_OK;
000640  202a              MOVS     r0,#0x2a
;;;775      uint8_t tmp = 0;
000642  2200              MOVS     r2,#0
;;;776    
;;;777      cardinfo->CardType = (uint8_t)CardType;
000644  4b8e              LDR      r3,|L1.2176|
000646  781b              LDRB     r3,[r3,#0]  ; CardType
000648  f881304e          STRB     r3,[r1,#0x4e]
;;;778      cardinfo->RCA = (uint16_t)RCA;
00064c  4b8a              LDR      r3,|L1.2168|
00064e  881b              LDRH     r3,[r3,#0]  ; RCA
000650  f8a1304c          STRH     r3,[r1,#0x4c]
;;;779    
;;;780      /*!< Byte 0 */
;;;781      tmp = (uint8_t)((CSD_Tab[0] & 0xFF000000) >> 24);
000654  4b8c              LDR      r3,|L1.2184|
000656  681b              LDR      r3,[r3,#0]  ; CSD_Tab
000658  0e1a              LSRS     r2,r3,#24
;;;782      cardinfo->SD_csd.CSDStruct = (tmp & 0xC0) >> 6;
00065a  0993              LSRS     r3,r2,#6
00065c  700b              STRB     r3,[r1,#0]
;;;783      cardinfo->SD_csd.SysSpecVersion = (tmp & 0x3C) >> 2;
00065e  f3c20383          UBFX     r3,r2,#2,#4
000662  704b              STRB     r3,[r1,#1]
;;;784      cardinfo->SD_csd.Reserved1 = tmp & 0x03;
000664  f0020303          AND      r3,r2,#3
000668  708b              STRB     r3,[r1,#2]
;;;785    
;;;786      /*!< Byte 1 */
;;;787      tmp = (uint8_t)((CSD_Tab[0] & 0x00FF0000) >> 16);
00066a  4b87              LDR      r3,|L1.2184|
00066c  681b              LDR      r3,[r3,#0]  ; CSD_Tab
00066e  f3c34207          UBFX     r2,r3,#16,#8
;;;788      cardinfo->SD_csd.TAAC = tmp;
000672  70ca              STRB     r2,[r1,#3]
;;;789    
;;;790      /*!< Byte 2 */
;;;791      tmp = (uint8_t)((CSD_Tab[0] & 0x0000FF00) >> 8);
000674  4b84              LDR      r3,|L1.2184|
000676  881b              LDRH     r3,[r3,#0]  ; CSD_Tab
000678  f3c32207          UBFX     r2,r3,#8,#8
;;;792      cardinfo->SD_csd.NSAC = tmp;
00067c  710a              STRB     r2,[r1,#4]
;;;793    
;;;794      /*!< Byte 3 */
;;;795      tmp = (uint8_t)(CSD_Tab[0] & 0x000000FF);
00067e  4b82              LDR      r3,|L1.2184|
000680  781a              LDRB     r2,[r3,#0]  ; CSD_Tab
;;;796      cardinfo->SD_csd.MaxBusClkFrec = tmp;
000682  714a              STRB     r2,[r1,#5]
;;;797    
;;;798      /*!< Byte 4 */
;;;799      tmp = (uint8_t)((CSD_Tab[1] & 0xFF000000) >> 24);
000684  685b              LDR      r3,[r3,#4]  ; CSD_Tab
000686  0e1a              LSRS     r2,r3,#24
;;;800      cardinfo->SD_csd.CardComdClasses = tmp << 4;
000688  0113              LSLS     r3,r2,#4
00068a  80cb              STRH     r3,[r1,#6]
;;;801    
;;;802      /*!< Byte 5 */
;;;803      tmp = (uint8_t)((CSD_Tab[1] & 0x00FF0000) >> 16);
00068c  4b7e              LDR      r3,|L1.2184|
00068e  685b              LDR      r3,[r3,#4]  ; CSD_Tab
000690  f3c34207          UBFX     r2,r3,#16,#8
;;;804      cardinfo->SD_csd.CardComdClasses |= (tmp & 0xF0) >> 4;
000694  88cb              LDRH     r3,[r1,#6]
000696  ea431312          ORR      r3,r3,r2,LSR #4
00069a  80cb              STRH     r3,[r1,#6]
;;;805      cardinfo->SD_csd.RdBlockLen = tmp & 0x0F;
00069c  f002030f          AND      r3,r2,#0xf
0006a0  720b              STRB     r3,[r1,#8]
;;;806    
;;;807      /*!< Byte 6 */
;;;808      tmp = (uint8_t)((CSD_Tab[1] & 0x0000FF00) >> 8);
0006a2  4b79              LDR      r3,|L1.2184|
0006a4  889b              LDRH     r3,[r3,#4]  ; CSD_Tab
0006a6  f3c32207          UBFX     r2,r3,#8,#8
;;;809      cardinfo->SD_csd.PartBlockRead = (tmp & 0x80) >> 7;
0006aa  09d3              LSRS     r3,r2,#7
0006ac  724b              STRB     r3,[r1,#9]
;;;810      cardinfo->SD_csd.WrBlockMisalign = (tmp & 0x40) >> 6;
0006ae  f3c21380          UBFX     r3,r2,#6,#1
0006b2  728b              STRB     r3,[r1,#0xa]
;;;811      cardinfo->SD_csd.RdBlockMisalign = (tmp & 0x20) >> 5;
0006b4  f3c21340          UBFX     r3,r2,#5,#1
0006b8  72cb              STRB     r3,[r1,#0xb]
;;;812      cardinfo->SD_csd.DSRImpl = (tmp & 0x10) >> 4;
0006ba  f3c21300          UBFX     r3,r2,#4,#1
0006be  730b              STRB     r3,[r1,#0xc]
;;;813      cardinfo->SD_csd.Reserved2 = 0; /*!< Reserved */
0006c0  2300              MOVS     r3,#0
0006c2  734b              STRB     r3,[r1,#0xd]
;;;814    
;;;815      if ((CardType == SDIO_STD_CAPACITY_SD_CARD_V1_1) || (CardType == SDIO_STD_CAPACITY_SD_CARD_V2_0))
0006c4  4b6e              LDR      r3,|L1.2176|
0006c6  681b              LDR      r3,[r3,#0]  ; CardType
0006c8  b11b              CBZ      r3,|L1.1746|
0006ca  4b6d              LDR      r3,|L1.2176|
0006cc  681b              LDR      r3,[r3,#0]  ; CardType
0006ce  2b01              CMP      r3,#1
0006d0  d13c              BNE      |L1.1868|
                  |L1.1746|
;;;816      {
;;;817        cardinfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
0006d2  0793              LSLS     r3,r2,#30
0006d4  0d1b              LSRS     r3,r3,#20
0006d6  610b              STR      r3,[r1,#0x10]
;;;818    
;;;819        /*!< Byte 7 */
;;;820        tmp = (uint8_t)(CSD_Tab[1] & 0x000000FF);
0006d8  4b6b              LDR      r3,|L1.2184|
0006da  791a              LDRB     r2,[r3,#4]  ; CSD_Tab
;;;821        cardinfo->SD_csd.DeviceSize |= (tmp) << 2;
0006dc  690b              LDR      r3,[r1,#0x10]
0006de  ea430382          ORR      r3,r3,r2,LSL #2
0006e2  610b              STR      r3,[r1,#0x10]
;;;822    
;;;823        /*!< Byte 8 */
;;;824        tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
0006e4  4b68              LDR      r3,|L1.2184|
0006e6  689b              LDR      r3,[r3,#8]  ; CSD_Tab
0006e8  0e1a              LSRS     r2,r3,#24
;;;825        cardinfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
0006ea  690b              LDR      r3,[r1,#0x10]
0006ec  ea431392          ORR      r3,r3,r2,LSR #6
0006f0  610b              STR      r3,[r1,#0x10]
;;;826    
;;;827        cardinfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
0006f2  f3c203c2          UBFX     r3,r2,#3,#3
0006f6  750b              STRB     r3,[r1,#0x14]
;;;828        cardinfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
0006f8  f0020307          AND      r3,r2,#7
0006fc  754b              STRB     r3,[r1,#0x15]
;;;829    
;;;830        /*!< Byte 9 */
;;;831        tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);
0006fe  4b62              LDR      r3,|L1.2184|
000700  689b              LDR      r3,[r3,#8]  ; CSD_Tab
000702  f3c34207          UBFX     r2,r3,#16,#8
;;;832        cardinfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
000706  0953              LSRS     r3,r2,#5
000708  758b              STRB     r3,[r1,#0x16]
;;;833        cardinfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
00070a  f3c20382          UBFX     r3,r2,#2,#3
00070e  75cb              STRB     r3,[r1,#0x17]
;;;834        cardinfo->SD_csd.DeviceSizeMul = (tmp & 0x03) << 1;
000710  0793              LSLS     r3,r2,#30
000712  0f5b              LSRS     r3,r3,#29
000714  760b              STRB     r3,[r1,#0x18]
;;;835        /*!< Byte 10 */
;;;836        tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
000716  4b5c              LDR      r3,|L1.2184|
000718  891b              LDRH     r3,[r3,#8]  ; CSD_Tab
00071a  f3c32207          UBFX     r2,r3,#8,#8
;;;837        cardinfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
00071e  7e0b              LDRB     r3,[r1,#0x18]
000720  ea4313d2          ORR      r3,r3,r2,LSR #7
000724  760b              STRB     r3,[r1,#0x18]
;;;838        
;;;839        cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) ;
000726  690b              LDR      r3,[r1,#0x10]
000728  1c5b              ADDS     r3,r3,#1
00072a  644b              STR      r3,[r1,#0x44]
;;;840        cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
00072c  7e0c              LDRB     r4,[r1,#0x18]
00072e  6c4b              LDR      r3,[r1,#0x44]
000730  1ca4              ADDS     r4,r4,#2
000732  2501              MOVS     r5,#1
000734  40a5              LSLS     r5,r5,r4
000736  436b              MULS     r3,r5,r3
000738  644b              STR      r3,[r1,#0x44]
;;;841        cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
00073a  7a0c              LDRB     r4,[r1,#8]
00073c  2301              MOVS     r3,#1
00073e  40a3              LSLS     r3,r3,r4
000740  648b              STR      r3,[r1,#0x48]
;;;842        cardinfo->CardCapacity *= cardinfo->CardBlockSize;
000742  e9d13411          LDRD     r3,r4,[r1,#0x44]
000746  4363              MULS     r3,r4,r3
000748  644b              STR      r3,[r1,#0x44]
00074a  e021              B        |L1.1936|
                  |L1.1868|
;;;843      }
;;;844      else if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
00074c  4b4c              LDR      r3,|L1.2176|
00074e  681b              LDR      r3,[r3,#0]  ; CardType
000750  2b02              CMP      r3,#2
000752  d11d              BNE      |L1.1936|
;;;845      {
;;;846        /*!< Byte 7 */
;;;847        tmp = (uint8_t)(CSD_Tab[1] & 0x000000FF);
000754  4b4c              LDR      r3,|L1.2184|
000756  791a              LDRB     r2,[r3,#4]  ; CSD_Tab
;;;848        cardinfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
000758  0693              LSLS     r3,r2,#26
00075a  0a9b              LSRS     r3,r3,#10
00075c  610b              STR      r3,[r1,#0x10]
;;;849    
;;;850        /*!< Byte 8 */
;;;851        tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
00075e  4b4a              LDR      r3,|L1.2184|
000760  689b              LDR      r3,[r3,#8]  ; CSD_Tab
000762  0e1a              LSRS     r2,r3,#24
;;;852    
;;;853        cardinfo->SD_csd.DeviceSize |= (tmp << 8);
000764  690b              LDR      r3,[r1,#0x10]
000766  ea432302          ORR      r3,r3,r2,LSL #8
00076a  610b              STR      r3,[r1,#0x10]
;;;854    
;;;855        /*!< Byte 9 */
;;;856        tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);
00076c  4b46              LDR      r3,|L1.2184|
00076e  689b              LDR      r3,[r3,#8]  ; CSD_Tab
000770  f3c34207          UBFX     r2,r3,#16,#8
;;;857    
;;;858        cardinfo->SD_csd.DeviceSize |= (tmp);
000774  690b              LDR      r3,[r1,#0x10]
000776  4313              ORRS     r3,r3,r2
000778  610b              STR      r3,[r1,#0x10]
;;;859    
;;;860        /*!< Byte 10 */
;;;861        tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
00077a  4b43              LDR      r3,|L1.2184|
00077c  891b              LDRH     r3,[r3,#8]  ; CSD_Tab
00077e  f3c32207          UBFX     r2,r3,#8,#8
;;;862        
;;;863        cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) * 512 * 1024;
000782  690b              LDR      r3,[r1,#0x10]
000784  1c5b              ADDS     r3,r3,#1
000786  04db              LSLS     r3,r3,#19
000788  644b              STR      r3,[r1,#0x44]
;;;864        cardinfo->CardBlockSize = 512;    
00078a  f44f7300          MOV      r3,#0x200
00078e  648b              STR      r3,[r1,#0x48]
                  |L1.1936|
;;;865      }
;;;866    
;;;867    
;;;868      cardinfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
000790  f3c21380          UBFX     r3,r2,#6,#1
000794  f8013f19          STRB     r3,[r1,#0x19]!
;;;869      cardinfo->SD_csd.EraseGrMul = (tmp & 0x3F) << 1;
000798  0693              LSLS     r3,r2,#26
00079a  0e5b              LSRS     r3,r3,#25
00079c  704b              STRB     r3,[r1,#1]
;;;870    
;;;871      /*!< Byte 11 */
;;;872      tmp = (uint8_t)(CSD_Tab[2] & 0x000000FF);
00079e  4b3a              LDR      r3,|L1.2184|
0007a0  7a1a              LDRB     r2,[r3,#8]  ; CSD_Tab
;;;873      cardinfo->SD_csd.EraseGrMul |= (tmp & 0x80) >> 7;
0007a2  784b              LDRB     r3,[r1,#1]
0007a4  ea4313d2          ORR      r3,r3,r2,LSR #7
0007a8  704b              STRB     r3,[r1,#1]
;;;874      cardinfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
0007aa  f002037f          AND      r3,r2,#0x7f
0007ae  708b              STRB     r3,[r1,#2]
;;;875    
;;;876      /*!< Byte 12 */
;;;877      tmp = (uint8_t)((CSD_Tab[3] & 0xFF000000) >> 24);
0007b0  4b35              LDR      r3,|L1.2184|
0007b2  68db              LDR      r3,[r3,#0xc]  ; CSD_Tab
0007b4  0e1a              LSRS     r2,r3,#24
;;;878      cardinfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
0007b6  09d3              LSRS     r3,r2,#7
0007b8  70cb              STRB     r3,[r1,#3]
;;;879      cardinfo->SD_csd.ManDeflECC = (tmp & 0x60) >> 5;
0007ba  f3c21341          UBFX     r3,r2,#5,#2
0007be  710b              STRB     r3,[r1,#4]
;;;880      cardinfo->SD_csd.WrSpeedFact = (tmp & 0x1C) >> 2;
0007c0  f3c20382          UBFX     r3,r2,#2,#3
0007c4  714b              STRB     r3,[r1,#5]
;;;881      cardinfo->SD_csd.MaxWrBlockLen = (tmp & 0x03) << 2;
0007c6  0793              LSLS     r3,r2,#30
0007c8  0f1b              LSRS     r3,r3,#28
0007ca  718b              STRB     r3,[r1,#6]
;;;882    
;;;883      /*!< Byte 13 */
;;;884      tmp = (uint8_t)((CSD_Tab[3] & 0x00FF0000) >> 16);
0007cc  4b2e              LDR      r3,|L1.2184|
0007ce  68db              LDR      r3,[r3,#0xc]  ; CSD_Tab
0007d0  f3c34207          UBFX     r2,r3,#16,#8
;;;885      cardinfo->SD_csd.MaxWrBlockLen |= (tmp & 0xC0) >> 6;
0007d4  798b              LDRB     r3,[r1,#6]
0007d6  ea431392          ORR      r3,r3,r2,LSR #6
0007da  718b              STRB     r3,[r1,#6]
;;;886      cardinfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
0007dc  f3c21340          UBFX     r3,r2,#5,#1
0007e0  71cb              STRB     r3,[r1,#7]
;;;887      cardinfo->SD_csd.Reserved3 = 0;
0007e2  2300              MOVS     r3,#0
0007e4  720b              STRB     r3,[r1,#8]
;;;888      cardinfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
0007e6  f0020301          AND      r3,r2,#1
0007ea  724b              STRB     r3,[r1,#9]
;;;889    
;;;890      /*!< Byte 14 */
;;;891      tmp = (uint8_t)((CSD_Tab[3] & 0x0000FF00) >> 8);
0007ec  4b26              LDR      r3,|L1.2184|
0007ee  899b              LDRH     r3,[r3,#0xc]  ; CSD_Tab
0007f0  f3c32207          UBFX     r2,r3,#8,#8
;;;892      cardinfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
0007f4  09d3              LSRS     r3,r2,#7
0007f6  728b              STRB     r3,[r1,#0xa]
;;;893      cardinfo->SD_csd.CopyFlag = (tmp & 0x40) >> 6;
0007f8  f3c21380          UBFX     r3,r2,#6,#1
0007fc  72cb              STRB     r3,[r1,#0xb]
;;;894      cardinfo->SD_csd.PermWrProtect = (tmp & 0x20) >> 5;
0007fe  f3c21340          UBFX     r3,r2,#5,#1
000802  730b              STRB     r3,[r1,#0xc]
;;;895      cardinfo->SD_csd.TempWrProtect = (tmp & 0x10) >> 4;
000804  f3c21300          UBFX     r3,r2,#4,#1
000808  734b              STRB     r3,[r1,#0xd]
;;;896      cardinfo->SD_csd.FileFormat = (tmp & 0x0C) >> 2;
00080a  f3c20381          UBFX     r3,r2,#2,#2
00080e  738b              STRB     r3,[r1,#0xe]
;;;897      cardinfo->SD_csd.ECC = (tmp & 0x03);
000810  f0020303          AND      r3,r2,#3
000814  73cb              STRB     r3,[r1,#0xf]
;;;898    
;;;899      /*!< Byte 15 */
;;;900      tmp = (uint8_t)(CSD_Tab[3] & 0x000000FF);
000816  4b1c              LDR      r3,|L1.2184|
000818  7b1a              LDRB     r2,[r3,#0xc]  ; CSD_Tab
;;;901      cardinfo->SD_csd.CSD_CRC = (tmp & 0xFE) >> 1;
00081a  0853              LSRS     r3,r2,#1
00081c  740b              STRB     r3,[r1,#0x10]
;;;902      cardinfo->SD_csd.Reserved4 = 1;
00081e  2301              MOVS     r3,#1
000820  744b              STRB     r3,[r1,#0x11]
;;;903    
;;;904    
;;;905      /*!< Byte 0 */
;;;906      tmp = (uint8_t)((CID_Tab[0] & 0xFF000000) >> 24);
000822  4b1a              LDR      r3,|L1.2188|
000824  681b              LDR      r3,[r3,#0]  ; CID_Tab
000826  0e1a              LSRS     r2,r3,#24
;;;907      cardinfo->SD_cid.ManufacturerID = tmp;
000828  74ca              STRB     r2,[r1,#0x13]
00082a  3919              SUBS     r1,r1,#0x19
;;;908    
;;;909      /*!< Byte 1 */
;;;910      tmp = (uint8_t)((CID_Tab[0] & 0x00FF0000) >> 16);
00082c  4b17              LDR      r3,|L1.2188|
00082e  681b              LDR      r3,[r3,#0]  ; CID_Tab
000830  f3c34207          UBFX     r2,r3,#16,#8
;;;911      cardinfo->SD_cid.OEM_AppliID = tmp << 8;
000834  0214              LSLS     r4,r2,#8
000836  85cc              STRH     r4,[r1,#0x2e]
;;;912    
;;;913      /*!< Byte 2 */
;;;914      tmp = (uint8_t)((CID_Tab[0] & 0x000000FF00) >> 8);
000838  4b14              LDR      r3,|L1.2188|
00083a  881b              LDRH     r3,[r3,#0]  ; CID_Tab
00083c  f3c32207          UBFX     r2,r3,#8,#8
;;;915      cardinfo->SD_cid.OEM_AppliID |= tmp;
000840  8dcb              LDRH     r3,[r1,#0x2e]
000842  4313              ORRS     r3,r3,r2
000844  85cb              STRH     r3,[r1,#0x2e]
;;;916    
;;;917      /*!< Byte 3 */
;;;918      tmp = (uint8_t)(CID_Tab[0] & 0x000000FF);
000846  4b11              LDR      r3,|L1.2188|
000848  781a              LDRB     r2,[r3,#0]  ; CID_Tab
;;;919      cardinfo->SD_cid.ProdName1 = tmp << 24;
00084a  0614              LSLS     r4,r2,#24
00084c  630c              STR      r4,[r1,#0x30]
;;;920    
;;;921      /*!< Byte 4 */
;;;922      tmp = (uint8_t)((CID_Tab[1] & 0xFF000000) >> 24);
00084e  685b              LDR      r3,[r3,#4]  ; CID_Tab
000850  0e1a              LSRS     r2,r3,#24
;;;923      cardinfo->SD_cid.ProdName1 |= tmp << 16;
000852  6b0b              LDR      r3,[r1,#0x30]
000854  ea434402          ORR      r4,r3,r2,LSL #16
000858  630c              STR      r4,[r1,#0x30]
;;;924    
;;;925      /*!< Byte 5 */
;;;926      tmp = (uint8_t)((CID_Tab[1] & 0x00FF0000) >> 16);
00085a  4b0c              LDR      r3,|L1.2188|
00085c  685b              LDR      r3,[r3,#4]  ; CID_Tab
00085e  f3c34207          UBFX     r2,r3,#16,#8
;;;927      cardinfo->SD_cid.ProdName1 |= tmp << 8;
000862  6b0b              LDR      r3,[r1,#0x30]
000864  ea432402          ORR      r4,r3,r2,LSL #8
000868  630c              STR      r4,[r1,#0x30]
;;;928    
;;;929      /*!< Byte 6 */
;;;930      tmp = (uint8_t)((CID_Tab[1] & 0x0000FF00) >> 8);
00086a  4b08              LDR      r3,|L1.2188|
00086c  889b              LDRH     r3,[r3,#4]  ; CID_Tab
00086e  f3c32207          UBFX     r2,r3,#8,#8
;;;931      cardinfo->SD_cid.ProdName1 |= tmp;
000872  6b0b              LDR      r3,[r1,#0x30]
000874  4313              ORRS     r3,r3,r2
000876  e00b              B        |L1.2192|
                  |L1.2168|
                          DCD      ||RCA||
                  |L1.2172|
                          DCD      SDIO_CmdInitStructure
                  |L1.2176|
                          DCD      CardType
                  |L1.2180|
                          DCD      SDIO_InitStructure
                  |L1.2184|
                          DCD      CSD_Tab
                  |L1.2188|
                          DCD      CID_Tab
                  |L1.2192|
000890  630b              STR      r3,[r1,#0x30]
;;;932    
;;;933      /*!< Byte 7 */
;;;934      tmp = (uint8_t)(CID_Tab[1] & 0x000000FF);
000892  4bfe              LDR      r3,|L1.3212|
000894  791a              LDRB     r2,[r3,#4]  ; CID_Tab
;;;935      cardinfo->SD_cid.ProdName2 = tmp;
000896  2334              MOVS     r3,#0x34
000898  545a              STRB     r2,[r3,r1]
;;;936    
;;;937      /*!< Byte 8 */
;;;938      tmp = (uint8_t)((CID_Tab[2] & 0xFF000000) >> 24);
00089a  4bfc              LDR      r3,|L1.3212|
00089c  689b              LDR      r3,[r3,#8]  ; CID_Tab
00089e  0e1a              LSRS     r2,r3,#24
;;;939      cardinfo->SD_cid.ProdRev = tmp;
0008a0  2335              MOVS     r3,#0x35
0008a2  545a              STRB     r2,[r3,r1]
;;;940    
;;;941      /*!< Byte 9 */
;;;942      tmp = (uint8_t)((CID_Tab[2] & 0x00FF0000) >> 16);
0008a4  4bf9              LDR      r3,|L1.3212|
0008a6  689b              LDR      r3,[r3,#8]  ; CID_Tab
0008a8  f3c34207          UBFX     r2,r3,#16,#8
;;;943      cardinfo->SD_cid.ProdSN = tmp << 24;
0008ac  0614              LSLS     r4,r2,#24
0008ae  638c              STR      r4,[r1,#0x38]
;;;944    
;;;945      /*!< Byte 10 */
;;;946      tmp = (uint8_t)((CID_Tab[2] & 0x0000FF00) >> 8);
0008b0  4bf6              LDR      r3,|L1.3212|
0008b2  891b              LDRH     r3,[r3,#8]  ; CID_Tab
0008b4  f3c32207          UBFX     r2,r3,#8,#8
;;;947      cardinfo->SD_cid.ProdSN |= tmp << 16;
0008b8  6b8b              LDR      r3,[r1,#0x38]
0008ba  ea434402          ORR      r4,r3,r2,LSL #16
0008be  638c              STR      r4,[r1,#0x38]
;;;948    
;;;949      /*!< Byte 11 */
;;;950      tmp = (uint8_t)(CID_Tab[2] & 0x000000FF);
0008c0  4bf2              LDR      r3,|L1.3212|
0008c2  7a1a              LDRB     r2,[r3,#8]  ; CID_Tab
;;;951      cardinfo->SD_cid.ProdSN |= tmp << 8;
0008c4  6b8b              LDR      r3,[r1,#0x38]
0008c6  ea432402          ORR      r4,r3,r2,LSL #8
0008ca  638c              STR      r4,[r1,#0x38]
;;;952    
;;;953      /*!< Byte 12 */
;;;954      tmp = (uint8_t)((CID_Tab[3] & 0xFF000000) >> 24);
0008cc  4bef              LDR      r3,|L1.3212|
0008ce  68db              LDR      r3,[r3,#0xc]  ; CID_Tab
0008d0  0e1a              LSRS     r2,r3,#24
;;;955      cardinfo->SD_cid.ProdSN |= tmp;
0008d2  6b8b              LDR      r3,[r1,#0x38]
0008d4  4313              ORRS     r3,r3,r2
0008d6  638b              STR      r3,[r1,#0x38]
;;;956    
;;;957      /*!< Byte 13 */
;;;958      tmp = (uint8_t)((CID_Tab[3] & 0x00FF0000) >> 16);
0008d8  4bec              LDR      r3,|L1.3212|
0008da  68db              LDR      r3,[r3,#0xc]  ; CID_Tab
0008dc  f3c34207          UBFX     r2,r3,#16,#8
;;;959      cardinfo->SD_cid.Reserved1 |= (tmp & 0xF0) >> 4;
0008e0  233c              MOVS     r3,#0x3c
0008e2  5c5b              LDRB     r3,[r3,r1]
0008e4  ea431412          ORR      r4,r3,r2,LSR #4
0008e8  233c              MOVS     r3,#0x3c
0008ea  545c              STRB     r4,[r3,r1]
;;;960      cardinfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
0008ec  0713              LSLS     r3,r2,#28
0008ee  0d1c              LSRS     r4,r3,#20
0008f0  87cc              STRH     r4,[r1,#0x3e]
;;;961    
;;;962      /*!< Byte 14 */
;;;963      tmp = (uint8_t)((CID_Tab[3] & 0x0000FF00) >> 8);
0008f2  4be6              LDR      r3,|L1.3212|
0008f4  899b              LDRH     r3,[r3,#0xc]  ; CID_Tab
0008f6  f3c32207          UBFX     r2,r3,#8,#8
;;;964      cardinfo->SD_cid.ManufactDate |= tmp;
0008fa  8fcb              LDRH     r3,[r1,#0x3e]
0008fc  4313              ORRS     r3,r3,r2
0008fe  87cb              STRH     r3,[r1,#0x3e]
;;;965    
;;;966      /*!< Byte 15 */
;;;967      tmp = (uint8_t)(CID_Tab[3] & 0x000000FF);
000900  4be2              LDR      r3,|L1.3212|
000902  7b1a              LDRB     r2,[r3,#0xc]  ; CID_Tab
;;;968      cardinfo->SD_cid.CID_CRC = (tmp & 0xFE) >> 1;
000904  0854              LSRS     r4,r2,#1
000906  2340              MOVS     r3,#0x40
000908  545c              STRB     r4,[r3,r1]
;;;969      cardinfo->SD_cid.Reserved2 = 1;
00090a  2401              MOVS     r4,#1
00090c  2341              MOVS     r3,#0x41
00090e  545c              STRB     r4,[r3,r1]
;;;970      
;;;971      return(errorstatus);
;;;972    }
000910  bd30              POP      {r4,r5,pc}
;;;973    
                          ENDP

                  CmdResp2Error PROC
;;;2631     */
;;;2632   static SD_Error CmdResp2Error(void)
000912  b570              PUSH     {r4-r6,lr}
;;;2633   {
;;;2634     SD_Error errorstatus = SD_OK;
000914  252a              MOVS     r5,#0x2a
;;;2635     uint32_t status;
;;;2636   
;;;2637     status = SDIO->STA;
000916  48de              LDR      r0,|L1.3216|
000918  6b44              LDR      r4,[r0,#0x34]
;;;2638   
;;;2639     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
00091a  e001              B        |L1.2336|
                  |L1.2332|
;;;2640     {
;;;2641       status = SDIO->STA;
00091c  48dc              LDR      r0,|L1.3216|
00091e  6b44              LDR      r4,[r0,#0x34]
                  |L1.2336|
000920  f0040045          AND      r0,r4,#0x45           ;2639
000924  2800              CMP      r0,#0                 ;2639
000926  d0f9              BEQ      |L1.2332|
;;;2642     }
;;;2643   
;;;2644     if (status & SDIO_FLAG_CTIMEOUT)
000928  f0040004          AND      r0,r4,#4
00092c  b128              CBZ      r0,|L1.2362|
;;;2645     {
;;;2646       errorstatus = SD_CMD_RSP_TIMEOUT;
00092e  2503              MOVS     r5,#3
;;;2647       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
000930  2004              MOVS     r0,#4
000932  f7fffffe          BL       SDIO_ClearFlag
;;;2648       return(errorstatus);
000936  4628              MOV      r0,r5
                  |L1.2360|
;;;2649     }
;;;2650     else if (status & SDIO_FLAG_CCRCFAIL)
;;;2651     {
;;;2652       errorstatus = SD_CMD_CRC_FAIL;
;;;2653       SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
;;;2654       return(errorstatus);
;;;2655     }
;;;2656   
;;;2657     /*!< Clear all the static flags */
;;;2658     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2659   
;;;2660     return(errorstatus);
;;;2661   }
000938  bd70              POP      {r4-r6,pc}
                  |L1.2362|
00093a  f0040001          AND      r0,r4,#1              ;2650
00093e  b128              CBZ      r0,|L1.2380|
000940  2501              MOVS     r5,#1                 ;2652
000942  2001              MOVS     r0,#1                 ;2653
000944  f7fffffe          BL       SDIO_ClearFlag
000948  4628              MOV      r0,r5                 ;2654
00094a  e7f5              B        |L1.2360|
                  |L1.2380|
00094c  f24050ff          MOV      r0,#0x5ff             ;2658
000950  f7fffffe          BL       SDIO_ClearFlag
000954  4628              MOV      r0,r5                 ;2660
000956  e7ef              B        |L1.2360|
;;;2662   
                          ENDP

                  CmdResp6Error PROC
;;;2669     */
;;;2670   static SD_Error CmdResp6Error(uint8_t cmd, uint16_t *prca)
000958  e92d41f0          PUSH     {r4-r8,lr}
;;;2671   {
00095c  4606              MOV      r6,r0
00095e  460f              MOV      r7,r1
;;;2672     SD_Error errorstatus = SD_OK;
000960  f04f082a          MOV      r8,#0x2a
;;;2673     uint32_t status;
;;;2674     uint32_t response_r1;
;;;2675   
;;;2676     status = SDIO->STA;
000964  48ca              LDR      r0,|L1.3216|
000966  6b45              LDR      r5,[r0,#0x34]
;;;2677   
;;;2678     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
000968  e001              B        |L1.2414|
                  |L1.2410|
;;;2679     {
;;;2680       status = SDIO->STA;
00096a  48c9              LDR      r0,|L1.3216|
00096c  6b45              LDR      r5,[r0,#0x34]
                  |L1.2414|
00096e  f0050045          AND      r0,r5,#0x45           ;2678
000972  2800              CMP      r0,#0                 ;2678
000974  d0f9              BEQ      |L1.2410|
;;;2681     }
;;;2682   
;;;2683     if (status & SDIO_FLAG_CTIMEOUT)
000976  f0050004          AND      r0,r5,#4
00097a  b138              CBZ      r0,|L1.2444|
;;;2684     {
;;;2685       errorstatus = SD_CMD_RSP_TIMEOUT;
00097c  f04f0803          MOV      r8,#3
;;;2686       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
000980  2004              MOVS     r0,#4
000982  f7fffffe          BL       SDIO_ClearFlag
;;;2687       return(errorstatus);
000986  4640              MOV      r0,r8
                  |L1.2440|
;;;2688     }
;;;2689     else if (status & SDIO_FLAG_CCRCFAIL)
;;;2690     {
;;;2691       errorstatus = SD_CMD_CRC_FAIL;
;;;2692       SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
;;;2693       return(errorstatus);
;;;2694     }
;;;2695   
;;;2696     /*!< Check response received is of desired command */
;;;2697     if (SDIO_GetCommandResponse() != cmd)
;;;2698     {
;;;2699       errorstatus = SD_ILLEGAL_CMD;
;;;2700       return(errorstatus);
;;;2701     }
;;;2702   
;;;2703     /*!< Clear all the static flags */
;;;2704     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2705   
;;;2706     /*!< We have received response, retrieve it.  */
;;;2707     response_r1 = SDIO_GetResponse(SDIO_RESP1);
;;;2708   
;;;2709     if (SD_ALLZERO == (response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED)))
;;;2710     {
;;;2711       *prca = (uint16_t) (response_r1 >> 16);
;;;2712       return(errorstatus);
;;;2713     }
;;;2714   
;;;2715     if (response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR)
;;;2716     {
;;;2717       return(SD_GENERAL_UNKNOWN_ERROR);
;;;2718     }
;;;2719   
;;;2720     if (response_r1 & SD_R6_ILLEGAL_CMD)
;;;2721     {
;;;2722       return(SD_ILLEGAL_CMD);
;;;2723     }
;;;2724   
;;;2725     if (response_r1 & SD_R6_COM_CRC_FAILED)
;;;2726     {
;;;2727       return(SD_COM_CRC_FAILED);
;;;2728     }
;;;2729   
;;;2730     return(errorstatus);
;;;2731   }
000988  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2444|
00098c  f0050001          AND      r0,r5,#1              ;2689
000990  b130              CBZ      r0,|L1.2464|
000992  f04f0801          MOV      r8,#1                 ;2691
000996  2001              MOVS     r0,#1                 ;2692
000998  f7fffffe          BL       SDIO_ClearFlag
00099c  4640              MOV      r0,r8                 ;2693
00099e  e7f3              B        |L1.2440|
                  |L1.2464|
0009a0  f7fffffe          BL       SDIO_GetCommandResponse
0009a4  42b0              CMP      r0,r6                 ;2697
0009a6  d003              BEQ      |L1.2480|
0009a8  f04f0810          MOV      r8,#0x10              ;2699
0009ac  4640              MOV      r0,r8                 ;2700
0009ae  e7eb              B        |L1.2440|
                  |L1.2480|
0009b0  f24050ff          MOV      r0,#0x5ff             ;2704
0009b4  f7fffffe          BL       SDIO_ClearFlag
0009b8  2000              MOVS     r0,#0                 ;2707
0009ba  f7fffffe          BL       SDIO_GetResponse
0009be  4604              MOV      r4,r0                 ;2707
0009c0  f4044060          AND      r0,r4,#0xe000         ;2709
0009c4  b918              CBNZ     r0,|L1.2510|
0009c6  0c20              LSRS     r0,r4,#16             ;2711
0009c8  8038              STRH     r0,[r7,#0]            ;2711
0009ca  4640              MOV      r0,r8                 ;2712
0009cc  e7dc              B        |L1.2440|
                  |L1.2510|
0009ce  f4045000          AND      r0,r4,#0x2000         ;2715
0009d2  b108              CBZ      r0,|L1.2520|
0009d4  2013              MOVS     r0,#0x13              ;2717
0009d6  e7d7              B        |L1.2440|
                  |L1.2520|
0009d8  f4044080          AND      r0,r4,#0x4000         ;2720
0009dc  b108              CBZ      r0,|L1.2530|
0009de  2010              MOVS     r0,#0x10              ;2722
0009e0  e7d2              B        |L1.2440|
                  |L1.2530|
0009e2  f4044000          AND      r0,r4,#0x8000         ;2725
0009e6  b108              CBZ      r0,|L1.2540|
0009e8  200f              MOVS     r0,#0xf               ;2727
0009ea  e7cd              B        |L1.2440|
                  |L1.2540|
0009ec  4640              MOV      r0,r8                 ;2730
0009ee  e7cb              B        |L1.2440|
;;;2732   
                          ENDP

                  SD_InitializeCards PROC
;;;682      */
;;;683    SD_Error SD_InitializeCards(void)
0009f0  b538              PUSH     {r3-r5,lr}
;;;684    {
;;;685      SD_Error errorstatus = SD_OK;
0009f2  242a              MOVS     r4,#0x2a
;;;686      uint16_t rca = 0x01;
0009f4  2001              MOVS     r0,#1
0009f6  9000              STR      r0,[sp,#0]
;;;687    
;;;688      if (SDIO_GetPowerState() == SDIO_PowerState_OFF)
0009f8  f7fffffe          BL       SDIO_GetPowerState
0009fc  b910              CBNZ     r0,|L1.2564|
;;;689      {
;;;690        errorstatus = SD_REQUEST_NOT_APPLICABLE;
0009fe  2425              MOVS     r4,#0x25
;;;691        return(errorstatus);
000a00  4620              MOV      r0,r4
                  |L1.2562|
;;;692      }
;;;693    
;;;694      if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
;;;695      {
;;;696        /*!< Send CMD2 ALL_SEND_CID */
;;;697        SDIO_CmdInitStructure.SDIO_Argument = 0x0;
;;;698        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_ALL_SEND_CID;
;;;699        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
;;;700        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;701        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;702        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;703    
;;;704        errorstatus = CmdResp2Error();
;;;705    
;;;706        if (SD_OK != errorstatus)
;;;707        {
;;;708          return(errorstatus);
;;;709        }
;;;710    
;;;711        CID_Tab[0] = SDIO_GetResponse(SDIO_RESP1);
;;;712        CID_Tab[1] = SDIO_GetResponse(SDIO_RESP2);
;;;713        CID_Tab[2] = SDIO_GetResponse(SDIO_RESP3);
;;;714        CID_Tab[3] = SDIO_GetResponse(SDIO_RESP4);
;;;715      }
;;;716      if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) ||  (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) ||  (SDIO_SECURE_DIGITAL_IO_COMBO_CARD == CardType)
;;;717          ||  (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
;;;718      {
;;;719        /*!< Send CMD3 SET_REL_ADDR with argument 0 */
;;;720        /*!< SD Card publishes its RCA. */
;;;721        SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;722        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_REL_ADDR;
;;;723        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;724        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;725        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;726        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;727    
;;;728        errorstatus = CmdResp6Error(SD_CMD_SET_REL_ADDR, &rca);
;;;729    
;;;730        if (SD_OK != errorstatus)
;;;731        {
;;;732          return(errorstatus);
;;;733        }
;;;734      }
;;;735    
;;;736      if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
;;;737      {
;;;738        RCA = rca;
;;;739    
;;;740        /*!< Send CMD9 SEND_CSD with argument as card's RCA */
;;;741        SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)(rca << 16);
;;;742        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_CSD;
;;;743        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
;;;744        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;745        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;746        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;747    
;;;748        errorstatus = CmdResp2Error();
;;;749    
;;;750        if (SD_OK != errorstatus)
;;;751        {
;;;752          return(errorstatus);
;;;753        }
;;;754    
;;;755        CSD_Tab[0] = SDIO_GetResponse(SDIO_RESP1);
;;;756        CSD_Tab[1] = SDIO_GetResponse(SDIO_RESP2);
;;;757        CSD_Tab[2] = SDIO_GetResponse(SDIO_RESP3);
;;;758        CSD_Tab[3] = SDIO_GetResponse(SDIO_RESP4);
;;;759      }
;;;760    
;;;761      errorstatus = SD_OK; /*!< All cards get intialized */
;;;762    
;;;763      return(errorstatus);
;;;764    }
000a02  bd38              POP      {r3-r5,pc}
                  |L1.2564|
000a04  48a3              LDR      r0,|L1.3220|
000a06  6800              LDR      r0,[r0,#0]            ;694  ; CardType
000a08  2804              CMP      r0,#4                 ;694
000a0a  d029              BEQ      |L1.2656|
000a0c  2000              MOVS     r0,#0                 ;697
000a0e  49a2              LDR      r1,|L1.3224|
000a10  6008              STR      r0,[r1,#0]            ;697  ; SDIO_CmdInitStructure
000a12  2002              MOVS     r0,#2                 ;698
000a14  6048              STR      r0,[r1,#4]            ;698  ; SDIO_CmdInitStructure
000a16  20c0              MOVS     r0,#0xc0              ;699
000a18  6088              STR      r0,[r1,#8]            ;699  ; SDIO_CmdInitStructure
000a1a  2000              MOVS     r0,#0                 ;700
000a1c  60c8              STR      r0,[r1,#0xc]          ;700  ; SDIO_CmdInitStructure
000a1e  f44f6080          MOV      r0,#0x400             ;701
000a22  6108              STR      r0,[r1,#0x10]         ;701  ; SDIO_CmdInitStructure
000a24  4608              MOV      r0,r1                 ;702
000a26  f7fffffe          BL       SDIO_SendCommand
000a2a  f7fffffe          BL       CmdResp2Error
000a2e  4604              MOV      r4,r0                 ;704
000a30  2c2a              CMP      r4,#0x2a              ;706
000a32  d001              BEQ      |L1.2616|
000a34  4620              MOV      r0,r4                 ;708
000a36  e7e4              B        |L1.2562|
                  |L1.2616|
000a38  2000              MOVS     r0,#0                 ;711
000a3a  f7fffffe          BL       SDIO_GetResponse
000a3e  4993              LDR      r1,|L1.3212|
000a40  6008              STR      r0,[r1,#0]            ;711  ; CID_Tab
000a42  2004              MOVS     r0,#4                 ;712
000a44  f7fffffe          BL       SDIO_GetResponse
000a48  4990              LDR      r1,|L1.3212|
000a4a  6048              STR      r0,[r1,#4]            ;712  ; CID_Tab
000a4c  2008              MOVS     r0,#8                 ;713
000a4e  f7fffffe          BL       SDIO_GetResponse
000a52  498e              LDR      r1,|L1.3212|
000a54  6088              STR      r0,[r1,#8]            ;713  ; CID_Tab
000a56  200c              MOVS     r0,#0xc               ;714
000a58  f7fffffe          BL       SDIO_GetResponse
000a5c  498b              LDR      r1,|L1.3212|
000a5e  60c8              STR      r0,[r1,#0xc]          ;714  ; CID_Tab
                  |L1.2656|
000a60  488c              LDR      r0,|L1.3220|
000a62  6800              LDR      r0,[r0,#0]            ;716  ; CardType
000a64  b158              CBZ      r0,|L1.2686|
000a66  488b              LDR      r0,|L1.3220|
000a68  6800              LDR      r0,[r0,#0]            ;716  ; CardType
000a6a  2801              CMP      r0,#1                 ;716
000a6c  d007              BEQ      |L1.2686|
000a6e  4889              LDR      r0,|L1.3220|
000a70  6800              LDR      r0,[r0,#0]            ;716  ; CardType
000a72  2806              CMP      r0,#6                 ;716
000a74  d003              BEQ      |L1.2686|
000a76  4887              LDR      r0,|L1.3220|
000a78  6800              LDR      r0,[r0,#0]            ;717  ; CardType
000a7a  2802              CMP      r0,#2                 ;717
000a7c  d117              BNE      |L1.2734|
                  |L1.2686|
000a7e  2000              MOVS     r0,#0                 ;721
000a80  4985              LDR      r1,|L1.3224|
000a82  6008              STR      r0,[r1,#0]            ;721  ; SDIO_CmdInitStructure
000a84  2003              MOVS     r0,#3                 ;722
000a86  6048              STR      r0,[r1,#4]            ;722  ; SDIO_CmdInitStructure
000a88  2040              MOVS     r0,#0x40              ;723
000a8a  6088              STR      r0,[r1,#8]            ;723  ; SDIO_CmdInitStructure
000a8c  2000              MOVS     r0,#0                 ;724
000a8e  60c8              STR      r0,[r1,#0xc]          ;724  ; SDIO_CmdInitStructure
000a90  f44f6080          MOV      r0,#0x400             ;725
000a94  6108              STR      r0,[r1,#0x10]         ;725  ; SDIO_CmdInitStructure
000a96  4608              MOV      r0,r1                 ;726
000a98  f7fffffe          BL       SDIO_SendCommand
000a9c  4669              MOV      r1,sp                 ;728
000a9e  2003              MOVS     r0,#3                 ;728
000aa0  f7fffffe          BL       CmdResp6Error
000aa4  4604              MOV      r4,r0                 ;728
000aa6  2c2a              CMP      r4,#0x2a              ;730
000aa8  d001              BEQ      |L1.2734|
000aaa  4620              MOV      r0,r4                 ;732
000aac  e7a9              B        |L1.2562|
                  |L1.2734|
000aae  4879              LDR      r0,|L1.3220|
000ab0  6800              LDR      r0,[r0,#0]            ;736  ; CardType
000ab2  2804              CMP      r0,#4                 ;736
000ab4  d02f              BEQ      |L1.2838|
000ab6  f8bd0000          LDRH     r0,[sp,#0]            ;738
000aba  4978              LDR      r1,|L1.3228|
000abc  6008              STR      r0,[r1,#0]            ;738  ; RCA
000abe  f8bd0000          LDRH     r0,[sp,#0]            ;741
000ac2  0400              LSLS     r0,r0,#16             ;741
000ac4  4974              LDR      r1,|L1.3224|
000ac6  6008              STR      r0,[r1,#0]            ;741  ; SDIO_CmdInitStructure
000ac8  2009              MOVS     r0,#9                 ;742
000aca  6048              STR      r0,[r1,#4]            ;742  ; SDIO_CmdInitStructure
000acc  20c0              MOVS     r0,#0xc0              ;743
000ace  6088              STR      r0,[r1,#8]            ;743  ; SDIO_CmdInitStructure
000ad0  2000              MOVS     r0,#0                 ;744
000ad2  60c8              STR      r0,[r1,#0xc]          ;744  ; SDIO_CmdInitStructure
000ad4  f44f6080          MOV      r0,#0x400             ;745
000ad8  6108              STR      r0,[r1,#0x10]         ;745  ; SDIO_CmdInitStructure
000ada  4608              MOV      r0,r1                 ;746
000adc  f7fffffe          BL       SDIO_SendCommand
000ae0  f7fffffe          BL       CmdResp2Error
000ae4  4604              MOV      r4,r0                 ;748
000ae6  2c2a              CMP      r4,#0x2a              ;750
000ae8  d001              BEQ      |L1.2798|
000aea  4620              MOV      r0,r4                 ;752
000aec  e789              B        |L1.2562|
                  |L1.2798|
000aee  2000              MOVS     r0,#0                 ;755
000af0  f7fffffe          BL       SDIO_GetResponse
000af4  496a              LDR      r1,|L1.3232|
000af6  6008              STR      r0,[r1,#0]            ;755  ; CSD_Tab
000af8  2004              MOVS     r0,#4                 ;756
000afa  f7fffffe          BL       SDIO_GetResponse
000afe  4968              LDR      r1,|L1.3232|
000b00  6048              STR      r0,[r1,#4]            ;756  ; CSD_Tab
000b02  2008              MOVS     r0,#8                 ;757
000b04  f7fffffe          BL       SDIO_GetResponse
000b08  4965              LDR      r1,|L1.3232|
000b0a  6088              STR      r0,[r1,#8]            ;757  ; CSD_Tab
000b0c  200c              MOVS     r0,#0xc               ;758
000b0e  f7fffffe          BL       SDIO_GetResponse
000b12  4963              LDR      r1,|L1.3232|
000b14  60c8              STR      r0,[r1,#0xc]          ;758  ; CSD_Tab
                  |L1.2838|
000b16  242a              MOVS     r4,#0x2a              ;761
000b18  4620              MOV      r0,r4                 ;763
000b1a  e772              B        |L1.2562|
;;;765    
                          ENDP

                  CmdResp3Error PROC
;;;2603     */
;;;2604   static SD_Error CmdResp3Error(void)
000b1c  b570              PUSH     {r4-r6,lr}
;;;2605   {
;;;2606     SD_Error errorstatus = SD_OK;
000b1e  252a              MOVS     r5,#0x2a
;;;2607     uint32_t status;
;;;2608   
;;;2609     status = SDIO->STA;
000b20  485b              LDR      r0,|L1.3216|
000b22  6b44              LDR      r4,[r0,#0x34]
;;;2610   
;;;2611     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
000b24  e001              B        |L1.2858|
                  |L1.2854|
;;;2612     {
;;;2613       status = SDIO->STA;
000b26  485a              LDR      r0,|L1.3216|
000b28  6b44              LDR      r4,[r0,#0x34]
                  |L1.2858|
000b2a  f0040045          AND      r0,r4,#0x45           ;2611
000b2e  2800              CMP      r0,#0                 ;2611
000b30  d0f9              BEQ      |L1.2854|
;;;2614     }
;;;2615   
;;;2616     if (status & SDIO_FLAG_CTIMEOUT)
000b32  f0040004          AND      r0,r4,#4
000b36  b128              CBZ      r0,|L1.2884|
;;;2617     {
;;;2618       errorstatus = SD_CMD_RSP_TIMEOUT;
000b38  2503              MOVS     r5,#3
;;;2619       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
000b3a  2004              MOVS     r0,#4
000b3c  f7fffffe          BL       SDIO_ClearFlag
;;;2620       return(errorstatus);
000b40  4628              MOV      r0,r5
                  |L1.2882|
;;;2621     }
;;;2622     /*!< Clear all the static flags */
;;;2623     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2624     return(errorstatus);
;;;2625   }
000b42  bd70              POP      {r4-r6,pc}
                  |L1.2884|
000b44  f24050ff          MOV      r0,#0x5ff             ;2623
000b48  f7fffffe          BL       SDIO_ClearFlag
000b4c  4628              MOV      r0,r5                 ;2624
000b4e  e7f8              B        |L1.2882|
;;;2626   
                          ENDP

                  CmdResp7Error PROC
;;;2420     */
;;;2421   static SD_Error CmdResp7Error(void)
000b50  b570              PUSH     {r4-r6,lr}
;;;2422   {
;;;2423     SD_Error errorstatus = SD_OK;
000b52  262a              MOVS     r6,#0x2a
;;;2424     uint32_t status;
;;;2425     uint32_t timeout = SDIO_CMD0TIMEOUT;
000b54  f44f3580          MOV      r5,#0x10000
;;;2426   
;;;2427     status = SDIO->STA;
000b58  484d              LDR      r0,|L1.3216|
000b5a  6b44              LDR      r4,[r0,#0x34]
;;;2428   
;;;2429     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) && (timeout > 0))
000b5c  e002              B        |L1.2916|
                  |L1.2910|
;;;2430     {
;;;2431       timeout--;
000b5e  1e6d              SUBS     r5,r5,#1
;;;2432       status = SDIO->STA;
000b60  484b              LDR      r0,|L1.3216|
000b62  6b44              LDR      r4,[r0,#0x34]
                  |L1.2916|
000b64  f0040045          AND      r0,r4,#0x45           ;2429
000b68  b908              CBNZ     r0,|L1.2926|
000b6a  2d00              CMP      r5,#0                 ;2429
000b6c  d1f7              BNE      |L1.2910|
                  |L1.2926|
;;;2433     }
;;;2434   
;;;2435     if ((timeout == 0) || (status & SDIO_FLAG_CTIMEOUT))
000b6e  b115              CBZ      r5,|L1.2934|
000b70  f0040004          AND      r0,r4,#4
000b74  b128              CBZ      r0,|L1.2946|
                  |L1.2934|
;;;2436     {
;;;2437       /*!< Card is not V2.0 complient or card does not support the set voltage range */
;;;2438       errorstatus = SD_CMD_RSP_TIMEOUT;
000b76  2603              MOVS     r6,#3
;;;2439       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
000b78  2004              MOVS     r0,#4
000b7a  f7fffffe          BL       SDIO_ClearFlag
;;;2440       return(errorstatus);
000b7e  4630              MOV      r0,r6
                  |L1.2944|
;;;2441     }
;;;2442   
;;;2443     if (status & SDIO_FLAG_CMDREND)
;;;2444     {
;;;2445       /*!< Card is SD V2.0 compliant */
;;;2446       errorstatus = SD_OK;
;;;2447       SDIO_ClearFlag(SDIO_FLAG_CMDREND);
;;;2448       return(errorstatus);
;;;2449     }
;;;2450     return(errorstatus);
;;;2451   }
000b80  bd70              POP      {r4-r6,pc}
                  |L1.2946|
000b82  f0040040          AND      r0,r4,#0x40           ;2443
000b86  b128              CBZ      r0,|L1.2964|
000b88  262a              MOVS     r6,#0x2a              ;2446
000b8a  2040              MOVS     r0,#0x40              ;2447
000b8c  f7fffffe          BL       SDIO_ClearFlag
000b90  4630              MOV      r0,r6                 ;2448
000b92  e7f5              B        |L1.2944|
                  |L1.2964|
000b94  4630              MOV      r0,r6                 ;2450
000b96  e7f3              B        |L1.2944|
;;;2452   
                          ENDP

                  CmdError PROC
;;;2391     */
;;;2392   static SD_Error CmdError(void)
000b98  b570              PUSH     {r4-r6,lr}
;;;2393   {
;;;2394     SD_Error errorstatus = SD_OK;
000b9a  252a              MOVS     r5,#0x2a
;;;2395     uint32_t timeout;
;;;2396   
;;;2397     timeout = SDIO_CMD0TIMEOUT; /*!< 10000 */
000b9c  f44f3480          MOV      r4,#0x10000
;;;2398   
;;;2399     while ((timeout > 0) && (SDIO_GetFlagStatus(SDIO_FLAG_CMDSENT) == RESET))
000ba0  e000              B        |L1.2980|
                  |L1.2978|
;;;2400     {
;;;2401       timeout--;
000ba2  1e64              SUBS     r4,r4,#1
                  |L1.2980|
000ba4  b124              CBZ      r4,|L1.2992|
000ba6  2080              MOVS     r0,#0x80              ;2399
000ba8  f7fffffe          BL       SDIO_GetFlagStatus
000bac  2800              CMP      r0,#0                 ;2399
000bae  d0f8              BEQ      |L1.2978|
                  |L1.2992|
;;;2402     }
;;;2403   
;;;2404     if (timeout == 0)
000bb0  b914              CBNZ     r4,|L1.3000|
;;;2405     {
;;;2406       errorstatus = SD_CMD_RSP_TIMEOUT;
000bb2  2503              MOVS     r5,#3
;;;2407       return(errorstatus);
000bb4  4628              MOV      r0,r5
                  |L1.2998|
;;;2408     }
;;;2409   
;;;2410     /*!< Clear all the static flags */
;;;2411     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2412   
;;;2413     return(errorstatus);
;;;2414   }
000bb6  bd70              POP      {r4-r6,pc}
                  |L1.3000|
000bb8  f24050ff          MOV      r0,#0x5ff             ;2411
000bbc  f7fffffe          BL       SDIO_ClearFlag
000bc0  4628              MOV      r0,r5                 ;2413
000bc2  e7f8              B        |L1.2998|
;;;2415   
                          ENDP

                  SD_PowerON PROC
;;;523      */
;;;524    SD_Error SD_PowerON(void)
000bc4  e92d41f0          PUSH     {r4-r8,lr}
;;;525    {
;;;526      SD_Error errorstatus = SD_OK;
000bc8  242a              MOVS     r4,#0x2a
;;;527      uint32_t response = 0, count = 0, validvoltage = 0;
000bca  2600              MOVS     r6,#0
000bcc  2500              MOVS     r5,#0
000bce  2700              MOVS     r7,#0
;;;528      uint32_t SDType = SD_STD_CAPACITY;
000bd0  f04f0800          MOV      r8,#0
;;;529    
;;;530      /*!< Power ON Sequence -----------------------------------------------------*/
;;;531      /*!< Configure the SDIO peripheral */
;;;532      /*!< SDIOCLK = HCLK, SDIO_CK = HCLK/(2 + SDIO_INIT_CLK_DIV) */
;;;533      /*!< SDIO_CK for initialization should not exceed 400 KHz */  
;;;534      SDIO_InitStructure.SDIO_ClockDiv = SDIO_INIT_CLK_DIV;
000bd4  20b2              MOVS     r0,#0xb2
000bd6  4933              LDR      r1,|L1.3236|
000bd8  7508              STRB     r0,[r1,#0x14]
;;;535      SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
000bda  2000              MOVS     r0,#0
000bdc  6008              STR      r0,[r1,#0]  ; SDIO_InitStructure
;;;536      SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
000bde  6048              STR      r0,[r1,#4]  ; SDIO_InitStructure
;;;537      SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
000be0  6088              STR      r0,[r1,#8]  ; SDIO_InitStructure
;;;538      SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
000be2  60c8              STR      r0,[r1,#0xc]  ; SDIO_InitStructure
;;;539      SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
000be4  6108              STR      r0,[r1,#0x10]  ; SDIO_InitStructure
;;;540      SDIO_Init(&SDIO_InitStructure);
000be6  4608              MOV      r0,r1
000be8  f7fffffe          BL       SDIO_Init
;;;541    
;;;542      /*!< Set Power State to ON */
;;;543      SDIO_SetPowerState(SDIO_PowerState_ON);
000bec  2003              MOVS     r0,#3
000bee  f7fffffe          BL       SDIO_SetPowerState
;;;544    
;;;545      /*!< Enable SDIO Clock */
;;;546      SDIO_ClockCmd(ENABLE);
000bf2  2001              MOVS     r0,#1
000bf4  f7fffffe          BL       SDIO_ClockCmd
;;;547    
;;;548      /*!< CMD0: GO_IDLE_STATE ---------------------------------------------------*/
;;;549      /*!< No CMD response required */
;;;550      SDIO_CmdInitStructure.SDIO_Argument = 0x0;
000bf8  2000              MOVS     r0,#0
000bfa  4927              LDR      r1,|L1.3224|
000bfc  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
;;;551      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_GO_IDLE_STATE;
000bfe  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;552      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_No;
000c00  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;553      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
000c02  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;554      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000c04  f44f6080          MOV      r0,#0x400
000c08  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;555      SDIO_SendCommand(&SDIO_CmdInitStructure);
000c0a  4608              MOV      r0,r1
000c0c  f7fffffe          BL       SDIO_SendCommand
;;;556    
;;;557      errorstatus = CmdError();
000c10  f7fffffe          BL       CmdError
000c14  4604              MOV      r4,r0
;;;558    
;;;559      if (errorstatus != SD_OK)
000c16  2c2a              CMP      r4,#0x2a
000c18  d002              BEQ      |L1.3104|
;;;560      {
;;;561        /*!< CMD Response TimeOut (wait for CMDSENT flag) */
;;;562        return(errorstatus);
000c1a  4620              MOV      r0,r4
                  |L1.3100|
;;;563      }
;;;564    
;;;565      /*!< CMD8: SEND_IF_COND ----------------------------------------------------*/
;;;566      /*!< Send CMD8 to verify SD card interface operating condition */
;;;567      /*!< Argument: - [31:12]: Reserved (shall be set to '0')
;;;568                   - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
;;;569                   - [7:0]: Check Pattern (recommended 0xAA) */
;;;570      /*!< CMD Response: R7 */
;;;571      SDIO_CmdInitStructure.SDIO_Argument = SD_CHECK_PATTERN;
;;;572      SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_IF_COND;
;;;573      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;574      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;575      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;576      SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;577    
;;;578      errorstatus = CmdResp7Error();
;;;579    
;;;580      if (errorstatus == SD_OK)
;;;581      {
;;;582        CardType = SDIO_STD_CAPACITY_SD_CARD_V2_0; /*!< SD Card 2.0 */
;;;583        SDType = SD_HIGH_CAPACITY;
;;;584      }
;;;585      else
;;;586      {
;;;587        /*!< CMD55 */
;;;588        SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;589        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;590        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;591        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;592        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;593        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;594        errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;595      }
;;;596      /*!< CMD55 */
;;;597      SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;598      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;599      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;600      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;601      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;602      SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;603      errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;604    
;;;605      /*!< If errorstatus is Command TimeOut, it is a MMC card */
;;;606      /*!< If errorstatus is SD_OK it is a SD card: SD card 2.0 (voltage range mismatch)
;;;607         or SD card 1.x */
;;;608      if (errorstatus == SD_OK)
;;;609      {
;;;610        /*!< SD CARD */
;;;611        /*!< Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
;;;612        while ((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
;;;613        {
;;;614    
;;;615          /*!< SEND CMD55 APP_CMD with RCA as 0 */
;;;616          SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;617          SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;618          SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;619          SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;620          SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;621          SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;622    
;;;623          errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;624    
;;;625          if (errorstatus != SD_OK)
;;;626          {
;;;627            return(errorstatus);
;;;628          }
;;;629          SDIO_CmdInitStructure.SDIO_Argument = SD_VOLTAGE_WINDOW_SD | SDType;
;;;630          SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_OP_COND;
;;;631          SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;632          SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;633          SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;634          SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;635    
;;;636          errorstatus = CmdResp3Error();
;;;637          if (errorstatus != SD_OK)
;;;638          {
;;;639            return(errorstatus);
;;;640          }
;;;641    
;;;642          response = SDIO_GetResponse(SDIO_RESP1);
;;;643          validvoltage = (((response >> 31) == 1) ? 1 : 0);
;;;644          count++;
;;;645        }
;;;646        if (count >= SD_MAX_VOLT_TRIAL)
;;;647        {
;;;648          errorstatus = SD_INVALID_VOLTRANGE;
;;;649          return(errorstatus);
;;;650        }
;;;651    
;;;652        if (response &= SD_HIGH_CAPACITY)
;;;653        {
;;;654          CardType = SDIO_HIGH_CAPACITY_SD_CARD;
;;;655        }
;;;656    
;;;657      }/*!< else MMC Card */
;;;658    
;;;659      return(errorstatus);
;;;660    }
000c1c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.3104|
000c20  f44f70d5          MOV      r0,#0x1aa             ;571
000c24  491c              LDR      r1,|L1.3224|
000c26  6008              STR      r0,[r1,#0]            ;571  ; SDIO_CmdInitStructure
000c28  2008              MOVS     r0,#8                 ;572
000c2a  6048              STR      r0,[r1,#4]            ;572  ; SDIO_CmdInitStructure
000c2c  2040              MOVS     r0,#0x40              ;573
000c2e  6088              STR      r0,[r1,#8]            ;573  ; SDIO_CmdInitStructure
000c30  2000              MOVS     r0,#0                 ;574
000c32  60c8              STR      r0,[r1,#0xc]          ;574  ; SDIO_CmdInitStructure
000c34  f44f6080          MOV      r0,#0x400             ;575
000c38  6108              STR      r0,[r1,#0x10]         ;575  ; SDIO_CmdInitStructure
000c3a  4608              MOV      r0,r1                 ;576
000c3c  f7fffffe          BL       SDIO_SendCommand
000c40  f7fffffe          BL       CmdResp7Error
000c44  4604              MOV      r4,r0                 ;578
000c46  2c2a              CMP      r4,#0x2a              ;580
000c48  d105              BNE      |L1.3158|
000c4a  2001              MOVS     r0,#1                 ;582
000c4c  4911              LDR      r1,|L1.3220|
000c4e  6008              STR      r0,[r1,#0]            ;582  ; CardType
000c50  f04f4880          MOV      r8,#0x40000000        ;583
000c54  e012              B        |L1.3196|
                  |L1.3158|
000c56  2000              MOVS     r0,#0                 ;588
000c58  490f              LDR      r1,|L1.3224|
000c5a  6008              STR      r0,[r1,#0]            ;588  ; SDIO_CmdInitStructure
000c5c  2037              MOVS     r0,#0x37              ;589
000c5e  6048              STR      r0,[r1,#4]            ;589  ; SDIO_CmdInitStructure
000c60  2040              MOVS     r0,#0x40              ;590
000c62  6088              STR      r0,[r1,#8]            ;590  ; SDIO_CmdInitStructure
000c64  2000              MOVS     r0,#0                 ;591
000c66  60c8              STR      r0,[r1,#0xc]          ;591  ; SDIO_CmdInitStructure
000c68  f44f6080          MOV      r0,#0x400             ;592
000c6c  6108              STR      r0,[r1,#0x10]         ;592  ; SDIO_CmdInitStructure
000c6e  4608              MOV      r0,r1                 ;593
000c70  f7fffffe          BL       SDIO_SendCommand
000c74  2037              MOVS     r0,#0x37              ;594
000c76  f7fffffe          BL       CmdResp1Error
000c7a  4604              MOV      r4,r0                 ;594
                  |L1.3196|
000c7c  2000              MOVS     r0,#0                 ;597
000c7e  4906              LDR      r1,|L1.3224|
000c80  6008              STR      r0,[r1,#0]            ;597  ; SDIO_CmdInitStructure
000c82  2037              MOVS     r0,#0x37              ;598
000c84  6048              STR      r0,[r1,#4]            ;598  ; SDIO_CmdInitStructure
000c86  2040              MOVS     r0,#0x40              ;599
000c88  6088              STR      r0,[r1,#8]            ;599  ; SDIO_CmdInitStructure
000c8a  e00d              B        |L1.3240|
                  |L1.3212|
                          DCD      CID_Tab
                  |L1.3216|
                          DCD      0x40018000
                  |L1.3220|
                          DCD      CardType
                  |L1.3224|
                          DCD      SDIO_CmdInitStructure
                  |L1.3228|
                          DCD      ||RCA||
                  |L1.3232|
                          DCD      CSD_Tab
                  |L1.3236|
                          DCD      SDIO_InitStructure
                  |L1.3240|
000ca8  2000              MOVS     r0,#0                 ;600
000caa  60c8              STR      r0,[r1,#0xc]          ;600  ; SDIO_CmdInitStructure
000cac  f44f6080          MOV      r0,#0x400             ;601
000cb0  6108              STR      r0,[r1,#0x10]         ;601  ; SDIO_CmdInitStructure
000cb2  4608              MOV      r0,r1                 ;602
000cb4  f7fffffe          BL       SDIO_SendCommand
000cb8  2037              MOVS     r0,#0x37              ;603
000cba  f7fffffe          BL       CmdResp1Error
000cbe  4604              MOV      r4,r0                 ;603
000cc0  2c2a              CMP      r4,#0x2a              ;608
000cc2  d14c              BNE      |L1.3422|
000cc4  e038              B        |L1.3384|
                  |L1.3270|
000cc6  2000              MOVS     r0,#0                 ;616
000cc8  49fa              LDR      r1,|L1.4276|
000cca  6008              STR      r0,[r1,#0]            ;616  ; SDIO_CmdInitStructure
000ccc  2037              MOVS     r0,#0x37              ;617
000cce  6048              STR      r0,[r1,#4]            ;617  ; SDIO_CmdInitStructure
000cd0  2040              MOVS     r0,#0x40              ;618
000cd2  6088              STR      r0,[r1,#8]            ;618  ; SDIO_CmdInitStructure
000cd4  2000              MOVS     r0,#0                 ;619
000cd6  60c8              STR      r0,[r1,#0xc]          ;619  ; SDIO_CmdInitStructure
000cd8  f44f6080          MOV      r0,#0x400             ;620
000cdc  6108              STR      r0,[r1,#0x10]         ;620  ; SDIO_CmdInitStructure
000cde  4608              MOV      r0,r1                 ;621
000ce0  f7fffffe          BL       SDIO_SendCommand
000ce4  2037              MOVS     r0,#0x37              ;623
000ce6  f7fffffe          BL       CmdResp1Error
000cea  4604              MOV      r4,r0                 ;623
000cec  2c2a              CMP      r4,#0x2a              ;625
000cee  d001              BEQ      |L1.3316|
000cf0  4620              MOV      r0,r4                 ;627
000cf2  e793              B        |L1.3100|
                  |L1.3316|
000cf4  48f0              LDR      r0,|L1.4280|
000cf6  ea480000          ORR      r0,r8,r0              ;629
000cfa  49ee              LDR      r1,|L1.4276|
000cfc  6008              STR      r0,[r1,#0]            ;629  ; SDIO_CmdInitStructure
000cfe  2029              MOVS     r0,#0x29              ;630
000d00  6048              STR      r0,[r1,#4]            ;630  ; SDIO_CmdInitStructure
000d02  2040              MOVS     r0,#0x40              ;631
000d04  6088              STR      r0,[r1,#8]            ;631  ; SDIO_CmdInitStructure
000d06  2000              MOVS     r0,#0                 ;632
000d08  60c8              STR      r0,[r1,#0xc]          ;632  ; SDIO_CmdInitStructure
000d0a  f44f6080          MOV      r0,#0x400             ;633
000d0e  6108              STR      r0,[r1,#0x10]         ;633  ; SDIO_CmdInitStructure
000d10  4608              MOV      r0,r1                 ;634
000d12  f7fffffe          BL       SDIO_SendCommand
000d16  f7fffffe          BL       CmdResp3Error
000d1a  4604              MOV      r4,r0                 ;636
000d1c  2c2a              CMP      r4,#0x2a              ;637
000d1e  d001              BEQ      |L1.3364|
000d20  4620              MOV      r0,r4                 ;639
000d22  e77b              B        |L1.3100|
                  |L1.3364|
000d24  2000              MOVS     r0,#0                 ;642
000d26  f7fffffe          BL       SDIO_GetResponse
000d2a  4606              MOV      r6,r0                 ;642
000d2c  2001              MOVS     r0,#1                 ;643
000d2e  ea8070d6          EOR      r0,r0,r6,LSR #31      ;643
000d32  f0800701          EOR      r7,r0,#1              ;643
000d36  1c6d              ADDS     r5,r5,#1              ;644
                  |L1.3384|
000d38  b91f              CBNZ     r7,|L1.3394|
000d3a  f64f70ff          MOV      r0,#0xffff            ;612
000d3e  4285              CMP      r5,r0                 ;612
000d40  d3c1              BCC      |L1.3270|
                  |L1.3394|
000d42  f64f70ff          MOV      r0,#0xffff            ;646
000d46  4285              CMP      r5,r0                 ;646
000d48  d302              BCC      |L1.3408|
000d4a  241b              MOVS     r4,#0x1b              ;648
000d4c  4620              MOV      r0,r4                 ;649
000d4e  e765              B        |L1.3100|
                  |L1.3408|
000d50  f0064080          AND      r0,r6,#0x40000000     ;652
000d54  0006              MOVS     r6,r0                 ;652
000d56  d002              BEQ      |L1.3422|
000d58  2002              MOVS     r0,#2                 ;654
000d5a  49d8              LDR      r1,|L1.4284|
000d5c  6008              STR      r0,[r1,#0]            ;654  ; CardType
                  |L1.3422|
000d5e  4620              MOV      r0,r4                 ;659
000d60  e75c              B        |L1.3100|
;;;661    
                          ENDP

                  SD_Init PROC
;;;385      */
;;;386    SD_Error SD_Init(void)
000d62  b510              PUSH     {r4,lr}
;;;387    {
;;;388      SD_Error errorstatus = SD_OK;
000d64  242a              MOVS     r4,#0x2a
;;;389      
;;;390      /* SDIO Peripheral Low Level Init */
;;;391      SD_LowLevel_Init();
000d66  f7fffffe          BL       SD_LowLevel_Init
;;;392      //SDIO_Configuration();
;;;393      SDIO_DeInit();
000d6a  f7fffffe          BL       SDIO_DeInit
;;;394    
;;;395      errorstatus = SD_PowerON();
000d6e  f7fffffe          BL       SD_PowerON
000d72  4604              MOV      r4,r0
;;;396    
;;;397      if (errorstatus != SD_OK)
000d74  2c2a              CMP      r4,#0x2a
000d76  d001              BEQ      |L1.3452|
;;;398      {
;;;399        /*!< CMD Response TimeOut (wait for CMDSENT flag) */
;;;400        return(errorstatus);
000d78  4620              MOV      r0,r4
                  |L1.3450|
;;;401      }
;;;402    
;;;403      errorstatus = SD_InitializeCards();
;;;404    
;;;405      if (errorstatus != SD_OK)
;;;406      {
;;;407        /*!< CMD Response TimeOut (wait for CMDSENT flag) */
;;;408        return(errorstatus);
;;;409      }
;;;410    
;;;411      /*!< Configure the SDIO peripheral */
;;;412      /*!< SDIOCLK = HCLK, SDIO_CK = HCLK/(2 + SDIO_TRANSFER_CLK_DIV) */
;;;413      SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
;;;414      SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
;;;415      SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
;;;416      SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
;;;417      SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
;;;418      SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
;;;419      SDIO_Init(&SDIO_InitStructure);
;;;420      
;;;421      if (errorstatus == SD_OK)
;;;422      {
;;;423        /*----------------- Read CSD/CID MSD registers ------------------*/
;;;424        errorstatus = SD_GetCardInfo(&SDCardInfo);
;;;425      }
;;;426    
;;;427      if (errorstatus == SD_OK)
;;;428      {
;;;429        /*----------------- Select Card --------------------------------*/
;;;430        errorstatus = SD_SelectDeselect((uint32_t) (SDCardInfo.RCA << 16));
;;;431      }
;;;432    
;;;433      if (errorstatus == SD_OK)
;;;434      {
;;;435        errorstatus = SD_EnableWideBusOperation(SDIO_BusWide_4b);
;;;436      }  
;;;437    
;;;438      /* Set Device Transfer Mode to DMA */
;;;439      if (errorstatus == SD_OK)
;;;440      {  
;;;441        errorstatus = SD_SetDeviceMode(SD_DMA_MODE);
;;;442      }
;;;443      
;;;444      return(errorstatus);
;;;445    }
000d7a  bd10              POP      {r4,pc}
                  |L1.3452|
000d7c  f7fffffe          BL       SD_InitializeCards
000d80  4604              MOV      r4,r0                 ;403
000d82  2c2a              CMP      r4,#0x2a              ;405
000d84  d001              BEQ      |L1.3466|
000d86  4620              MOV      r0,r4                 ;408
000d88  e7f7              B        |L1.3450|
                  |L1.3466|
000d8a  2001              MOVS     r0,#1                 ;413
000d8c  49cc              LDR      r1,|L1.4288|
000d8e  7508              STRB     r0,[r1,#0x14]         ;413
000d90  2000              MOVS     r0,#0                 ;414
000d92  6008              STR      r0,[r1,#0]            ;414  ; SDIO_InitStructure
000d94  6048              STR      r0,[r1,#4]            ;415  ; SDIO_InitStructure
000d96  6088              STR      r0,[r1,#8]            ;416  ; SDIO_InitStructure
000d98  60c8              STR      r0,[r1,#0xc]          ;417  ; SDIO_InitStructure
000d9a  6108              STR      r0,[r1,#0x10]         ;418  ; SDIO_InitStructure
000d9c  4608              MOV      r0,r1                 ;419
000d9e  f7fffffe          BL       SDIO_Init
000da2  2c2a              CMP      r4,#0x2a              ;421
000da4  d103              BNE      |L1.3502|
000da6  48c7              LDR      r0,|L1.4292|
000da8  f7fffffe          BL       SD_GetCardInfo
000dac  4604              MOV      r4,r0                 ;424
                  |L1.3502|
000dae  2c2a              CMP      r4,#0x2a              ;427
000db0  d106              BNE      |L1.3520|
000db2  49c4              LDR      r1,|L1.4292|
000db4  f8b1104c          LDRH     r1,[r1,#0x4c]         ;430  ; SDCardInfo
000db8  0408              LSLS     r0,r1,#16             ;430
000dba  f7fffffe          BL       SD_SelectDeselect
000dbe  4604              MOV      r4,r0                 ;430
                  |L1.3520|
000dc0  2c2a              CMP      r4,#0x2a              ;433
000dc2  d104              BNE      |L1.3534|
000dc4  f44f6000          MOV      r0,#0x800             ;435
000dc8  f7fffffe          BL       SD_EnableWideBusOperation
000dcc  4604              MOV      r4,r0                 ;435
                  |L1.3534|
000dce  2c2a              CMP      r4,#0x2a              ;439
000dd0  d103              BNE      |L1.3546|
000dd2  2000              MOVS     r0,#0                 ;441
000dd4  f7fffffe          BL       SD_SetDeviceMode
000dd8  4604              MOV      r4,r0                 ;441
                  |L1.3546|
000dda  4620              MOV      r0,r4                 ;444
000ddc  e7cd              B        |L1.3450|
;;;446    
                          ENDP

                  SD_SendStatus PROC
;;;2101     */
;;;2102   SD_Error SD_SendStatus(uint32_t *pcardstatus)
000dde  b570              PUSH     {r4-r6,lr}
;;;2103   {
000de0  4604              MOV      r4,r0
;;;2104     SD_Error errorstatus = SD_OK;
000de2  252a              MOVS     r5,#0x2a
;;;2105   
;;;2106     if (pcardstatus == NULL)
000de4  b914              CBNZ     r4,|L1.3564|
;;;2107     {
;;;2108       errorstatus = SD_INVALID_PARAMETER;
000de6  2526              MOVS     r5,#0x26
;;;2109       return(errorstatus);
000de8  4628              MOV      r0,r5
                  |L1.3562|
;;;2110     }
;;;2111   
;;;2112     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
;;;2113     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
;;;2114     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2115     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2116     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2117     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2118   
;;;2119   
;;;2120     errorstatus = CmdResp1Error(SD_CMD_SEND_STATUS);
;;;2121   
;;;2122     if (errorstatus != SD_OK)
;;;2123     {
;;;2124       return(errorstatus);
;;;2125     }
;;;2126   
;;;2127     *pcardstatus = SDIO_GetResponse(SDIO_RESP1);
;;;2128   
;;;2129     return(errorstatus);
;;;2130   }
000dea  bd70              POP      {r4-r6,pc}
                  |L1.3564|
000dec  48b6              LDR      r0,|L1.4296|
000dee  8800              LDRH     r0,[r0,#0]            ;2112  ; RCA
000df0  0400              LSLS     r0,r0,#16             ;2112
000df2  49b0              LDR      r1,|L1.4276|
000df4  6008              STR      r0,[r1,#0]            ;2112  ; SDIO_CmdInitStructure
000df6  200d              MOVS     r0,#0xd               ;2113
000df8  6048              STR      r0,[r1,#4]            ;2113  ; SDIO_CmdInitStructure
000dfa  2040              MOVS     r0,#0x40              ;2114
000dfc  6088              STR      r0,[r1,#8]            ;2114  ; SDIO_CmdInitStructure
000dfe  2000              MOVS     r0,#0                 ;2115
000e00  60c8              STR      r0,[r1,#0xc]          ;2115  ; SDIO_CmdInitStructure
000e02  f44f6080          MOV      r0,#0x400             ;2116
000e06  6108              STR      r0,[r1,#0x10]         ;2116  ; SDIO_CmdInitStructure
000e08  4608              MOV      r0,r1                 ;2117
000e0a  f7fffffe          BL       SDIO_SendCommand
000e0e  200d              MOVS     r0,#0xd               ;2120
000e10  f7fffffe          BL       CmdResp1Error
000e14  4605              MOV      r5,r0                 ;2120
000e16  2d2a              CMP      r5,#0x2a              ;2122
000e18  d001              BEQ      |L1.3614|
000e1a  4628              MOV      r0,r5                 ;2124
000e1c  e7e5              B        |L1.3562|
                  |L1.3614|
000e1e  2000              MOVS     r0,#0                 ;2127
000e20  f7fffffe          BL       SDIO_GetResponse
000e24  6020              STR      r0,[r4,#0]            ;2127
000e26  4628              MOV      r0,r5                 ;2129
000e28  e7df              B        |L1.3562|
;;;2131   
                          ENDP

                  SD_Detect PROC
;;;505     */
;;;506    uint8_t SD_Detect(void)
000e2a  b508              PUSH     {r3,lr}
;;;507    {
;;;508      __IO uint8_t status = SD_PRESENT;
000e2c  2001              MOVS     r0,#1
000e2e  9000              STR      r0,[sp,#0]
;;;509    
;;;510      /*!< Check GPIO to detect SD */
;;;511      if (GPIO_ReadInputDataBit(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != Bit_RESET)
000e30  02c1              LSLS     r1,r0,#11
000e32  48a6              LDR      r0,|L1.4300|
000e34  f7fffffe          BL       GPIO_ReadInputDataBit
000e38  b108              CBZ      r0,|L1.3646|
;;;512      {
;;;513        status = SD_NOT_PRESENT;
000e3a  2000              MOVS     r0,#0
000e3c  9000              STR      r0,[sp,#0]
                  |L1.3646|
;;;514      }
;;;515      return status;
000e3e  f89d0000          LDRB     r0,[sp,#0]
;;;516    }
000e42  bd08              POP      {r3,pc}
;;;517    
                          ENDP

                  SD_GetState PROC
;;;479      */
;;;480    SDCardState SD_GetState(void)
000e44  b508              PUSH     {r3,lr}
;;;481    {
;;;482      uint32_t resp1 = 0;
000e46  2000              MOVS     r0,#0
000e48  9000              STR      r0,[sp,#0]
;;;483      
;;;484      if(SD_Detect()== SD_PRESENT)
000e4a  f7fffffe          BL       SD_Detect
000e4e  2801              CMP      r0,#1
000e50  d10a              BNE      |L1.3688|
;;;485      {
;;;486        if (SD_SendStatus(&resp1) != SD_OK)
000e52  4668              MOV      r0,sp
000e54  f7fffffe          BL       SD_SendStatus
000e58  282a              CMP      r0,#0x2a
000e5a  d001              BEQ      |L1.3680|
;;;487        {
;;;488          return SD_CARD_ERROR;
000e5c  20ff              MOVS     r0,#0xff
                  |L1.3678|
;;;489        }
;;;490        else
;;;491        {
;;;492          return (SDCardState)((resp1 >> 9) & 0x0F);
;;;493        }
;;;494      }
;;;495      else
;;;496      {
;;;497        return SD_CARD_ERROR;
;;;498      }
;;;499    }
000e5e  bd08              POP      {r3,pc}
                  |L1.3680|
000e60  9800              LDR      r0,[sp,#0]            ;492
000e62  f3c02043          UBFX     r0,r0,#9,#4           ;492
000e66  e7fa              B        |L1.3678|
                  |L1.3688|
000e68  20ff              MOVS     r0,#0xff              ;497
000e6a  e7f8              B        |L1.3678|
;;;500    
                          ENDP

                  SD_GetStatus PROC
;;;454      */
;;;455    SDTransferState SD_GetStatus(void)
000e6c  b510              PUSH     {r4,lr}
;;;456    {
;;;457      SDCardState cardstate =  SD_CARD_TRANSFER;
000e6e  2404              MOVS     r4,#4
;;;458    
;;;459      cardstate = SD_GetState();
000e70  f7fffffe          BL       SD_GetState
000e74  4604              MOV      r4,r0
;;;460      
;;;461      if (cardstate == SD_CARD_TRANSFER)
000e76  2c04              CMP      r4,#4
000e78  d101              BNE      |L1.3710|
;;;462      {
;;;463        return(SD_TRANSFER_OK);
000e7a  2000              MOVS     r0,#0
                  |L1.3708|
;;;464      }
;;;465      else if(cardstate == SD_CARD_ERROR)
;;;466      {
;;;467        return (SD_TRANSFER_ERROR);
;;;468      }
;;;469      else
;;;470      {
;;;471        return(SD_TRANSFER_BUSY);
;;;472      }
;;;473    }
000e7c  bd10              POP      {r4,pc}
                  |L1.3710|
000e7e  2cff              CMP      r4,#0xff              ;465
000e80  d101              BNE      |L1.3718|
000e82  2002              MOVS     r0,#2                 ;467
000e84  e7fa              B        |L1.3708|
                  |L1.3718|
000e86  2001              MOVS     r0,#1                 ;471
000e88  e7f8              B        |L1.3708|
;;;474    
                          ENDP

                  SD_PowerOFF PROC
;;;666      */
;;;667    SD_Error SD_PowerOFF(void)
000e8a  b510              PUSH     {r4,lr}
;;;668    {
;;;669      SD_Error errorstatus = SD_OK;
000e8c  242a              MOVS     r4,#0x2a
;;;670    
;;;671      /*!< Set Power State to OFF */
;;;672      SDIO_SetPowerState(SDIO_PowerState_OFF);
000e8e  2000              MOVS     r0,#0
000e90  f7fffffe          BL       SDIO_SetPowerState
;;;673    
;;;674      return(errorstatus);
000e94  4620              MOV      r0,r4
;;;675    }
000e96  bd10              POP      {r4,pc}
;;;676    
                          ENDP

                  convert_from_bytes_to_power_of_two PROC
;;;3120     */
;;;3121   static uint8_t convert_from_bytes_to_power_of_two(uint16_t NumberOfBytes)
000e98  4601              MOV      r1,r0
;;;3122   {
;;;3123     uint8_t count = 0;
000e9a  2000              MOVS     r0,#0
;;;3124   
;;;3125     while (NumberOfBytes != 1)
000e9c  e002              B        |L1.3748|
                  |L1.3742|
;;;3126     {
;;;3127       NumberOfBytes >>= 1;
000e9e  1049              ASRS     r1,r1,#1
;;;3128       count++;
000ea0  1c42              ADDS     r2,r0,#1
000ea2  b2d0              UXTB     r0,r2
                  |L1.3748|
000ea4  2901              CMP      r1,#1                 ;3125
000ea6  d1fa              BNE      |L1.3742|
;;;3129     }
;;;3130     return(count);
;;;3131   }
000ea8  4770              BX       lr
;;;3132   
                          ENDP

                  SD_ReadBlock PROC
;;;1091     */
;;;1092   SD_Error SD_ReadBlock(uint32_t *readbuff, uint32_t ReadAddr, uint16_t BlockSize)
000eaa  e92d47f0          PUSH     {r4-r10,lr}
;;;1093   {
000eae  4606              MOV      r6,r0
000eb0  460f              MOV      r7,r1
000eb2  4614              MOV      r4,r2
;;;1094     SD_Error errorstatus = SD_OK;
000eb4  f04f082a          MOV      r8,#0x2a
;;;1095     uint32_t count = 0, *tempbuff = (uint32_t *)readbuff;
000eb8  f04f0900          MOV      r9,#0
000ebc  4635              MOV      r5,r6
;;;1096     uint8_t power = 0;
000ebe  f04f0a00          MOV      r10,#0
;;;1097   
;;;1098     if (NULL == readbuff)
000ec2  b926              CBNZ     r6,|L1.3790|
;;;1099     {
;;;1100       errorstatus = SD_INVALID_PARAMETER;
000ec4  f04f0826          MOV      r8,#0x26
;;;1101       return(errorstatus);
000ec8  4640              MOV      r0,r8
                  |L1.3786|
;;;1102     }
;;;1103   
;;;1104     TransferError = SD_OK;
;;;1105     TransferEnd = 0;
;;;1106     TotalNumberOfBytes = 0;
;;;1107   
;;;1108     /*!< Clear all DPSM configuration */
;;;1109     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1110     SDIO_DataInitStructure.SDIO_DataLength = 0;
;;;1111     SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
;;;1112     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
;;;1113     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1114     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
;;;1115     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1116     SDIO_DMACmd(DISABLE);
;;;1117   
;;;1118     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
;;;1119     {
;;;1120       errorstatus = SD_LOCK_UNLOCK_FAILED;
;;;1121       return(errorstatus);
;;;1122     }
;;;1123     
;;;1124     if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
;;;1125     {
;;;1126       BlockSize = 512;
;;;1127       ReadAddr /= 512;
;;;1128     }
;;;1129     if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
;;;1130     {
;;;1131       power = convert_from_bytes_to_power_of_two(BlockSize);
;;;1132   
;;;1133       /*!< Set Block Size for Card */
;;;1134       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
;;;1135       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
;;;1136       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1137       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1138       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1139       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1140   
;;;1141       errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
;;;1142   
;;;1143       if (SD_OK != errorstatus)
;;;1144       {
;;;1145         return(errorstatus);
;;;1146       }
;;;1147     }
;;;1148     else
;;;1149     {
;;;1150       errorstatus = SD_INVALID_PARAMETER;
;;;1151       return(errorstatus);
;;;1152     }
;;;1153   
;;;1154     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1155     SDIO_DataInitStructure.SDIO_DataLength = BlockSize;
;;;1156     SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
;;;1157     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
;;;1158     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1159     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;1160     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1161   
;;;1162     TotalNumberOfBytes = BlockSize;
;;;1163     StopCondition = 0;
;;;1164     DestBuffer = (uint32_t *)readbuff;
;;;1165   
;;;1166     /*!< Send CMD17 READ_SINGLE_BLOCK */
;;;1167     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)ReadAddr;
;;;1168     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_READ_SINGLE_BLOCK;
;;;1169     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1170     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1171     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1172     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1173   
;;;1174     errorstatus = CmdResp1Error(SD_CMD_READ_SINGLE_BLOCK);
;;;1175   
;;;1176     if (errorstatus != SD_OK)
;;;1177     {
;;;1178       return(errorstatus);
;;;1179     }
;;;1180     /*!< In case of single block transfer, no need of stop transfer at all.*/
;;;1181     if (DeviceMode == SD_POLLING_MODE)
;;;1182     {
;;;1183       /*!< Polling mode */
;;;1184       while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
;;;1185       {
;;;1186         if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
;;;1187         {
;;;1188           for (count = 0; count < 8; count++)
;;;1189           {
;;;1190             *(tempbuff + count) = SDIO_ReadData();
;;;1191           }
;;;1192           tempbuff += 8;
;;;1193         }
;;;1194       }
;;;1195   
;;;1196       if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;1197       {
;;;1198         SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;1199         errorstatus = SD_DATA_TIMEOUT;
;;;1200         return(errorstatus);
;;;1201       }
;;;1202       else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;1203       {
;;;1204         SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;1205         errorstatus = SD_DATA_CRC_FAIL;
;;;1206         return(errorstatus);
;;;1207       }
;;;1208       else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
;;;1209       {
;;;1210         SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
;;;1211         errorstatus = SD_RX_OVERRUN;
;;;1212         return(errorstatus);
;;;1213       }
;;;1214       else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;1215       {
;;;1216         SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;1217         errorstatus = SD_START_BIT_ERR;
;;;1218         return(errorstatus);
;;;1219       }
;;;1220       while (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
;;;1221       {
;;;1222         *tempbuff = SDIO_ReadData();
;;;1223         tempbuff++;
;;;1224       }
;;;1225   
;;;1226       /*!< Clear all the static flags */
;;;1227       SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;1228     }
;;;1229     else if (DeviceMode == SD_INTERRUPT_MODE)
;;;1230     {
;;;1231       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR, ENABLE);
;;;1232       while ((TransferEnd == 0) && (TransferError == SD_OK))
;;;1233       {}
;;;1234       if (TransferError != SD_OK)
;;;1235       {
;;;1236         return(TransferError);
;;;1237       }
;;;1238     }
;;;1239     else if (DeviceMode == SD_DMA_MODE)
;;;1240     {
;;;1241       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_STBITERR, ENABLE);
;;;1242       SDIO_DMACmd(ENABLE);
;;;1243       SD_LowLevel_DMA_RxConfig((uint32_t *)readbuff, BlockSize);
;;;1244       while ((SD_DMAEndOfTransferStatus() == RESET) && (TransferEnd == 0) && (TransferError == SD_OK))
;;;1245       {}
;;;1246       if (TransferError != SD_OK)
;;;1247       {
;;;1248         return(TransferError);
;;;1249       }
;;;1250     }
;;;1251     return(errorstatus);
;;;1252   }
000eca  e8bd87f0          POP      {r4-r10,pc}
                  |L1.3790|
000ece  202a              MOVS     r0,#0x2a              ;1104
000ed0  497f              LDR      r1,|L1.4304|
000ed2  7008              STRB     r0,[r1,#0]            ;1104
000ed4  2000              MOVS     r0,#0                 ;1105
000ed6  497f              LDR      r1,|L1.4308|
000ed8  6008              STR      r0,[r1,#0]            ;1105  ; TransferEnd
000eda  497f              LDR      r1,|L1.4312|
000edc  6008              STR      r0,[r1,#0]            ;1106  ; TotalNumberOfBytes
000ede  487f              LDR      r0,|L1.4316|
000ee0  497f              LDR      r1,|L1.4320|
000ee2  6008              STR      r0,[r1,#0]            ;1109  ; SDIO_DataInitStructure
000ee4  2000              MOVS     r0,#0                 ;1110
000ee6  6048              STR      r0,[r1,#4]            ;1110  ; SDIO_DataInitStructure
000ee8  6088              STR      r0,[r1,#8]            ;1111  ; SDIO_DataInitStructure
000eea  60c8              STR      r0,[r1,#0xc]          ;1112  ; SDIO_DataInitStructure
000eec  6108              STR      r0,[r1,#0x10]         ;1113  ; SDIO_DataInitStructure
000eee  6148              STR      r0,[r1,#0x14]         ;1114  ; SDIO_DataInitStructure
000ef0  4608              MOV      r0,r1                 ;1115
000ef2  f7fffffe          BL       SDIO_DataConfig
000ef6  2000              MOVS     r0,#0                 ;1116
000ef8  f7fffffe          BL       SDIO_DMACmd
000efc  2000              MOVS     r0,#0                 ;1118
000efe  f7fffffe          BL       SDIO_GetResponse
000f02  f0007000          AND      r0,r0,#0x2000000      ;1118
000f06  b118              CBZ      r0,|L1.3856|
000f08  f04f080e          MOV      r8,#0xe               ;1120
000f0c  4640              MOV      r0,r8                 ;1121
000f0e  e7dc              B        |L1.3786|
                  |L1.3856|
000f10  486a              LDR      r0,|L1.4284|
000f12  6800              LDR      r0,[r0,#0]            ;1124  ; CardType
000f14  2802              CMP      r0,#2                 ;1124
000f16  d101              BNE      |L1.3868|
000f18  0204              LSLS     r4,r0,#8              ;1126
000f1a  0a7f              LSRS     r7,r7,#9              ;1127
                  |L1.3868|
000f1c  2c00              CMP      r4,#0                 ;1129
000f1e  dd21              BLE      |L1.3940|
000f20  f5b46f00          CMP      r4,#0x800             ;1129
000f24  dc1e              BGT      |L1.3940|
000f26  1e60              SUBS     r0,r4,#1              ;1129
000f28  4020              ANDS     r0,r0,r4              ;1129
000f2a  b9d8              CBNZ     r0,|L1.3940|
000f2c  4620              MOV      r0,r4                 ;1131
000f2e  f7fffffe          BL       convert_from_bytes_to_power_of_two
000f32  4682              MOV      r10,r0                ;1131
000f34  485f              LDR      r0,|L1.4276|
000f36  6004              STR      r4,[r0,#0]            ;1134  ; SDIO_CmdInitStructure
000f38  2010              MOVS     r0,#0x10              ;1135
000f3a  495e              LDR      r1,|L1.4276|
000f3c  6048              STR      r0,[r1,#4]            ;1135  ; SDIO_CmdInitStructure
000f3e  2040              MOVS     r0,#0x40              ;1136
000f40  6088              STR      r0,[r1,#8]            ;1136  ; SDIO_CmdInitStructure
000f42  2000              MOVS     r0,#0                 ;1137
000f44  60c8              STR      r0,[r1,#0xc]          ;1137  ; SDIO_CmdInitStructure
000f46  f44f6080          MOV      r0,#0x400             ;1138
000f4a  6108              STR      r0,[r1,#0x10]         ;1138  ; SDIO_CmdInitStructure
000f4c  4608              MOV      r0,r1                 ;1139
000f4e  f7fffffe          BL       SDIO_SendCommand
000f52  2010              MOVS     r0,#0x10              ;1141
000f54  f7fffffe          BL       CmdResp1Error
000f58  4680              MOV      r8,r0                 ;1141
000f5a  f1b80f2a          CMP      r8,#0x2a              ;1143
000f5e  d005              BEQ      |L1.3948|
000f60  4640              MOV      r0,r8                 ;1145
000f62  e7b2              B        |L1.3786|
                  |L1.3940|
000f64  f04f0826          MOV      r8,#0x26              ;1150
000f68  4640              MOV      r0,r8                 ;1151
000f6a  e7ae              B        |L1.3786|
                  |L1.3948|
000f6c  485b              LDR      r0,|L1.4316|
000f6e  495c              LDR      r1,|L1.4320|
000f70  6008              STR      r0,[r1,#0]            ;1154  ; SDIO_DataInitStructure
000f72  4608              MOV      r0,r1                 ;1155
000f74  6044              STR      r4,[r0,#4]            ;1155  ; SDIO_DataInitStructure
000f76  ea4f100a          LSL      r0,r10,#4             ;1156
000f7a  6088              STR      r0,[r1,#8]            ;1156  ; SDIO_DataInitStructure
000f7c  2002              MOVS     r0,#2                 ;1157
000f7e  60c8              STR      r0,[r1,#0xc]          ;1157  ; SDIO_DataInitStructure
000f80  2000              MOVS     r0,#0                 ;1158
000f82  6108              STR      r0,[r1,#0x10]         ;1158  ; SDIO_DataInitStructure
000f84  2001              MOVS     r0,#1                 ;1159
000f86  6148              STR      r0,[r1,#0x14]         ;1159  ; SDIO_DataInitStructure
000f88  4608              MOV      r0,r1                 ;1160
000f8a  f7fffffe          BL       SDIO_DataConfig
000f8e  4852              LDR      r0,|L1.4312|
000f90  6004              STR      r4,[r0,#0]            ;1162  ; TotalNumberOfBytes
000f92  2000              MOVS     r0,#0                 ;1163
000f94  4953              LDR      r1,|L1.4324|
000f96  6008              STR      r0,[r1,#0]            ;1163  ; StopCondition
000f98  4853              LDR      r0,|L1.4328|
000f9a  6006              STR      r6,[r0,#0]            ;1164  ; DestBuffer
000f9c  4845              LDR      r0,|L1.4276|
000f9e  6007              STR      r7,[r0,#0]            ;1167  ; SDIO_CmdInitStructure
000fa0  2011              MOVS     r0,#0x11              ;1168
000fa2  4944              LDR      r1,|L1.4276|
000fa4  6048              STR      r0,[r1,#4]            ;1168  ; SDIO_CmdInitStructure
000fa6  2040              MOVS     r0,#0x40              ;1169
000fa8  6088              STR      r0,[r1,#8]            ;1169  ; SDIO_CmdInitStructure
000faa  2000              MOVS     r0,#0                 ;1170
000fac  60c8              STR      r0,[r1,#0xc]          ;1170  ; SDIO_CmdInitStructure
000fae  f44f6080          MOV      r0,#0x400             ;1171
000fb2  6108              STR      r0,[r1,#0x10]         ;1171  ; SDIO_CmdInitStructure
000fb4  4608              MOV      r0,r1                 ;1172
000fb6  f7fffffe          BL       SDIO_SendCommand
000fba  2011              MOVS     r0,#0x11              ;1174
000fbc  f7fffffe          BL       CmdResp1Error
000fc0  4680              MOV      r8,r0                 ;1174
000fc2  f1b80f2a          CMP      r8,#0x2a              ;1176
000fc6  d001              BEQ      |L1.4044|
000fc8  4640              MOV      r0,r8                 ;1178
000fca  e77e              B        |L1.3786|
                  |L1.4044|
000fcc  4847              LDR      r0,|L1.4332|
000fce  6800              LDR      r0,[r0,#0]            ;1181  ; DeviceMode
000fd0  2802              CMP      r0,#2                 ;1181
000fd2  d157              BNE      |L1.4228|
000fd4  e011              B        |L1.4090|
                  |L1.4054|
000fd6  f44f4000          MOV      r0,#0x8000            ;1186
000fda  f7fffffe          BL       SDIO_GetFlagStatus
000fde  b160              CBZ      r0,|L1.4090|
000fe0  f04f0900          MOV      r9,#0                 ;1188
000fe4  e005              B        |L1.4082|
                  |L1.4070|
000fe6  f7fffffe          BL       SDIO_ReadData
000fea  f8450029          STR      r0,[r5,r9,LSL #2]     ;1190
000fee  f1090901          ADD      r9,r9,#1              ;1188
                  |L1.4082|
000ff2  f1b90f08          CMP      r9,#8                 ;1188
000ff6  d3f6              BCC      |L1.4070|
000ff8  3520              ADDS     r5,r5,#0x20           ;1192
                  |L1.4090|
000ffa  483d              LDR      r0,|L1.4336|
000ffc  6b40              LDR      r0,[r0,#0x34]         ;1184
000ffe  f240612a          MOV      r1,#0x62a             ;1184
001002  4008              ANDS     r0,r0,r1              ;1184
001004  2800              CMP      r0,#0                 ;1184
001006  d0e6              BEQ      |L1.4054|
001008  2008              MOVS     r0,#8                 ;1196
00100a  f7fffffe          BL       SDIO_GetFlagStatus
00100e  b130              CBZ      r0,|L1.4126|
001010  2008              MOVS     r0,#8                 ;1198
001012  f7fffffe          BL       SDIO_ClearFlag
001016  f04f0804          MOV      r8,#4                 ;1199
00101a  4640              MOV      r0,r8                 ;1200
00101c  e755              B        |L1.3786|
                  |L1.4126|
00101e  2002              MOVS     r0,#2                 ;1202
001020  f7fffffe          BL       SDIO_GetFlagStatus
001024  b130              CBZ      r0,|L1.4148|
001026  2002              MOVS     r0,#2                 ;1204
001028  f7fffffe          BL       SDIO_ClearFlag
00102c  f04f0802          MOV      r8,#2                 ;1205
001030  4640              MOV      r0,r8                 ;1206
001032  e74a              B        |L1.3786|
                  |L1.4148|
001034  2020              MOVS     r0,#0x20              ;1208
001036  f7fffffe          BL       SDIO_GetFlagStatus
00103a  b130              CBZ      r0,|L1.4170|
00103c  2020              MOVS     r0,#0x20              ;1210
00103e  f7fffffe          BL       SDIO_ClearFlag
001042  f04f0806          MOV      r8,#6                 ;1211
001046  4640              MOV      r0,r8                 ;1212
001048  e73f              B        |L1.3786|
                  |L1.4170|
00104a  f44f7000          MOV      r0,#0x200             ;1214
00104e  f7fffffe          BL       SDIO_GetFlagStatus
001052  b138              CBZ      r0,|L1.4196|
001054  f44f7000          MOV      r0,#0x200             ;1216
001058  f7fffffe          BL       SDIO_ClearFlag
00105c  f04f0807          MOV      r8,#7                 ;1217
001060  4640              MOV      r0,r8                 ;1218
001062  e732              B        |L1.3786|
                  |L1.4196|
001064  e003              B        |L1.4206|
                  |L1.4198|
001066  f7fffffe          BL       SDIO_ReadData
00106a  6028              STR      r0,[r5,#0]            ;1222
00106c  1d2d              ADDS     r5,r5,#4              ;1223
                  |L1.4206|
00106e  f44f1000          MOV      r0,#0x200000          ;1220
001072  f7fffffe          BL       SDIO_GetFlagStatus
001076  2800              CMP      r0,#0                 ;1220
001078  d1f5              BNE      |L1.4198|
00107a  f24050ff          MOV      r0,#0x5ff             ;1227
00107e  f7fffffe          BL       SDIO_ClearFlag
001082  e058              B        |L1.4406|
                  |L1.4228|
001084  4819              LDR      r0,|L1.4332|
001086  6800              LDR      r0,[r0,#0]            ;1229  ; DeviceMode
001088  2801              CMP      r0,#1                 ;1229
00108a  d133              BNE      |L1.4340|
00108c  2101              MOVS     r1,#1                 ;1231
00108e  f248302a          MOV      r0,#0x832a            ;1231
001092  f7fffffe          BL       SDIO_ITConfig
001096  bf00              NOP                            ;1232
                  |L1.4248|
001098  480e              LDR      r0,|L1.4308|
00109a  6800              LDR      r0,[r0,#0]            ;1232  ; TransferEnd
00109c  b918              CBNZ     r0,|L1.4262|
00109e  480c              LDR      r0,|L1.4304|
0010a0  7800              LDRB     r0,[r0,#0]            ;1232  ; TransferError
0010a2  282a              CMP      r0,#0x2a              ;1232
0010a4  d0f8              BEQ      |L1.4248|
                  |L1.4262|
0010a6  480a              LDR      r0,|L1.4304|
0010a8  7800              LDRB     r0,[r0,#0]            ;1234  ; TransferError
0010aa  282a              CMP      r0,#0x2a              ;1234
0010ac  d043              BEQ      |L1.4406|
0010ae  4808              LDR      r0,|L1.4304|
0010b0  7800              LDRB     r0,[r0,#0]            ;1236  ; TransferError
0010b2  e70a              B        |L1.3786|
                  |L1.4276|
                          DCD      SDIO_CmdInitStructure
                  |L1.4280|
                          DCD      0x80100000
                  |L1.4284|
                          DCD      CardType
                  |L1.4288|
                          DCD      SDIO_InitStructure
                  |L1.4292|
                          DCD      SDCardInfo
                  |L1.4296|
                          DCD      ||RCA||
                  |L1.4300|
                          DCD      0x40011c00
                  |L1.4304|
                          DCD      TransferError
                  |L1.4308|
                          DCD      TransferEnd
                  |L1.4312|
                          DCD      TotalNumberOfBytes
                  |L1.4316|
                          DCD      0x000fffff
                  |L1.4320|
                          DCD      SDIO_DataInitStructure
                  |L1.4324|
                          DCD      StopCondition
                  |L1.4328|
                          DCD      DestBuffer
                  |L1.4332|
                          DCD      DeviceMode
                  |L1.4336|
                          DCD      0x40018000
                  |L1.4340|
0010f4  48f8              LDR      r0,|L1.5336|
0010f6  6800              LDR      r0,[r0,#0]            ;1239  ; DeviceMode
0010f8  b9e8              CBNZ     r0,|L1.4406|
0010fa  2101              MOVS     r1,#1                 ;1241
0010fc  f240302a          MOV      r0,#0x32a             ;1241
001100  f7fffffe          BL       SDIO_ITConfig
001104  2001              MOVS     r0,#1                 ;1242
001106  f7fffffe          BL       SDIO_DMACmd
00110a  4621              MOV      r1,r4                 ;1243
00110c  4630              MOV      r0,r6                 ;1243
00110e  f7fffffe          BL       SD_LowLevel_DMA_RxConfig
001112  bf00              NOP                            ;1244
                  |L1.4372|
001114  f7fffffe          BL       SD_DMAEndOfTransferStatus
001118  b930              CBNZ     r0,|L1.4392|
00111a  48f0              LDR      r0,|L1.5340|
00111c  6800              LDR      r0,[r0,#0]            ;1244  ; TransferEnd
00111e  b918              CBNZ     r0,|L1.4392|
001120  48ef              LDR      r0,|L1.5344|
001122  7800              LDRB     r0,[r0,#0]            ;1244  ; TransferError
001124  282a              CMP      r0,#0x2a              ;1244
001126  d0f5              BEQ      |L1.4372|
                  |L1.4392|
001128  48ed              LDR      r0,|L1.5344|
00112a  7800              LDRB     r0,[r0,#0]            ;1246  ; TransferError
00112c  282a              CMP      r0,#0x2a              ;1246
00112e  d002              BEQ      |L1.4406|
001130  48eb              LDR      r0,|L1.5344|
001132  7800              LDRB     r0,[r0,#0]            ;1248  ; TransferError
001134  e6c9              B        |L1.3786|
                  |L1.4406|
001136  4640              MOV      r0,r8                 ;1251
001138  e6c7              B        |L1.3786|
;;;1253   
                          ENDP

                  SD_ReadMultiBlocks PROC
;;;1261     */
;;;1262   SD_Error SD_ReadMultiBlocks(uint8_t *readbuff, uint32_t ReadAddr, uint16_t BlockSize, uint32_t NumberOfBlocks)
00113a  e92d5ff0          PUSH     {r4-r12,lr}
;;;1263   {
00113e  4607              MOV      r7,r0
001140  4689              MOV      r9,r1
001142  4614              MOV      r4,r2
001144  461d              MOV      r5,r3
;;;1264     SD_Error errorstatus = SD_OK;
001146  f04f082a          MOV      r8,#0x2a
;;;1265     uint32_t count = 0, *tempbuff = (uint32_t *)readbuff;
00114a  f04f0a00          MOV      r10,#0
00114e  463e              MOV      r6,r7
;;;1266     uint8_t power = 0;
001150  f04f0b00          MOV      r11,#0
;;;1267   
;;;1268     if (NULL == readbuff)
001154  b927              CBNZ     r7,|L1.4448|
;;;1269     {
;;;1270       errorstatus = SD_INVALID_PARAMETER;
001156  f04f0826          MOV      r8,#0x26
;;;1271       return(errorstatus);
00115a  4640              MOV      r0,r8
                  |L1.4444|
;;;1272     }
;;;1273   
;;;1274     TransferError = SD_OK;
;;;1275     TransferEnd = 0;
;;;1276     TotalNumberOfBytes = 0;
;;;1277   
;;;1278     /*!< Clear all DPSM configuration */
;;;1279     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1280     SDIO_DataInitStructure.SDIO_DataLength = 0;
;;;1281     SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
;;;1282     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
;;;1283     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1284     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
;;;1285     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1286     SDIO_DMACmd(DISABLE);
;;;1287   
;;;1288     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
;;;1289     {
;;;1290       errorstatus = SD_LOCK_UNLOCK_FAILED;
;;;1291       return(errorstatus);
;;;1292     }
;;;1293   
;;;1294     if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
;;;1295     {
;;;1296       BlockSize = 512;
;;;1297       ReadAddr /= 512;
;;;1298     }
;;;1299     
;;;1300     if ((BlockSize > 0) && (BlockSize <= 2048) && (0 == (BlockSize & (BlockSize - 1))))
;;;1301     {
;;;1302       power = convert_from_bytes_to_power_of_two(BlockSize);
;;;1303   
;;;1304       /*!< Set Block Size for Card */
;;;1305       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
;;;1306       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
;;;1307       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1308       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1309       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1310       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1311   
;;;1312       errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
;;;1313   
;;;1314       if (SD_OK != errorstatus)
;;;1315       {
;;;1316         return(errorstatus);
;;;1317       }
;;;1318     }
;;;1319     else
;;;1320     {
;;;1321       errorstatus = SD_INVALID_PARAMETER;
;;;1322       return(errorstatus);
;;;1323     }
;;;1324   
;;;1325     if (NumberOfBlocks > 1)
;;;1326     {
;;;1327       /*!< Common to all modes */
;;;1328       if (NumberOfBlocks * BlockSize > SD_MAX_DATA_LENGTH)
;;;1329       {
;;;1330         errorstatus = SD_INVALID_PARAMETER;
;;;1331         return(errorstatus);
;;;1332       }
;;;1333   
;;;1334       TotalNumberOfBytes = NumberOfBlocks * BlockSize;
;;;1335       StopCondition = 1;
;;;1336       DestBuffer = (uint32_t *)readbuff;
;;;1337   
;;;1338       SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1339       SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
;;;1340       SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
;;;1341       SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
;;;1342       SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1343       SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;1344       SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1345   
;;;1346       /*!< Send CMD18 READ_MULT_BLOCK with argument data address */
;;;1347       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)ReadAddr;
;;;1348       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_READ_MULT_BLOCK;
;;;1349       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1350       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1351       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1352       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1353   
;;;1354       errorstatus = CmdResp1Error(SD_CMD_READ_MULT_BLOCK);
;;;1355   
;;;1356       if (errorstatus != SD_OK)
;;;1357       {
;;;1358         return(errorstatus);
;;;1359       }
;;;1360   
;;;1361       if (DeviceMode == SD_POLLING_MODE)
;;;1362       {
;;;1363         /*!< Polling mode */
;;;1364         while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DATAEND | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_STBITERR)))
;;;1365         {
;;;1366           if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
;;;1367           {
;;;1368             for (count = 0; count < SD_HALFFIFO; count++)
;;;1369             {
;;;1370               *(tempbuff + count) = SDIO_ReadData();
;;;1371             }
;;;1372             tempbuff += SD_HALFFIFO;
;;;1373           }
;;;1374         }
;;;1375   
;;;1376         if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;1377         {
;;;1378           SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;1379           errorstatus = SD_DATA_TIMEOUT;
;;;1380           return(errorstatus);
;;;1381         }
;;;1382         else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;1383         {
;;;1384           SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;1385           errorstatus = SD_DATA_CRC_FAIL;
;;;1386           return(errorstatus);
;;;1387         }
;;;1388         else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
;;;1389         {
;;;1390           SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
;;;1391           errorstatus = SD_RX_OVERRUN;
;;;1392           return(errorstatus);
;;;1393         }
;;;1394         else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;1395         {
;;;1396           SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;1397           errorstatus = SD_START_BIT_ERR;
;;;1398           return(errorstatus);
;;;1399         }
;;;1400         while (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
;;;1401         {
;;;1402           *tempbuff = SDIO_ReadData();
;;;1403           tempbuff++;
;;;1404         }
;;;1405   
;;;1406         if (SDIO_GetFlagStatus(SDIO_FLAG_DATAEND) != RESET)
;;;1407         {
;;;1408           /*!< In Case Of SD-CARD Send Command STOP_TRANSMISSION */
;;;1409           if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType))
;;;1410           {
;;;1411             /*!< Send CMD12 STOP_TRANSMISSION */
;;;1412             SDIO_CmdInitStructure.SDIO_Argument = 0x0;
;;;1413             SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_STOP_TRANSMISSION;
;;;1414             SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1415             SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1416             SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1417             SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1418   
;;;1419             errorstatus = CmdResp1Error(SD_CMD_STOP_TRANSMISSION);
;;;1420   
;;;1421             if (errorstatus != SD_OK)
;;;1422             {
;;;1423               return(errorstatus);
;;;1424             }
;;;1425           }
;;;1426         }
;;;1427         /*!< Clear all the static flags */
;;;1428         SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;1429       }
;;;1430       else if (DeviceMode == SD_INTERRUPT_MODE)
;;;1431       {
;;;1432         SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR, ENABLE);
;;;1433         while ((TransferEnd == 0) && (TransferError == SD_OK))
;;;1434         {}
;;;1435         if (TransferError != SD_OK)
;;;1436         {
;;;1437           return(TransferError);
;;;1438         }
;;;1439       }
;;;1440       else if (DeviceMode == SD_DMA_MODE)
;;;1441       {
;;;1442         SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_STBITERR, ENABLE);
;;;1443         SDIO_DMACmd(ENABLE);
;;;1444         SD_LowLevel_DMA_RxConfig((uint32_t *)readbuff, (NumberOfBlocks * BlockSize));
;;;1445         while ((SD_DMAEndOfTransferStatus() == RESET) && (TransferEnd == 0) && (TransferError == SD_OK))
;;;1446         {}
;;;1447         if (TransferError != SD_OK)
;;;1448         {
;;;1449           return(TransferError);
;;;1450         }
;;;1451       }
;;;1452     }
;;;1453     return(errorstatus);
;;;1454   }
00115c  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.4448|
001160  202a              MOVS     r0,#0x2a              ;1274
001162  49df              LDR      r1,|L1.5344|
001164  7008              STRB     r0,[r1,#0]            ;1274
001166  2000              MOVS     r0,#0                 ;1275
001168  49dc              LDR      r1,|L1.5340|
00116a  6008              STR      r0,[r1,#0]            ;1275  ; TransferEnd
00116c  49dd              LDR      r1,|L1.5348|
00116e  6008              STR      r0,[r1,#0]            ;1276  ; TotalNumberOfBytes
001170  48dd              LDR      r0,|L1.5352|
001172  49de              LDR      r1,|L1.5356|
001174  6008              STR      r0,[r1,#0]            ;1279  ; SDIO_DataInitStructure
001176  2000              MOVS     r0,#0                 ;1280
001178  6048              STR      r0,[r1,#4]            ;1280  ; SDIO_DataInitStructure
00117a  6088              STR      r0,[r1,#8]            ;1281  ; SDIO_DataInitStructure
00117c  60c8              STR      r0,[r1,#0xc]          ;1282  ; SDIO_DataInitStructure
00117e  6108              STR      r0,[r1,#0x10]         ;1283  ; SDIO_DataInitStructure
001180  6148              STR      r0,[r1,#0x14]         ;1284  ; SDIO_DataInitStructure
001182  4608              MOV      r0,r1                 ;1285
001184  f7fffffe          BL       SDIO_DataConfig
001188  2000              MOVS     r0,#0                 ;1286
00118a  f7fffffe          BL       SDIO_DMACmd
00118e  2000              MOVS     r0,#0                 ;1288
001190  f7fffffe          BL       SDIO_GetResponse
001194  f0007000          AND      r0,r0,#0x2000000      ;1288
001198  b118              CBZ      r0,|L1.4514|
00119a  f04f080e          MOV      r8,#0xe               ;1290
00119e  4640              MOV      r0,r8                 ;1291
0011a0  e7dc              B        |L1.4444|
                  |L1.4514|
0011a2  48d3              LDR      r0,|L1.5360|
0011a4  6800              LDR      r0,[r0,#0]            ;1294  ; CardType
0011a6  2802              CMP      r0,#2                 ;1294
0011a8  d102              BNE      |L1.4528|
0011aa  0204              LSLS     r4,r0,#8              ;1296
0011ac  ea4f2959          LSR      r9,r9,#9              ;1297
                  |L1.4528|
0011b0  2c00              CMP      r4,#0                 ;1300
0011b2  dd21              BLE      |L1.4600|
0011b4  f5b46f00          CMP      r4,#0x800             ;1300
0011b8  dc1e              BGT      |L1.4600|
0011ba  1e60              SUBS     r0,r4,#1              ;1300
0011bc  4020              ANDS     r0,r0,r4              ;1300
0011be  b9d8              CBNZ     r0,|L1.4600|
0011c0  4620              MOV      r0,r4                 ;1302
0011c2  f7fffffe          BL       convert_from_bytes_to_power_of_two
0011c6  4683              MOV      r11,r0                ;1302
0011c8  48ca              LDR      r0,|L1.5364|
0011ca  6004              STR      r4,[r0,#0]            ;1305  ; SDIO_CmdInitStructure
0011cc  2010              MOVS     r0,#0x10              ;1306
0011ce  49c9              LDR      r1,|L1.5364|
0011d0  6048              STR      r0,[r1,#4]            ;1306  ; SDIO_CmdInitStructure
0011d2  2040              MOVS     r0,#0x40              ;1307
0011d4  6088              STR      r0,[r1,#8]            ;1307  ; SDIO_CmdInitStructure
0011d6  2000              MOVS     r0,#0                 ;1308
0011d8  60c8              STR      r0,[r1,#0xc]          ;1308  ; SDIO_CmdInitStructure
0011da  f44f6080          MOV      r0,#0x400             ;1309
0011de  6108              STR      r0,[r1,#0x10]         ;1309  ; SDIO_CmdInitStructure
0011e0  4608              MOV      r0,r1                 ;1310
0011e2  f7fffffe          BL       SDIO_SendCommand
0011e6  2010              MOVS     r0,#0x10              ;1312
0011e8  f7fffffe          BL       CmdResp1Error
0011ec  4680              MOV      r8,r0                 ;1312
0011ee  f1b80f2a          CMP      r8,#0x2a              ;1314
0011f2  d005              BEQ      |L1.4608|
0011f4  4640              MOV      r0,r8                 ;1316
0011f6  e7b1              B        |L1.4444|
                  |L1.4600|
0011f8  f04f0826          MOV      r8,#0x26              ;1321
0011fc  4640              MOV      r0,r8                 ;1322
0011fe  e7ad              B        |L1.4444|
                  |L1.4608|
001200  2d01              CMP      r5,#1                 ;1325
001202  d970              BLS      |L1.4838|
001204  fb05f004          MUL      r0,r5,r4              ;1328
001208  f1b07f00          CMP      r0,#0x2000000         ;1328
00120c  d303              BCC      |L1.4630|
00120e  f04f0826          MOV      r8,#0x26              ;1330
001212  4640              MOV      r0,r8                 ;1331
001214  e7a2              B        |L1.4444|
                  |L1.4630|
001216  fb05f004          MUL      r0,r5,r4              ;1334
00121a  49b2              LDR      r1,|L1.5348|
00121c  6008              STR      r0,[r1,#0]            ;1334  ; TotalNumberOfBytes
00121e  2001              MOVS     r0,#1                 ;1335
001220  49b5              LDR      r1,|L1.5368|
001222  6008              STR      r0,[r1,#0]            ;1335  ; StopCondition
001224  48b5              LDR      r0,|L1.5372|
001226  6007              STR      r7,[r0,#0]            ;1336  ; DestBuffer
001228  48af              LDR      r0,|L1.5352|
00122a  49b0              LDR      r1,|L1.5356|
00122c  6008              STR      r0,[r1,#0]            ;1338  ; SDIO_DataInitStructure
00122e  fb05f004          MUL      r0,r5,r4              ;1339
001232  6048              STR      r0,[r1,#4]            ;1339  ; SDIO_DataInitStructure
001234  ea4f100b          LSL      r0,r11,#4             ;1340
001238  6088              STR      r0,[r1,#8]            ;1340  ; SDIO_DataInitStructure
00123a  2002              MOVS     r0,#2                 ;1341
00123c  60c8              STR      r0,[r1,#0xc]          ;1341  ; SDIO_DataInitStructure
00123e  2000              MOVS     r0,#0                 ;1342
001240  6108              STR      r0,[r1,#0x10]         ;1342  ; SDIO_DataInitStructure
001242  2001              MOVS     r0,#1                 ;1343
001244  6148              STR      r0,[r1,#0x14]         ;1343  ; SDIO_DataInitStructure
001246  4608              MOV      r0,r1                 ;1344
001248  f7fffffe          BL       SDIO_DataConfig
00124c  48a9              LDR      r0,|L1.5364|
00124e  f8c09000          STR      r9,[r0,#0]            ;1347  ; SDIO_CmdInitStructure
001252  2012              MOVS     r0,#0x12              ;1348
001254  49a7              LDR      r1,|L1.5364|
001256  6048              STR      r0,[r1,#4]            ;1348  ; SDIO_CmdInitStructure
001258  2040              MOVS     r0,#0x40              ;1349
00125a  6088              STR      r0,[r1,#8]            ;1349  ; SDIO_CmdInitStructure
00125c  2000              MOVS     r0,#0                 ;1350
00125e  60c8              STR      r0,[r1,#0xc]          ;1350  ; SDIO_CmdInitStructure
001260  f44f6080          MOV      r0,#0x400             ;1351
001264  6108              STR      r0,[r1,#0x10]         ;1351  ; SDIO_CmdInitStructure
001266  4608              MOV      r0,r1                 ;1352
001268  f7fffffe          BL       SDIO_SendCommand
00126c  2012              MOVS     r0,#0x12              ;1354
00126e  f7fffffe          BL       CmdResp1Error
001272  4680              MOV      r8,r0                 ;1354
001274  f1b80f2a          CMP      r8,#0x2a              ;1356
001278  d001              BEQ      |L1.4734|
00127a  4640              MOV      r0,r8                 ;1358
00127c  e76e              B        |L1.4444|
                  |L1.4734|
00127e  4896              LDR      r0,|L1.5336|
001280  6800              LDR      r0,[r0,#0]            ;1361  ; DeviceMode
001282  2802              CMP      r0,#2                 ;1361
001284  d17b              BNE      |L1.4990|
001286  e011              B        |L1.4780|
                  |L1.4744|
001288  f44f4000          MOV      r0,#0x8000            ;1366
00128c  f7fffffe          BL       SDIO_GetFlagStatus
001290  b160              CBZ      r0,|L1.4780|
001292  f04f0a00          MOV      r10,#0                ;1368
001296  e005              B        |L1.4772|
                  |L1.4760|
001298  f7fffffe          BL       SDIO_ReadData
00129c  f846002a          STR      r0,[r6,r10,LSL #2]    ;1370
0012a0  f10a0a01          ADD      r10,r10,#1            ;1368
                  |L1.4772|
0012a4  f1ba0f08          CMP      r10,#8                ;1368
0012a8  d3f6              BCC      |L1.4760|
0012aa  3620              ADDS     r6,r6,#0x20           ;1372
                  |L1.4780|
0012ac  4894              LDR      r0,|L1.5376|
0012ae  6b40              LDR      r0,[r0,#0x34]         ;1364
0012b0  f240312a          MOV      r1,#0x32a             ;1364
0012b4  4008              ANDS     r0,r0,r1              ;1364
0012b6  2800              CMP      r0,#0                 ;1364
0012b8  d0e6              BEQ      |L1.4744|
0012ba  2008              MOVS     r0,#8                 ;1376
0012bc  f7fffffe          BL       SDIO_GetFlagStatus
0012c0  b130              CBZ      r0,|L1.4816|
0012c2  2008              MOVS     r0,#8                 ;1378
0012c4  f7fffffe          BL       SDIO_ClearFlag
0012c8  f04f0804          MOV      r8,#4                 ;1379
0012cc  4640              MOV      r0,r8                 ;1380
0012ce  e745              B        |L1.4444|
                  |L1.4816|
0012d0  2002              MOVS     r0,#2                 ;1382
0012d2  f7fffffe          BL       SDIO_GetFlagStatus
0012d6  b138              CBZ      r0,|L1.4840|
0012d8  2002              MOVS     r0,#2                 ;1384
0012da  f7fffffe          BL       SDIO_ClearFlag
0012de  f04f0802          MOV      r8,#2                 ;1385
0012e2  4640              MOV      r0,r8                 ;1386
0012e4  e73a              B        |L1.4444|
                  |L1.4838|
0012e6  e08a              B        |L1.5118|
                  |L1.4840|
0012e8  2020              MOVS     r0,#0x20              ;1388
0012ea  f7fffffe          BL       SDIO_GetFlagStatus
0012ee  b130              CBZ      r0,|L1.4862|
0012f0  2020              MOVS     r0,#0x20              ;1390
0012f2  f7fffffe          BL       SDIO_ClearFlag
0012f6  f04f0806          MOV      r8,#6                 ;1391
0012fa  4640              MOV      r0,r8                 ;1392
0012fc  e72e              B        |L1.4444|
                  |L1.4862|
0012fe  f44f7000          MOV      r0,#0x200             ;1394
001302  f7fffffe          BL       SDIO_GetFlagStatus
001306  b138              CBZ      r0,|L1.4888|
001308  f44f7000          MOV      r0,#0x200             ;1396
00130c  f7fffffe          BL       SDIO_ClearFlag
001310  f04f0807          MOV      r8,#7                 ;1397
001314  4640              MOV      r0,r8                 ;1398
001316  e721              B        |L1.4444|
                  |L1.4888|
001318  e003              B        |L1.4898|
                  |L1.4890|
00131a  f7fffffe          BL       SDIO_ReadData
00131e  6030              STR      r0,[r6,#0]            ;1402
001320  1d36              ADDS     r6,r6,#4              ;1403
                  |L1.4898|
001322  f44f1000          MOV      r0,#0x200000          ;1400
001326  f7fffffe          BL       SDIO_GetFlagStatus
00132a  2800              CMP      r0,#0                 ;1400
00132c  d1f5              BNE      |L1.4890|
00132e  f44f7080          MOV      r0,#0x100             ;1406
001332  f7fffffe          BL       SDIO_GetFlagStatus
001336  b318              CBZ      r0,|L1.4992|
001338  486d              LDR      r0,|L1.5360|
00133a  6800              LDR      r0,[r0,#0]            ;1409  ; CardType
00133c  b138              CBZ      r0,|L1.4942|
00133e  486c              LDR      r0,|L1.5360|
001340  6800              LDR      r0,[r0,#0]            ;1409  ; CardType
001342  2802              CMP      r0,#2                 ;1409
001344  d003              BEQ      |L1.4942|
001346  486a              LDR      r0,|L1.5360|
001348  6800              LDR      r0,[r0,#0]            ;1409  ; CardType
00134a  2801              CMP      r0,#1                 ;1409
00134c  d118              BNE      |L1.4992|
                  |L1.4942|
00134e  2000              MOVS     r0,#0                 ;1412
001350  4968              LDR      r1,|L1.5364|
001352  6008              STR      r0,[r1,#0]            ;1412  ; SDIO_CmdInitStructure
001354  200c              MOVS     r0,#0xc               ;1413
001356  6048              STR      r0,[r1,#4]            ;1413  ; SDIO_CmdInitStructure
001358  2040              MOVS     r0,#0x40              ;1414
00135a  6088              STR      r0,[r1,#8]            ;1414  ; SDIO_CmdInitStructure
00135c  2000              MOVS     r0,#0                 ;1415
00135e  60c8              STR      r0,[r1,#0xc]          ;1415  ; SDIO_CmdInitStructure
001360  f44f6080          MOV      r0,#0x400             ;1416
001364  6108              STR      r0,[r1,#0x10]         ;1416  ; SDIO_CmdInitStructure
001366  4608              MOV      r0,r1                 ;1417
001368  f7fffffe          BL       SDIO_SendCommand
00136c  200c              MOVS     r0,#0xc               ;1419
00136e  f7fffffe          BL       CmdResp1Error
001372  4680              MOV      r8,r0                 ;1419
001374  f1b80f2a          CMP      r8,#0x2a              ;1421
001378  d002              BEQ      |L1.4992|
00137a  4640              MOV      r0,r8                 ;1423
00137c  e6ee              B        |L1.4444|
                  |L1.4990|
00137e  e004              B        |L1.5002|
                  |L1.4992|
001380  f24050ff          MOV      r0,#0x5ff             ;1428
001384  f7fffffe          BL       SDIO_ClearFlag
001388  e039              B        |L1.5118|
                  |L1.5002|
00138a  4853              LDR      r0,|L1.5336|
00138c  6800              LDR      r0,[r0,#0]            ;1430  ; DeviceMode
00138e  2801              CMP      r0,#1                 ;1430
001390  d113              BNE      |L1.5050|
001392  2101              MOVS     r1,#1                 ;1432
001394  f248302a          MOV      r0,#0x832a            ;1432
001398  f7fffffe          BL       SDIO_ITConfig
00139c  bf00              NOP                            ;1433
                  |L1.5022|
00139e  484f              LDR      r0,|L1.5340|
0013a0  6800              LDR      r0,[r0,#0]            ;1433  ; TransferEnd
0013a2  b918              CBNZ     r0,|L1.5036|
0013a4  484e              LDR      r0,|L1.5344|
0013a6  7800              LDRB     r0,[r0,#0]            ;1433  ; TransferError
0013a8  282a              CMP      r0,#0x2a              ;1433
0013aa  d0f8              BEQ      |L1.5022|
                  |L1.5036|
0013ac  484c              LDR      r0,|L1.5344|
0013ae  7800              LDRB     r0,[r0,#0]            ;1435  ; TransferError
0013b0  282a              CMP      r0,#0x2a              ;1435
0013b2  d024              BEQ      |L1.5118|
0013b4  484a              LDR      r0,|L1.5344|
0013b6  7800              LDRB     r0,[r0,#0]            ;1437  ; TransferError
0013b8  e6d0              B        |L1.4444|
                  |L1.5050|
0013ba  4847              LDR      r0,|L1.5336|
0013bc  6800              LDR      r0,[r0,#0]            ;1440  ; DeviceMode
0013be  b9f0              CBNZ     r0,|L1.5118|
0013c0  2101              MOVS     r1,#1                 ;1442
0013c2  f240302a          MOV      r0,#0x32a             ;1442
0013c6  f7fffffe          BL       SDIO_ITConfig
0013ca  2001              MOVS     r0,#1                 ;1443
0013cc  f7fffffe          BL       SDIO_DMACmd
0013d0  fb05f104          MUL      r1,r5,r4              ;1444
0013d4  4638              MOV      r0,r7                 ;1444
0013d6  f7fffffe          BL       SD_LowLevel_DMA_RxConfig
0013da  bf00              NOP                            ;1445
                  |L1.5084|
0013dc  f7fffffe          BL       SD_DMAEndOfTransferStatus
0013e0  b930              CBNZ     r0,|L1.5104|
0013e2  483e              LDR      r0,|L1.5340|
0013e4  6800              LDR      r0,[r0,#0]            ;1445  ; TransferEnd
0013e6  b918              CBNZ     r0,|L1.5104|
0013e8  483d              LDR      r0,|L1.5344|
0013ea  7800              LDRB     r0,[r0,#0]            ;1445  ; TransferError
0013ec  282a              CMP      r0,#0x2a              ;1445
0013ee  d0f5              BEQ      |L1.5084|
                  |L1.5104|
0013f0  483b              LDR      r0,|L1.5344|
0013f2  7800              LDRB     r0,[r0,#0]            ;1447  ; TransferError
0013f4  282a              CMP      r0,#0x2a              ;1447
0013f6  d002              BEQ      |L1.5118|
0013f8  4839              LDR      r0,|L1.5344|
0013fa  7800              LDRB     r0,[r0,#0]            ;1449  ; TransferError
0013fc  e6ae              B        |L1.4444|
                  |L1.5118|
0013fe  4640              MOV      r0,r8                 ;1453
001400  e6ac              B        |L1.4444|
;;;1455   
                          ENDP

                  IsCardProgramming PROC
;;;2852     */
;;;2853   static SD_Error IsCardProgramming(uint8_t *pstatus)
001402  b57c              PUSH     {r2-r6,lr}
;;;2854   {
001404  4604              MOV      r4,r0
;;;2855     SD_Error errorstatus = SD_OK;
001406  252a              MOVS     r5,#0x2a
;;;2856     __IO uint32_t respR1 = 0, status = 0;
001408  2000              MOVS     r0,#0
00140a  9001              STR      r0,[sp,#4]
00140c  9000              STR      r0,[sp,#0]
;;;2857   
;;;2858     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
00140e  483d              LDR      r0,|L1.5380|
001410  8800              LDRH     r0,[r0,#0]  ; RCA
001412  0400              LSLS     r0,r0,#16
001414  4937              LDR      r1,|L1.5364|
001416  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
;;;2859     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
001418  200d              MOVS     r0,#0xd
00141a  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;2860     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
00141c  2040              MOVS     r0,#0x40
00141e  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;2861     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
001420  2000              MOVS     r0,#0
001422  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;2862     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
001424  f44f6080          MOV      r0,#0x400
001428  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;2863     SDIO_SendCommand(&SDIO_CmdInitStructure);
00142a  4608              MOV      r0,r1
00142c  f7fffffe          BL       SDIO_SendCommand
;;;2864   
;;;2865     status = SDIO->STA;
001430  4833              LDR      r0,|L1.5376|
001432  6b40              LDR      r0,[r0,#0x34]
001434  9000              STR      r0,[sp,#0]
;;;2866     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
001436  e002              B        |L1.5182|
                  |L1.5176|
;;;2867     {
;;;2868       status = SDIO->STA;
001438  4831              LDR      r0,|L1.5376|
00143a  6b40              LDR      r0,[r0,#0x34]
00143c  9000              STR      r0,[sp,#0]
                  |L1.5182|
00143e  9800              LDR      r0,[sp,#0]            ;2866
001440  f0000045          AND      r0,r0,#0x45           ;2866
001444  2800              CMP      r0,#0                 ;2866
001446  d0f7              BEQ      |L1.5176|
;;;2869     }
;;;2870   
;;;2871     if (status & SDIO_FLAG_CTIMEOUT)
001448  9800              LDR      r0,[sp,#0]
00144a  f0000004          AND      r0,r0,#4
00144e  b128              CBZ      r0,|L1.5212|
;;;2872     {
;;;2873       errorstatus = SD_CMD_RSP_TIMEOUT;
001450  2503              MOVS     r5,#3
;;;2874       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
001452  2004              MOVS     r0,#4
001454  f7fffffe          BL       SDIO_ClearFlag
;;;2875       return(errorstatus);
001458  4628              MOV      r0,r5
                  |L1.5210|
;;;2876     }
;;;2877     else if (status & SDIO_FLAG_CCRCFAIL)
;;;2878     {
;;;2879       errorstatus = SD_CMD_CRC_FAIL;
;;;2880       SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
;;;2881       return(errorstatus);
;;;2882     }
;;;2883   
;;;2884     status = (uint32_t)SDIO_GetCommandResponse();
;;;2885   
;;;2886     /*!< Check response received is of desired command */
;;;2887     if (status != SD_CMD_SEND_STATUS)
;;;2888     {
;;;2889       errorstatus = SD_ILLEGAL_CMD;
;;;2890       return(errorstatus);
;;;2891     }
;;;2892   
;;;2893     /*!< Clear all the static flags */
;;;2894     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2895   
;;;2896   
;;;2897     /*!< We have received response, retrieve it for analysis  */
;;;2898     respR1 = SDIO_GetResponse(SDIO_RESP1);
;;;2899   
;;;2900     /*!< Find out card status */
;;;2901     *pstatus = (uint8_t) ((respR1 >> 9) & 0x0000000F);
;;;2902   
;;;2903     if ((respR1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
;;;2904     {
;;;2905       return(errorstatus);
;;;2906     }
;;;2907   
;;;2908     if (respR1 & SD_OCR_ADDR_OUT_OF_RANGE)
;;;2909     {
;;;2910       return(SD_ADDR_OUT_OF_RANGE);
;;;2911     }
;;;2912   
;;;2913     if (respR1 & SD_OCR_ADDR_MISALIGNED)
;;;2914     {
;;;2915       return(SD_ADDR_MISALIGNED);
;;;2916     }
;;;2917   
;;;2918     if (respR1 & SD_OCR_BLOCK_LEN_ERR)
;;;2919     {
;;;2920       return(SD_BLOCK_LEN_ERR);
;;;2921     }
;;;2922   
;;;2923     if (respR1 & SD_OCR_ERASE_SEQ_ERR)
;;;2924     {
;;;2925       return(SD_ERASE_SEQ_ERR);
;;;2926     }
;;;2927   
;;;2928     if (respR1 & SD_OCR_BAD_ERASE_PARAM)
;;;2929     {
;;;2930       return(SD_BAD_ERASE_PARAM);
;;;2931     }
;;;2932   
;;;2933     if (respR1 & SD_OCR_WRITE_PROT_VIOLATION)
;;;2934     {
;;;2935       return(SD_WRITE_PROT_VIOLATION);
;;;2936     }
;;;2937   
;;;2938     if (respR1 & SD_OCR_LOCK_UNLOCK_FAILED)
;;;2939     {
;;;2940       return(SD_LOCK_UNLOCK_FAILED);
;;;2941     }
;;;2942   
;;;2943     if (respR1 & SD_OCR_COM_CRC_FAILED)
;;;2944     {
;;;2945       return(SD_COM_CRC_FAILED);
;;;2946     }
;;;2947   
;;;2948     if (respR1 & SD_OCR_ILLEGAL_CMD)
;;;2949     {
;;;2950       return(SD_ILLEGAL_CMD);
;;;2951     }
;;;2952   
;;;2953     if (respR1 & SD_OCR_CARD_ECC_FAILED)
;;;2954     {
;;;2955       return(SD_CARD_ECC_FAILED);
;;;2956     }
;;;2957   
;;;2958     if (respR1 & SD_OCR_CC_ERROR)
;;;2959     {
;;;2960       return(SD_CC_ERROR);
;;;2961     }
;;;2962   
;;;2963     if (respR1 & SD_OCR_GENERAL_UNKNOWN_ERROR)
;;;2964     {
;;;2965       return(SD_GENERAL_UNKNOWN_ERROR);
;;;2966     }
;;;2967   
;;;2968     if (respR1 & SD_OCR_STREAM_READ_UNDERRUN)
;;;2969     {
;;;2970       return(SD_STREAM_READ_UNDERRUN);
;;;2971     }
;;;2972   
;;;2973     if (respR1 & SD_OCR_STREAM_WRITE_OVERRUN)
;;;2974     {
;;;2975       return(SD_STREAM_WRITE_OVERRUN);
;;;2976     }
;;;2977   
;;;2978     if (respR1 & SD_OCR_CID_CSD_OVERWRIETE)
;;;2979     {
;;;2980       return(SD_CID_CSD_OVERWRITE);
;;;2981     }
;;;2982   
;;;2983     if (respR1 & SD_OCR_WP_ERASE_SKIP)
;;;2984     {
;;;2985       return(SD_WP_ERASE_SKIP);
;;;2986     }
;;;2987   
;;;2988     if (respR1 & SD_OCR_CARD_ECC_DISABLED)
;;;2989     {
;;;2990       return(SD_CARD_ECC_DISABLED);
;;;2991     }
;;;2992   
;;;2993     if (respR1 & SD_OCR_ERASE_RESET)
;;;2994     {
;;;2995       return(SD_ERASE_RESET);
;;;2996     }
;;;2997   
;;;2998     if (respR1 & SD_OCR_AKE_SEQ_ERROR)
;;;2999     {
;;;3000       return(SD_AKE_SEQ_ERROR);
;;;3001     }
;;;3002   
;;;3003     return(errorstatus);
;;;3004   }
00145a  bd7c              POP      {r2-r6,pc}
                  |L1.5212|
00145c  9800              LDR      r0,[sp,#0]            ;2877
00145e  f0000001          AND      r0,r0,#1              ;2877
001462  b128              CBZ      r0,|L1.5232|
001464  2501              MOVS     r5,#1                 ;2879
001466  2001              MOVS     r0,#1                 ;2880
001468  f7fffffe          BL       SDIO_ClearFlag
00146c  4628              MOV      r0,r5                 ;2881
00146e  e7f4              B        |L1.5210|
                  |L1.5232|
001470  f7fffffe          BL       SDIO_GetCommandResponse
001474  9000              STR      r0,[sp,#0]            ;2884
001476  9800              LDR      r0,[sp,#0]            ;2887
001478  280d              CMP      r0,#0xd               ;2887
00147a  d002              BEQ      |L1.5250|
00147c  2510              MOVS     r5,#0x10              ;2889
00147e  4628              MOV      r0,r5                 ;2890
001480  e7eb              B        |L1.5210|
                  |L1.5250|
001482  f24050ff          MOV      r0,#0x5ff             ;2894
001486  f7fffffe          BL       SDIO_ClearFlag
00148a  2000              MOVS     r0,#0                 ;2898
00148c  f7fffffe          BL       SDIO_GetResponse
001490  9001              STR      r0,[sp,#4]            ;2898
001492  9801              LDR      r0,[sp,#4]            ;2901
001494  f3c02043          UBFX     r0,r0,#9,#4           ;2901
001498  7020              STRB     r0,[r4,#0]            ;2901
00149a  491b              LDR      r1,|L1.5384|
00149c  9801              LDR      r0,[sp,#4]            ;2903
00149e  4008              ANDS     r0,r0,r1              ;2903
0014a0  b908              CBNZ     r0,|L1.5286|
0014a2  4628              MOV      r0,r5                 ;2905
0014a4  e7d9              B        |L1.5210|
                  |L1.5286|
0014a6  9801              LDR      r0,[sp,#4]            ;2908
0014a8  f0004000          AND      r0,r0,#0x80000000     ;2908
0014ac  b108              CBZ      r0,|L1.5298|
0014ae  201c              MOVS     r0,#0x1c              ;2910
0014b0  e7d3              B        |L1.5210|
                  |L1.5298|
0014b2  9801              LDR      r0,[sp,#4]            ;2913
0014b4  f0004080          AND      r0,r0,#0x40000000     ;2913
0014b8  b108              CBZ      r0,|L1.5310|
0014ba  2009              MOVS     r0,#9                 ;2915
0014bc  e7cd              B        |L1.5210|
                  |L1.5310|
0014be  9801              LDR      r0,[sp,#4]            ;2918
0014c0  f0005000          AND      r0,r0,#0x20000000     ;2918
0014c4  b108              CBZ      r0,|L1.5322|
0014c6  200a              MOVS     r0,#0xa               ;2920
0014c8  e7c7              B        |L1.5210|
                  |L1.5322|
0014ca  9801              LDR      r0,[sp,#4]            ;2923
0014cc  f0005080          AND      r0,r0,#0x10000000     ;2923
0014d0  b1e0              CBZ      r0,|L1.5388|
0014d2  200b              MOVS     r0,#0xb               ;2925
0014d4  e7c1              B        |L1.5210|
0014d6  0000              DCW      0x0000
                  |L1.5336|
                          DCD      DeviceMode
                  |L1.5340|
                          DCD      TransferEnd
                  |L1.5344|
                          DCD      TransferError
                  |L1.5348|
                          DCD      TotalNumberOfBytes
                  |L1.5352|
                          DCD      0x000fffff
                  |L1.5356|
                          DCD      SDIO_DataInitStructure
                  |L1.5360|
                          DCD      CardType
                  |L1.5364|
                          DCD      SDIO_CmdInitStructure
                  |L1.5368|
                          DCD      StopCondition
                  |L1.5372|
                          DCD      DestBuffer
                  |L1.5376|
                          DCD      0x40018000
                  |L1.5380|
                          DCD      ||RCA||
                  |L1.5384|
                          DCD      0xfdffe008
                  |L1.5388|
00150c  9801              LDR      r0,[sp,#4]            ;2928
00150e  f0006000          AND      r0,r0,#0x8000000      ;2928
001512  b108              CBZ      r0,|L1.5400|
001514  200c              MOVS     r0,#0xc               ;2930
001516  e7a0              B        |L1.5210|
                  |L1.5400|
001518  9801              LDR      r0,[sp,#4]            ;2933
00151a  f0006080          AND      r0,r0,#0x4000000      ;2933
00151e  b108              CBZ      r0,|L1.5412|
001520  200d              MOVS     r0,#0xd               ;2935
001522  e79a              B        |L1.5210|
                  |L1.5412|
001524  9801              LDR      r0,[sp,#4]            ;2938
001526  f0007080          AND      r0,r0,#0x1000000      ;2938
00152a  b108              CBZ      r0,|L1.5424|
00152c  200e              MOVS     r0,#0xe               ;2940
00152e  e794              B        |L1.5210|
                  |L1.5424|
001530  9801              LDR      r0,[sp,#4]            ;2943
001532  f4000000          AND      r0,r0,#0x800000       ;2943
001536  b108              CBZ      r0,|L1.5436|
001538  200f              MOVS     r0,#0xf               ;2945
00153a  e78e              B        |L1.5210|
                  |L1.5436|
00153c  9801              LDR      r0,[sp,#4]            ;2948
00153e  f4000080          AND      r0,r0,#0x400000       ;2948
001542  b108              CBZ      r0,|L1.5448|
001544  2010              MOVS     r0,#0x10              ;2950
001546  e788              B        |L1.5210|
                  |L1.5448|
001548  9801              LDR      r0,[sp,#4]            ;2953
00154a  f4001000          AND      r0,r0,#0x200000       ;2953
00154e  b108              CBZ      r0,|L1.5460|
001550  2011              MOVS     r0,#0x11              ;2955
001552  e782              B        |L1.5210|
                  |L1.5460|
001554  9801              LDR      r0,[sp,#4]            ;2958
001556  f4001080          AND      r0,r0,#0x100000       ;2958
00155a  b108              CBZ      r0,|L1.5472|
00155c  2012              MOVS     r0,#0x12              ;2960
00155e  e77c              B        |L1.5210|
                  |L1.5472|
001560  9801              LDR      r0,[sp,#4]            ;2963
001562  f4002000          AND      r0,r0,#0x80000        ;2963
001566  b108              CBZ      r0,|L1.5484|
001568  2013              MOVS     r0,#0x13              ;2965
00156a  e776              B        |L1.5210|
                  |L1.5484|
00156c  9801              LDR      r0,[sp,#4]            ;2968
00156e  f4002080          AND      r0,r0,#0x40000        ;2968
001572  b108              CBZ      r0,|L1.5496|
001574  2014              MOVS     r0,#0x14              ;2970
001576  e770              B        |L1.5210|
                  |L1.5496|
001578  9801              LDR      r0,[sp,#4]            ;2973
00157a  f4003000          AND      r0,r0,#0x20000        ;2973
00157e  b108              CBZ      r0,|L1.5508|
001580  2015              MOVS     r0,#0x15              ;2975
001582  e76a              B        |L1.5210|
                  |L1.5508|
001584  9801              LDR      r0,[sp,#4]            ;2978
001586  f4003080          AND      r0,r0,#0x10000        ;2978
00158a  b108              CBZ      r0,|L1.5520|
00158c  2016              MOVS     r0,#0x16              ;2980
00158e  e764              B        |L1.5210|
                  |L1.5520|
001590  9801              LDR      r0,[sp,#4]            ;2983
001592  f4004000          AND      r0,r0,#0x8000         ;2983
001596  b108              CBZ      r0,|L1.5532|
001598  2017              MOVS     r0,#0x17              ;2985
00159a  e75e              B        |L1.5210|
                  |L1.5532|
00159c  9801              LDR      r0,[sp,#4]            ;2988
00159e  f4004080          AND      r0,r0,#0x4000         ;2988
0015a2  b108              CBZ      r0,|L1.5544|
0015a4  2018              MOVS     r0,#0x18              ;2990
0015a6  e758              B        |L1.5210|
                  |L1.5544|
0015a8  9801              LDR      r0,[sp,#4]            ;2993
0015aa  f4005000          AND      r0,r0,#0x2000         ;2993
0015ae  b108              CBZ      r0,|L1.5556|
0015b0  2019              MOVS     r0,#0x19              ;2995
0015b2  e752              B        |L1.5210|
                  |L1.5556|
0015b4  9801              LDR      r0,[sp,#4]            ;2998
0015b6  f0000008          AND      r0,r0,#8              ;2998
0015ba  b108              CBZ      r0,|L1.5568|
0015bc  201a              MOVS     r0,#0x1a              ;3000
0015be  e74c              B        |L1.5210|
                  |L1.5568|
0015c0  4628              MOV      r0,r5                 ;3003
0015c2  e74a              B        |L1.5210|
;;;3005   
                          ENDP

                  SD_WriteBlock PROC
;;;1462     */
;;;1463   SD_Error SD_WriteBlock(uint32_t *writebuff, uint32_t WriteAddr, uint16_t BlockSize)
0015c4  e92d5fff          PUSH     {r0-r12,lr}
;;;1464   {
0015c8  4681              MOV      r9,r0
0015ca  468a              MOV      r10,r1
0015cc  4614              MOV      r4,r2
;;;1465     SD_Error errorstatus = SD_OK;
0015ce  252a              MOVS     r5,#0x2a
;;;1466     uint8_t  power = 0, cardstate = 0;
0015d0  2000              MOVS     r0,#0
0015d2  9003              STR      r0,[sp,#0xc]
0015d4  9002              STR      r0,[sp,#8]
;;;1467     uint32_t timeout = 0, bytestransferred = 0;
0015d6  4683              MOV      r11,r0
0015d8  2600              MOVS     r6,#0
;;;1468     uint32_t cardstatus = 0, count = 0, restwords = 0;
0015da  9001              STR      r0,[sp,#4]
0015dc  2700              MOVS     r7,#0
0015de  9000              STR      r0,[sp,#0]
;;;1469     uint32_t *tempbuff = (uint32_t *)writebuff;
0015e0  46c8              MOV      r8,r9
;;;1470   
;;;1471     if (writebuff == NULL)
0015e2  f1b90f00          CMP      r9,#0
0015e6  d104              BNE      |L1.5618|
;;;1472     {
;;;1473       errorstatus = SD_INVALID_PARAMETER;
0015e8  2526              MOVS     r5,#0x26
;;;1474       return(errorstatus);
0015ea  4628              MOV      r0,r5
                  |L1.5612|
;;;1475     }
;;;1476   
;;;1477     TransferError = SD_OK;
;;;1478     TransferEnd = 0;
;;;1479     TotalNumberOfBytes = 0;
;;;1480   
;;;1481     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1482     SDIO_DataInitStructure.SDIO_DataLength = 0;
;;;1483     SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
;;;1484     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
;;;1485     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1486     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
;;;1487     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1488     SDIO_DMACmd(DISABLE);
;;;1489   
;;;1490     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
;;;1491     {
;;;1492       errorstatus = SD_LOCK_UNLOCK_FAILED;
;;;1493       return(errorstatus);
;;;1494     }
;;;1495   
;;;1496     if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
;;;1497     {
;;;1498       BlockSize = 512;
;;;1499       WriteAddr /= 512;
;;;1500     }
;;;1501     
;;;1502     /*!< Set the block size, both on controller and card */
;;;1503     if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
;;;1504     {
;;;1505       power = convert_from_bytes_to_power_of_two(BlockSize);
;;;1506   
;;;1507       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
;;;1508       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
;;;1509       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1510       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1511       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1512       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1513   
;;;1514       errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
;;;1515   
;;;1516       if (errorstatus != SD_OK)
;;;1517       {
;;;1518         return(errorstatus);
;;;1519       }
;;;1520     }
;;;1521     else
;;;1522     {
;;;1523       errorstatus = SD_INVALID_PARAMETER;
;;;1524       return(errorstatus);
;;;1525     }
;;;1526   
;;;1527     /*!< Wait till card is ready for data Added */
;;;1528     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
;;;1529     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
;;;1530     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1531     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1532     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1533     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1534   
;;;1535     errorstatus = CmdResp1Error(SD_CMD_SEND_STATUS);
;;;1536   
;;;1537     if (errorstatus != SD_OK)
;;;1538     {
;;;1539       return(errorstatus);
;;;1540     }
;;;1541   
;;;1542     cardstatus = SDIO_GetResponse(SDIO_RESP1);
;;;1543   
;;;1544     timeout = SD_DATATIMEOUT;
;;;1545   
;;;1546     while (((cardstatus & 0x00000100) == 0) && (timeout > 0))
;;;1547     {
;;;1548       timeout--;
;;;1549       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
;;;1550       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
;;;1551       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1552       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1553       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1554       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1555   
;;;1556       errorstatus = CmdResp1Error(SD_CMD_SEND_STATUS);
;;;1557   
;;;1558       if (errorstatus != SD_OK)
;;;1559       {
;;;1560         return(errorstatus);
;;;1561       }
;;;1562       cardstatus = SDIO_GetResponse(SDIO_RESP1);
;;;1563     }
;;;1564   
;;;1565     if (timeout == 0)
;;;1566     {
;;;1567       return(SD_ERROR);
;;;1568     }
;;;1569   
;;;1570     /*!< Send CMD24 WRITE_SINGLE_BLOCK */
;;;1571     SDIO_CmdInitStructure.SDIO_Argument = WriteAddr;
;;;1572     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_WRITE_SINGLE_BLOCK;
;;;1573     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1574     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1575     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1576     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1577   
;;;1578     errorstatus = CmdResp1Error(SD_CMD_WRITE_SINGLE_BLOCK);
;;;1579   
;;;1580     if (errorstatus != SD_OK)
;;;1581     {
;;;1582       return(errorstatus);
;;;1583     }
;;;1584   
;;;1585     TotalNumberOfBytes = BlockSize;
;;;1586     StopCondition = 0;
;;;1587     SrcBuffer = (uint32_t *)writebuff;
;;;1588   
;;;1589     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1590     SDIO_DataInitStructure.SDIO_DataLength = BlockSize;
;;;1591     SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
;;;1592     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
;;;1593     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1594     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;1595     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1596   
;;;1597     /*!< In case of single data block transfer no need of stop command at all */
;;;1598     if (DeviceMode == SD_POLLING_MODE)
;;;1599     {
;;;1600       while (!(SDIO->STA & (SDIO_FLAG_DBCKEND | SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_STBITERR)))
;;;1601       {
;;;1602         if (SDIO_GetFlagStatus(SDIO_FLAG_TXFIFOHE) != RESET)
;;;1603         {
;;;1604           if ((TotalNumberOfBytes - bytestransferred) < 32)
;;;1605           {
;;;1606             restwords = ((TotalNumberOfBytes - bytestransferred) % 4 == 0) ? ((TotalNumberOfBytes - bytestransferred) / 4) : (( TotalNumberOfBytes -  bytestransferred) / 4 + 1);
;;;1607   
;;;1608             for (count = 0; count < restwords; count++, tempbuff++, bytestransferred += 4)
;;;1609             {
;;;1610               SDIO_WriteData(*tempbuff);
;;;1611             }
;;;1612           }
;;;1613           else
;;;1614           {
;;;1615             for (count = 0; count < 8; count++)
;;;1616             {
;;;1617               SDIO_WriteData(*(tempbuff + count));
;;;1618             }
;;;1619             tempbuff += 8;
;;;1620             bytestransferred += 32;
;;;1621           }
;;;1622         }
;;;1623       }
;;;1624       if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;1625       {
;;;1626         SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;1627         errorstatus = SD_DATA_TIMEOUT;
;;;1628         return(errorstatus);
;;;1629       }
;;;1630       else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;1631       {
;;;1632         SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;1633         errorstatus = SD_DATA_CRC_FAIL;
;;;1634         return(errorstatus);
;;;1635       }
;;;1636       else if (SDIO_GetFlagStatus(SDIO_FLAG_TXUNDERR) != RESET)
;;;1637       {
;;;1638         SDIO_ClearFlag(SDIO_FLAG_TXUNDERR);
;;;1639         errorstatus = SD_TX_UNDERRUN;
;;;1640         return(errorstatus);
;;;1641       }
;;;1642       else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;1643       {
;;;1644         SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;1645         errorstatus = SD_START_BIT_ERR;
;;;1646         return(errorstatus);
;;;1647       }
;;;1648     }
;;;1649     else if (DeviceMode == SD_INTERRUPT_MODE)
;;;1650     {
;;;1651       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_FLAG_TXFIFOHE | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR, ENABLE);
;;;1652       while ((TransferEnd == 0) && (TransferError == SD_OK))
;;;1653       {}
;;;1654       if (TransferError != SD_OK)
;;;1655       {
;;;1656         return(TransferError);
;;;1657       }
;;;1658     }
;;;1659     else if (DeviceMode == SD_DMA_MODE)
;;;1660     {
;;;1661       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR, ENABLE);
;;;1662       SD_LowLevel_DMA_TxConfig((uint32_t *)writebuff, BlockSize);
;;;1663       SDIO_DMACmd(ENABLE);
;;;1664       while ((SD_DMAEndOfTransferStatus() == RESET) && (TransferEnd == 0) && (TransferError == SD_OK))
;;;1665       {}
;;;1666       if (TransferError != SD_OK)
;;;1667       {
;;;1668         return(TransferError);
;;;1669       }
;;;1670     }
;;;1671   
;;;1672     /*!< Clear all the static flags */
;;;1673     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;1674   
;;;1675     /*!< Wait till the card is in programming state */
;;;1676     errorstatus = IsCardProgramming(&cardstate);
;;;1677   
;;;1678     while ((errorstatus == SD_OK) && ((cardstate == SD_CARD_PROGRAMMING) || (cardstate == SD_CARD_RECEIVING)))
;;;1679     {
;;;1680       errorstatus = IsCardProgramming(&cardstate);
;;;1681     }
;;;1682   
;;;1683     return(errorstatus);
;;;1684   }
0015ec  b004              ADD      sp,sp,#0x10
0015ee  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.5618|
0015f2  202a              MOVS     r0,#0x2a              ;1477
0015f4  49fe              LDR      r1,|L1.6640|
0015f6  7008              STRB     r0,[r1,#0]            ;1477
0015f8  2000              MOVS     r0,#0                 ;1478
0015fa  49fe              LDR      r1,|L1.6644|
0015fc  6008              STR      r0,[r1,#0]            ;1478  ; TransferEnd
0015fe  49fe              LDR      r1,|L1.6648|
001600  6008              STR      r0,[r1,#0]            ;1479  ; TotalNumberOfBytes
001602  48fe              LDR      r0,|L1.6652|
001604  49fe              LDR      r1,|L1.6656|
001606  6008              STR      r0,[r1,#0]            ;1481  ; SDIO_DataInitStructure
001608  2000              MOVS     r0,#0                 ;1482
00160a  6048              STR      r0,[r1,#4]            ;1482  ; SDIO_DataInitStructure
00160c  6088              STR      r0,[r1,#8]            ;1483  ; SDIO_DataInitStructure
00160e  60c8              STR      r0,[r1,#0xc]          ;1484  ; SDIO_DataInitStructure
001610  6108              STR      r0,[r1,#0x10]         ;1485  ; SDIO_DataInitStructure
001612  6148              STR      r0,[r1,#0x14]         ;1486  ; SDIO_DataInitStructure
001614  4608              MOV      r0,r1                 ;1487
001616  f7fffffe          BL       SDIO_DataConfig
00161a  2000              MOVS     r0,#0                 ;1488
00161c  f7fffffe          BL       SDIO_DMACmd
001620  2000              MOVS     r0,#0                 ;1490
001622  f7fffffe          BL       SDIO_GetResponse
001626  f0007000          AND      r0,r0,#0x2000000      ;1490
00162a  b110              CBZ      r0,|L1.5682|
00162c  250e              MOVS     r5,#0xe               ;1492
00162e  4628              MOV      r0,r5                 ;1493
001630  e7dc              B        |L1.5612|
                  |L1.5682|
001632  48f4              LDR      r0,|L1.6660|
001634  6800              LDR      r0,[r0,#0]            ;1496  ; CardType
001636  2802              CMP      r0,#2                 ;1496
001638  d102              BNE      |L1.5696|
00163a  0204              LSLS     r4,r0,#8              ;1498
00163c  ea4f2a5a          LSR      r10,r10,#9            ;1499
                  |L1.5696|
001640  2c00              CMP      r4,#0                 ;1503
001642  dd20              BLE      |L1.5766|
001644  f5b46f00          CMP      r4,#0x800             ;1503
001648  dc1d              BGT      |L1.5766|
00164a  1e60              SUBS     r0,r4,#1              ;1503
00164c  4020              ANDS     r0,r0,r4              ;1503
00164e  b9d0              CBNZ     r0,|L1.5766|
001650  4620              MOV      r0,r4                 ;1505
001652  f7fffffe          BL       convert_from_bytes_to_power_of_two
001656  9003              STR      r0,[sp,#0xc]          ;1505
001658  48eb              LDR      r0,|L1.6664|
00165a  6004              STR      r4,[r0,#0]            ;1507  ; SDIO_CmdInitStructure
00165c  2010              MOVS     r0,#0x10              ;1508
00165e  49ea              LDR      r1,|L1.6664|
001660  6048              STR      r0,[r1,#4]            ;1508  ; SDIO_CmdInitStructure
001662  2040              MOVS     r0,#0x40              ;1509
001664  6088              STR      r0,[r1,#8]            ;1509  ; SDIO_CmdInitStructure
001666  2000              MOVS     r0,#0                 ;1510
001668  60c8              STR      r0,[r1,#0xc]          ;1510  ; SDIO_CmdInitStructure
00166a  f44f6080          MOV      r0,#0x400             ;1511
00166e  6108              STR      r0,[r1,#0x10]         ;1511  ; SDIO_CmdInitStructure
001670  4608              MOV      r0,r1                 ;1512
001672  f7fffffe          BL       SDIO_SendCommand
001676  2010              MOVS     r0,#0x10              ;1514
001678  f7fffffe          BL       CmdResp1Error
00167c  4605              MOV      r5,r0                 ;1514
00167e  2d2a              CMP      r5,#0x2a              ;1516
001680  d004              BEQ      |L1.5772|
001682  4628              MOV      r0,r5                 ;1518
001684  e7b2              B        |L1.5612|
                  |L1.5766|
001686  2526              MOVS     r5,#0x26              ;1523
001688  4628              MOV      r0,r5                 ;1524
00168a  e7af              B        |L1.5612|
                  |L1.5772|
00168c  48df              LDR      r0,|L1.6668|
00168e  8800              LDRH     r0,[r0,#0]            ;1528  ; RCA
001690  0400              LSLS     r0,r0,#16             ;1528
001692  49dd              LDR      r1,|L1.6664|
001694  6008              STR      r0,[r1,#0]            ;1528  ; SDIO_CmdInitStructure
001696  200d              MOVS     r0,#0xd               ;1529
001698  6048              STR      r0,[r1,#4]            ;1529  ; SDIO_CmdInitStructure
00169a  2040              MOVS     r0,#0x40              ;1530
00169c  6088              STR      r0,[r1,#8]            ;1530  ; SDIO_CmdInitStructure
00169e  2000              MOVS     r0,#0                 ;1531
0016a0  60c8              STR      r0,[r1,#0xc]          ;1531  ; SDIO_CmdInitStructure
0016a2  f44f6080          MOV      r0,#0x400             ;1532
0016a6  6108              STR      r0,[r1,#0x10]         ;1532  ; SDIO_CmdInitStructure
0016a8  4608              MOV      r0,r1                 ;1533
0016aa  f7fffffe          BL       SDIO_SendCommand
0016ae  200d              MOVS     r0,#0xd               ;1535
0016b0  f7fffffe          BL       CmdResp1Error
0016b4  4605              MOV      r5,r0                 ;1535
0016b6  2d2a              CMP      r5,#0x2a              ;1537
0016b8  d001              BEQ      |L1.5822|
0016ba  4628              MOV      r0,r5                 ;1539
0016bc  e796              B        |L1.5612|
                  |L1.5822|
0016be  2000              MOVS     r0,#0                 ;1542
0016c0  f7fffffe          BL       SDIO_GetResponse
0016c4  9001              STR      r0,[sp,#4]            ;1542
0016c6  f8dfb334          LDR      r11,|L1.6652|
0016ca  e01e              B        |L1.5898|
                  |L1.5836|
0016cc  f1ab0b01          SUB      r11,r11,#1            ;1548
0016d0  48ce              LDR      r0,|L1.6668|
0016d2  8800              LDRH     r0,[r0,#0]            ;1549  ; RCA
0016d4  0400              LSLS     r0,r0,#16             ;1549
0016d6  49cc              LDR      r1,|L1.6664|
0016d8  6008              STR      r0,[r1,#0]            ;1549  ; SDIO_CmdInitStructure
0016da  200d              MOVS     r0,#0xd               ;1550
0016dc  6048              STR      r0,[r1,#4]            ;1550  ; SDIO_CmdInitStructure
0016de  2040              MOVS     r0,#0x40              ;1551
0016e0  6088              STR      r0,[r1,#8]            ;1551  ; SDIO_CmdInitStructure
0016e2  2000              MOVS     r0,#0                 ;1552
0016e4  60c8              STR      r0,[r1,#0xc]          ;1552  ; SDIO_CmdInitStructure
0016e6  f44f6080          MOV      r0,#0x400             ;1553
0016ea  6108              STR      r0,[r1,#0x10]         ;1553  ; SDIO_CmdInitStructure
0016ec  4608              MOV      r0,r1                 ;1554
0016ee  f7fffffe          BL       SDIO_SendCommand
0016f2  200d              MOVS     r0,#0xd               ;1556
0016f4  f7fffffe          BL       CmdResp1Error
0016f8  4605              MOV      r5,r0                 ;1556
0016fa  2d2a              CMP      r5,#0x2a              ;1558
0016fc  d001              BEQ      |L1.5890|
0016fe  4628              MOV      r0,r5                 ;1560
001700  e774              B        |L1.5612|
                  |L1.5890|
001702  2000              MOVS     r0,#0                 ;1562
001704  f7fffffe          BL       SDIO_GetResponse
001708  9001              STR      r0,[sp,#4]            ;1562
                  |L1.5898|
00170a  9801              LDR      r0,[sp,#4]            ;1546
00170c  f4007080          AND      r0,r0,#0x100          ;1546
001710  b910              CBNZ     r0,|L1.5912|
001712  f1bb0f00          CMP      r11,#0                ;1546
001716  d1d9              BNE      |L1.5836|
                  |L1.5912|
001718  f1bb0f00          CMP      r11,#0                ;1565
00171c  d101              BNE      |L1.5922|
00171e  2029              MOVS     r0,#0x29              ;1567
001720  e764              B        |L1.5612|
                  |L1.5922|
001722  48b9              LDR      r0,|L1.6664|
001724  f8c0a000          STR      r10,[r0,#0]           ;1571  ; SDIO_CmdInitStructure
001728  2018              MOVS     r0,#0x18              ;1572
00172a  49b7              LDR      r1,|L1.6664|
00172c  6048              STR      r0,[r1,#4]            ;1572  ; SDIO_CmdInitStructure
00172e  2040              MOVS     r0,#0x40              ;1573
001730  6088              STR      r0,[r1,#8]            ;1573  ; SDIO_CmdInitStructure
001732  2000              MOVS     r0,#0                 ;1574
001734  60c8              STR      r0,[r1,#0xc]          ;1574  ; SDIO_CmdInitStructure
001736  f44f6080          MOV      r0,#0x400             ;1575
00173a  6108              STR      r0,[r1,#0x10]         ;1575  ; SDIO_CmdInitStructure
00173c  4608              MOV      r0,r1                 ;1576
00173e  f7fffffe          BL       SDIO_SendCommand
001742  2018              MOVS     r0,#0x18              ;1578
001744  f7fffffe          BL       CmdResp1Error
001748  4605              MOV      r5,r0                 ;1578
00174a  2d2a              CMP      r5,#0x2a              ;1580
00174c  d001              BEQ      |L1.5970|
00174e  4628              MOV      r0,r5                 ;1582
001750  e74c              B        |L1.5612|
                  |L1.5970|
001752  48a9              LDR      r0,|L1.6648|
001754  6004              STR      r4,[r0,#0]            ;1585  ; TotalNumberOfBytes
001756  2000              MOVS     r0,#0                 ;1586
001758  49ad              LDR      r1,|L1.6672|
00175a  6008              STR      r0,[r1,#0]            ;1586  ; StopCondition
00175c  48ad              LDR      r0,|L1.6676|
00175e  f8c09000          STR      r9,[r0,#0]            ;1587  ; SrcBuffer
001762  48a6              LDR      r0,|L1.6652|
001764  49a6              LDR      r1,|L1.6656|
001766  6008              STR      r0,[r1,#0]            ;1589  ; SDIO_DataInitStructure
001768  4608              MOV      r0,r1                 ;1590
00176a  6044              STR      r4,[r0,#4]            ;1590  ; SDIO_DataInitStructure
00176c  9803              LDR      r0,[sp,#0xc]          ;1591
00176e  0100              LSLS     r0,r0,#4              ;1591
001770  6088              STR      r0,[r1,#8]            ;1591  ; SDIO_DataInitStructure
001772  2000              MOVS     r0,#0                 ;1592
001774  60c8              STR      r0,[r1,#0xc]          ;1592  ; SDIO_DataInitStructure
001776  6108              STR      r0,[r1,#0x10]         ;1593  ; SDIO_DataInitStructure
001778  2001              MOVS     r0,#1                 ;1594
00177a  6148              STR      r0,[r1,#0x14]         ;1594  ; SDIO_DataInitStructure
00177c  4608              MOV      r0,r1                 ;1595
00177e  f7fffffe          BL       SDIO_DataConfig
001782  48a5              LDR      r0,|L1.6680|
001784  6800              LDR      r0,[r0,#0]            ;1598  ; DeviceMode
001786  2802              CMP      r0,#2                 ;1598
001788  d166              BNE      |L1.6232|
00178a  e034              B        |L1.6134|
                  |L1.6028|
00178c  f44f4080          MOV      r0,#0x4000            ;1602
001790  f7fffffe          BL       SDIO_GetFlagStatus
001794  b378              CBZ      r0,|L1.6134|
001796  4898              LDR      r0,|L1.6648|
001798  6800              LDR      r0,[r0,#0]            ;1604  ; TotalNumberOfBytes
00179a  1b80              SUBS     r0,r0,r6              ;1604
00179c  2820              CMP      r0,#0x20              ;1604
00179e  d21e              BCS      |L1.6110|
0017a0  4895              LDR      r0,|L1.6648|
0017a2  7800              LDRB     r0,[r0,#0]            ;1606  ; TotalNumberOfBytes
0017a4  1b80              SUBS     r0,r0,r6              ;1606
0017a6  f0000003          AND      r0,r0,#3              ;1606
0017aa  b920              CBNZ     r0,|L1.6070|
0017ac  4892              LDR      r0,|L1.6648|
0017ae  6800              LDR      r0,[r0,#0]            ;1606  ; TotalNumberOfBytes
0017b0  1b80              SUBS     r0,r0,r6              ;1606
0017b2  0880              LSRS     r0,r0,#2              ;1606
0017b4  e004              B        |L1.6080|
                  |L1.6070|
0017b6  4890              LDR      r0,|L1.6648|
0017b8  6800              LDR      r0,[r0,#0]            ;1606  ; TotalNumberOfBytes
0017ba  1b80              SUBS     r0,r0,r6              ;1606
0017bc  0880              LSRS     r0,r0,#2              ;1606
0017be  1c40              ADDS     r0,r0,#1              ;1606
                  |L1.6080|
0017c0  9000              STR      r0,[sp,#0]            ;1606
0017c2  2700              MOVS     r7,#0                 ;1608
0017c4  e007              B        |L1.6102|
                  |L1.6086|
0017c6  f8d80000          LDR      r0,[r8,#0]            ;1610
0017ca  f7fffffe          BL       SDIO_WriteData
0017ce  1c7f              ADDS     r7,r7,#1              ;1608
0017d0  f1080804          ADD      r8,r8,#4              ;1608
0017d4  1d36              ADDS     r6,r6,#4              ;1608
                  |L1.6102|
0017d6  9800              LDR      r0,[sp,#0]            ;1608
0017d8  4287              CMP      r7,r0                 ;1608
0017da  d20c              BCS      |L1.6134|
0017dc  e7f3              B        |L1.6086|
                  |L1.6110|
0017de  2700              MOVS     r7,#0                 ;1615
0017e0  e004              B        |L1.6124|
                  |L1.6114|
0017e2  f8580027          LDR      r0,[r8,r7,LSL #2]     ;1617
0017e6  f7fffffe          BL       SDIO_WriteData
0017ea  1c7f              ADDS     r7,r7,#1              ;1615
                  |L1.6124|
0017ec  2f08              CMP      r7,#8                 ;1615
0017ee  d3f8              BCC      |L1.6114|
0017f0  f1080820          ADD      r8,r8,#0x20           ;1619
0017f4  3620              ADDS     r6,r6,#0x20           ;1620
                  |L1.6134|
0017f6  4889              LDR      r0,|L1.6684|
0017f8  6b40              LDR      r0,[r0,#0x34]         ;1600
0017fa  f240611a          MOV      r1,#0x61a             ;1600
0017fe  4008              ANDS     r0,r0,r1              ;1600
001800  2800              CMP      r0,#0                 ;1600
001802  d0c3              BEQ      |L1.6028|
001804  2008              MOVS     r0,#8                 ;1624
001806  f7fffffe          BL       SDIO_GetFlagStatus
00180a  b128              CBZ      r0,|L1.6168|
00180c  2008              MOVS     r0,#8                 ;1626
00180e  f7fffffe          BL       SDIO_ClearFlag
001812  2504              MOVS     r5,#4                 ;1627
001814  4628              MOV      r0,r5                 ;1628
001816  e6e9              B        |L1.5612|
                  |L1.6168|
001818  2002              MOVS     r0,#2                 ;1630
00181a  f7fffffe          BL       SDIO_GetFlagStatus
00181e  b128              CBZ      r0,|L1.6188|
001820  2002              MOVS     r0,#2                 ;1632
001822  f7fffffe          BL       SDIO_ClearFlag
001826  2502              MOVS     r5,#2                 ;1633
001828  4628              MOV      r0,r5                 ;1634
00182a  e6df              B        |L1.5612|
                  |L1.6188|
00182c  2010              MOVS     r0,#0x10              ;1636
00182e  f7fffffe          BL       SDIO_GetFlagStatus
001832  b128              CBZ      r0,|L1.6208|
001834  2010              MOVS     r0,#0x10              ;1638
001836  f7fffffe          BL       SDIO_ClearFlag
00183a  2505              MOVS     r5,#5                 ;1639
00183c  4628              MOV      r0,r5                 ;1640
00183e  e6d5              B        |L1.5612|
                  |L1.6208|
001840  f44f7000          MOV      r0,#0x200             ;1642
001844  f7fffffe          BL       SDIO_GetFlagStatus
001848  b3f0              CBZ      r0,|L1.6344|
00184a  f44f7000          MOV      r0,#0x200             ;1644
00184e  f7fffffe          BL       SDIO_ClearFlag
001852  2507              MOVS     r5,#7                 ;1645
001854  4628              MOV      r0,r5                 ;1646
001856  e6c9              B        |L1.5612|
                  |L1.6232|
001858  486f              LDR      r0,|L1.6680|
00185a  6800              LDR      r0,[r0,#0]            ;1649  ; DeviceMode
00185c  2801              CMP      r0,#1                 ;1649
00185e  d113              BNE      |L1.6280|
001860  2101              MOVS     r1,#1                 ;1651
001862  f244301a          MOV      r0,#0x431a            ;1651
001866  f7fffffe          BL       SDIO_ITConfig
00186a  bf00              NOP                            ;1652
                  |L1.6252|
00186c  4861              LDR      r0,|L1.6644|
00186e  6800              LDR      r0,[r0,#0]            ;1652  ; TransferEnd
001870  b918              CBNZ     r0,|L1.6266|
001872  485f              LDR      r0,|L1.6640|
001874  7800              LDRB     r0,[r0,#0]            ;1652  ; TransferError
001876  282a              CMP      r0,#0x2a              ;1652
001878  d0f8              BEQ      |L1.6252|
                  |L1.6266|
00187a  485d              LDR      r0,|L1.6640|
00187c  7800              LDRB     r0,[r0,#0]            ;1654  ; TransferError
00187e  282a              CMP      r0,#0x2a              ;1654
001880  d025              BEQ      |L1.6350|
001882  485b              LDR      r0,|L1.6640|
001884  7800              LDRB     r0,[r0,#0]            ;1656  ; TransferError
001886  e6b1              B        |L1.5612|
                  |L1.6280|
001888  4863              LDR      r0,|L1.6680|
00188a  6800              LDR      r0,[r0,#0]            ;1659  ; DeviceMode
00188c  b9e0              CBNZ     r0,|L1.6344|
00188e  2101              MOVS     r1,#1                 ;1661
001890  f240301a          MOV      r0,#0x31a             ;1661
001894  f7fffffe          BL       SDIO_ITConfig
001898  4621              MOV      r1,r4                 ;1662
00189a  4648              MOV      r0,r9                 ;1662
00189c  f7fffffe          BL       SD_LowLevel_DMA_TxConfig
0018a0  2001              MOVS     r0,#1                 ;1663
0018a2  f7fffffe          BL       SDIO_DMACmd
0018a6  bf00              NOP                            ;1664
                  |L1.6312|
0018a8  f7fffffe          BL       SD_DMAEndOfTransferStatus
0018ac  b930              CBNZ     r0,|L1.6332|
0018ae  4851              LDR      r0,|L1.6644|
0018b0  6800              LDR      r0,[r0,#0]            ;1664  ; TransferEnd
0018b2  b918              CBNZ     r0,|L1.6332|
0018b4  484e              LDR      r0,|L1.6640|
0018b6  7800              LDRB     r0,[r0,#0]            ;1664  ; TransferError
0018b8  282a              CMP      r0,#0x2a              ;1664
0018ba  d0f5              BEQ      |L1.6312|
                  |L1.6332|
0018bc  484c              LDR      r0,|L1.6640|
0018be  7800              LDRB     r0,[r0,#0]            ;1666  ; TransferError
0018c0  282a              CMP      r0,#0x2a              ;1666
0018c2  d004              BEQ      |L1.6350|
0018c4  484a              LDR      r0,|L1.6640|
0018c6  e000              B        |L1.6346|
                  |L1.6344|
0018c8  e001              B        |L1.6350|
                  |L1.6346|
0018ca  7800              LDRB     r0,[r0,#0]            ;1668  ; TransferError
0018cc  e68e              B        |L1.5612|
                  |L1.6350|
0018ce  f24050ff          MOV      r0,#0x5ff             ;1673
0018d2  f7fffffe          BL       SDIO_ClearFlag
0018d6  a802              ADD      r0,sp,#8              ;1676
0018d8  f7fffffe          BL       IsCardProgramming
0018dc  4605              MOV      r5,r0                 ;1676
0018de  e003              B        |L1.6376|
                  |L1.6368|
0018e0  a802              ADD      r0,sp,#8              ;1680
0018e2  f7fffffe          BL       IsCardProgramming
0018e6  4605              MOV      r5,r0                 ;1680
                  |L1.6376|
0018e8  2d2a              CMP      r5,#0x2a              ;1678
0018ea  d107              BNE      |L1.6396|
0018ec  f89d0008          LDRB     r0,[sp,#8]            ;1678
0018f0  2807              CMP      r0,#7                 ;1678
0018f2  d0f5              BEQ      |L1.6368|
0018f4  f89d0008          LDRB     r0,[sp,#8]            ;1678
0018f8  2806              CMP      r0,#6                 ;1678
0018fa  d0f1              BEQ      |L1.6368|
                  |L1.6396|
0018fc  4628              MOV      r0,r5                 ;1683
0018fe  e675              B        |L1.5612|
;;;1685   
                          ENDP

                  SD_WriteMultiBlocks PROC
;;;1693     */
;;;1694   SD_Error SD_WriteMultiBlocks(uint8_t *writebuff, uint32_t WriteAddr, uint16_t BlockSize, uint32_t NumberOfBlocks)
001900  e92d4ffe          PUSH     {r1-r11,lr}
;;;1695   {
001904  4681              MOV      r9,r0
001906  468a              MOV      r10,r1
001908  4614              MOV      r4,r2
00190a  461e              MOV      r6,r3
;;;1696     SD_Error errorstatus = SD_OK;
00190c  252a              MOVS     r5,#0x2a
;;;1697     uint8_t  power = 0, cardstate = 0;
00190e  f04f0b00          MOV      r11,#0
001912  2000              MOVS     r0,#0
001914  9002              STR      r0,[sp,#8]
;;;1698     uint32_t bytestransferred = 0;
001916  2700              MOVS     r7,#0
;;;1699     uint32_t restwords = 0;
001918  9001              STR      r0,[sp,#4]
;;;1700     uint32_t *tempbuff = (uint32_t *)writebuff;
00191a  46c8              MOV      r8,r9
;;;1701     __IO uint32_t count = 0;
00191c  9000              STR      r0,[sp,#0]
;;;1702     
;;;1703     if (writebuff == NULL)
00191e  f1b90f00          CMP      r9,#0
001922  d103              BNE      |L1.6444|
;;;1704     {
;;;1705       errorstatus = SD_INVALID_PARAMETER;
001924  2526              MOVS     r5,#0x26
;;;1706       return(errorstatus);
001926  4628              MOV      r0,r5
                  |L1.6440|
;;;1707     }
;;;1708   
;;;1709     TransferError = SD_OK;
;;;1710     TransferEnd = 0;
;;;1711     TotalNumberOfBytes = 0;
;;;1712   
;;;1713     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1714     SDIO_DataInitStructure.SDIO_DataLength = 0;
;;;1715     SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
;;;1716     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
;;;1717     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1718     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
;;;1719     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1720     SDIO_DMACmd(DISABLE);
;;;1721   
;;;1722     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
;;;1723     {
;;;1724       errorstatus = SD_LOCK_UNLOCK_FAILED;
;;;1725       return(errorstatus);
;;;1726     }
;;;1727   
;;;1728     if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
;;;1729     {
;;;1730       BlockSize = 512;
;;;1731       WriteAddr /= 512;
;;;1732     }
;;;1733     
;;;1734     /*!< Set the block size, both on controller and card */
;;;1735     if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
;;;1736     {
;;;1737       power = convert_from_bytes_to_power_of_two(BlockSize);
;;;1738   
;;;1739       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
;;;1740       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
;;;1741       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1742       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1743       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1744       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1745   
;;;1746       errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
;;;1747   
;;;1748       if (errorstatus != SD_OK)
;;;1749       {
;;;1750         return(errorstatus);
;;;1751       }
;;;1752     }
;;;1753     else
;;;1754     {
;;;1755       errorstatus = SD_INVALID_PARAMETER;
;;;1756       return(errorstatus);
;;;1757     }
;;;1758   
;;;1759     /*!< Wait till card is ready for data Added */
;;;1760     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
;;;1761     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
;;;1762     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1763     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1764     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1765     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1766   
;;;1767     errorstatus = CmdResp1Error(SD_CMD_SEND_STATUS);
;;;1768   
;;;1769     if (errorstatus != SD_OK)
;;;1770     {
;;;1771       return(errorstatus);
;;;1772     }
;;;1773   
;;;1774     if (NumberOfBlocks > 1)
;;;1775     {
;;;1776       /*!< Common to all modes */
;;;1777       if (NumberOfBlocks * BlockSize > SD_MAX_DATA_LENGTH)
;;;1778       {
;;;1779         errorstatus = SD_INVALID_PARAMETER;
;;;1780         return(errorstatus);
;;;1781       }
;;;1782   
;;;1783       if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
;;;1784       {
;;;1785         /*!< To improve performance */
;;;1786         SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
;;;1787         SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;1788         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1789         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1790         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1791         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1792   
;;;1793   
;;;1794         errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;1795   
;;;1796         if (errorstatus != SD_OK)
;;;1797         {
;;;1798           return(errorstatus);
;;;1799         }
;;;1800         /*!< To improve performance */
;;;1801         SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)NumberOfBlocks;
;;;1802         SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCK_COUNT;
;;;1803         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1804         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1805         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1806         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1807   
;;;1808         errorstatus = CmdResp1Error(SD_CMD_SET_BLOCK_COUNT);
;;;1809   
;;;1810         if (errorstatus != SD_OK)
;;;1811         {
;;;1812           return(errorstatus);
;;;1813         }
;;;1814       }
;;;1815   
;;;1816       /*!< Send CMD25 WRITE_MULT_BLOCK with argument data address */
;;;1817       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)WriteAddr;
;;;1818       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
;;;1819       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1820       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1821       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1822       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1823   
;;;1824       errorstatus = CmdResp1Error(SD_CMD_WRITE_MULT_BLOCK);
;;;1825   
;;;1826       if (SD_OK != errorstatus)
;;;1827       {
;;;1828         return(errorstatus);
;;;1829       }
;;;1830   
;;;1831       TotalNumberOfBytes = NumberOfBlocks * BlockSize;
;;;1832       StopCondition = 1;
;;;1833       SrcBuffer = (uint32_t *)writebuff;
;;;1834   
;;;1835       SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1836       SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
;;;1837       SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
;;;1838       SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
;;;1839       SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1840       SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;1841       SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1842   
;;;1843       if (DeviceMode == SD_POLLING_MODE)
;;;1844       {
;;;1845         while (!(SDIO->STA & (SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DATAEND | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_STBITERR)))
;;;1846         {
;;;1847           if (SDIO_GetFlagStatus(SDIO_FLAG_TXFIFOHE) != RESET)
;;;1848           {
;;;1849             if (!((TotalNumberOfBytes - bytestransferred) < SD_HALFFIFOBYTES))
;;;1850             {
;;;1851               for (count = 0; count < SD_HALFFIFO; count++)
;;;1852               {
;;;1853                 SDIO_WriteData(*(tempbuff + count));
;;;1854               }
;;;1855               tempbuff += SD_HALFFIFO;
;;;1856               bytestransferred += SD_HALFFIFOBYTES;
;;;1857             }
;;;1858             else
;;;1859             {
;;;1860               restwords = ((TotalNumberOfBytes - bytestransferred) % 4 == 0) ? ((TotalNumberOfBytes - bytestransferred) / 4) :
;;;1861                           ((TotalNumberOfBytes - bytestransferred) / 4 + 1);
;;;1862   
;;;1863               for (count = 0; count < restwords; count++, tempbuff++, bytestransferred += 4)
;;;1864               {
;;;1865                 SDIO_WriteData(*tempbuff);
;;;1866               }
;;;1867             }
;;;1868           }
;;;1869         }
;;;1870   
;;;1871         if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;1872         {
;;;1873           SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;1874           errorstatus = SD_DATA_TIMEOUT;
;;;1875           return(errorstatus);
;;;1876         }
;;;1877         else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;1878         {
;;;1879           SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;1880           errorstatus = SD_DATA_CRC_FAIL;
;;;1881           return(errorstatus);
;;;1882         }
;;;1883         else if (SDIO_GetFlagStatus(SDIO_FLAG_TXUNDERR) != RESET)
;;;1884         {
;;;1885           SDIO_ClearFlag(SDIO_FLAG_TXUNDERR);
;;;1886           errorstatus = SD_TX_UNDERRUN;
;;;1887           return(errorstatus);
;;;1888         }
;;;1889         else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;1890         {
;;;1891           SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;1892           errorstatus = SD_START_BIT_ERR;
;;;1893           return(errorstatus);
;;;1894         }
;;;1895   
;;;1896         if (SDIO_GetFlagStatus(SDIO_FLAG_DATAEND) != RESET)
;;;1897         {
;;;1898          if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
;;;1899           {
;;;1900             /*!< Send CMD12 STOP_TRANSMISSION */
;;;1901             SDIO_CmdInitStructure.SDIO_Argument = 0x0;
;;;1902             SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_STOP_TRANSMISSION;
;;;1903             SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1904             SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1905             SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1906             SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1907   
;;;1908   
;;;1909             errorstatus = CmdResp1Error(SD_CMD_STOP_TRANSMISSION);
;;;1910   
;;;1911             if (errorstatus != SD_OK)
;;;1912             {
;;;1913               return(errorstatus);
;;;1914             }
;;;1915           }
;;;1916         }
;;;1917       }
;;;1918       else if (DeviceMode == SD_INTERRUPT_MODE)
;;;1919       {
;;;1920         SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_TXFIFOHE | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR, ENABLE);
;;;1921         while ((TransferEnd == 0) && (TransferError == SD_OK))
;;;1922         {}
;;;1923         if (TransferError != SD_OK)
;;;1924         {
;;;1925           return(TransferError);
;;;1926         }
;;;1927       }
;;;1928       else if (DeviceMode == SD_DMA_MODE)
;;;1929       {
;;;1930         SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR, ENABLE);
;;;1931         SDIO_DMACmd(ENABLE);
;;;1932         SD_LowLevel_DMA_TxConfig((uint32_t *)writebuff, (NumberOfBlocks * BlockSize));
;;;1933         while ((SD_DMAEndOfTransferStatus() == RESET) && (TransferEnd == 0) && (TransferError == SD_OK))
;;;1934         {}
;;;1935         if (TransferError != SD_OK)
;;;1936         {
;;;1937           return(TransferError);
;;;1938         }
;;;1939       }
;;;1940     }
;;;1941     /*!< Clear all the static flags */
;;;1942     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;1943     
;;;1944     /*!< Add some delay before checking the Card Status */
;;;1945     for(count = 0; count < 0Xffff; count++)
;;;1946     {
;;;1947     }
;;;1948     /*!< Wait till the card is in programming state */
;;;1949     errorstatus = IsCardProgramming(&cardstate);
;;;1950   
;;;1951     while ((errorstatus == SD_OK) && ((cardstate == SD_CARD_PROGRAMMING) || (cardstate == SD_CARD_RECEIVING)))
;;;1952     {
;;;1953       errorstatus = IsCardProgramming(&cardstate);
;;;1954     }
;;;1955   
;;;1956     return(errorstatus);
;;;1957   }
001928  e8bd8ffe          POP      {r1-r11,pc}
                  |L1.6444|
00192c  202a              MOVS     r0,#0x2a              ;1709
00192e  4930              LDR      r1,|L1.6640|
001930  7008              STRB     r0,[r1,#0]            ;1709
001932  2000              MOVS     r0,#0                 ;1710
001934  492f              LDR      r1,|L1.6644|
001936  6008              STR      r0,[r1,#0]            ;1710  ; TransferEnd
001938  492f              LDR      r1,|L1.6648|
00193a  6008              STR      r0,[r1,#0]            ;1711  ; TotalNumberOfBytes
00193c  482f              LDR      r0,|L1.6652|
00193e  4930              LDR      r1,|L1.6656|
001940  6008              STR      r0,[r1,#0]            ;1713  ; SDIO_DataInitStructure
001942  2000              MOVS     r0,#0                 ;1714
001944  6048              STR      r0,[r1,#4]            ;1714  ; SDIO_DataInitStructure
001946  6088              STR      r0,[r1,#8]            ;1715  ; SDIO_DataInitStructure
001948  60c8              STR      r0,[r1,#0xc]          ;1716  ; SDIO_DataInitStructure
00194a  6108              STR      r0,[r1,#0x10]         ;1717  ; SDIO_DataInitStructure
00194c  6148              STR      r0,[r1,#0x14]         ;1718  ; SDIO_DataInitStructure
00194e  4608              MOV      r0,r1                 ;1719
001950  f7fffffe          BL       SDIO_DataConfig
001954  2000              MOVS     r0,#0                 ;1720
001956  f7fffffe          BL       SDIO_DMACmd
00195a  2000              MOVS     r0,#0                 ;1722
00195c  f7fffffe          BL       SDIO_GetResponse
001960  f0007000          AND      r0,r0,#0x2000000      ;1722
001964  b110              CBZ      r0,|L1.6508|
001966  250e              MOVS     r5,#0xe               ;1724
001968  4628              MOV      r0,r5                 ;1725
00196a  e7dd              B        |L1.6440|
                  |L1.6508|
00196c  4825              LDR      r0,|L1.6660|
00196e  6800              LDR      r0,[r0,#0]            ;1728  ; CardType
001970  2802              CMP      r0,#2                 ;1728
001972  d102              BNE      |L1.6522|
001974  0204              LSLS     r4,r0,#8              ;1730
001976  ea4f2a5a          LSR      r10,r10,#9            ;1731
                  |L1.6522|
00197a  2c00              CMP      r4,#0                 ;1735
00197c  dd20              BLE      |L1.6592|
00197e  f5b46f00          CMP      r4,#0x800             ;1735
001982  dc1d              BGT      |L1.6592|
001984  1e60              SUBS     r0,r4,#1              ;1735
001986  4020              ANDS     r0,r0,r4              ;1735
001988  b9d0              CBNZ     r0,|L1.6592|
00198a  4620              MOV      r0,r4                 ;1737
00198c  f7fffffe          BL       convert_from_bytes_to_power_of_two
001990  4683              MOV      r11,r0                ;1737
001992  481d              LDR      r0,|L1.6664|
001994  6004              STR      r4,[r0,#0]            ;1739  ; SDIO_CmdInitStructure
001996  2010              MOVS     r0,#0x10              ;1740
001998  491b              LDR      r1,|L1.6664|
00199a  6048              STR      r0,[r1,#4]            ;1740  ; SDIO_CmdInitStructure
00199c  2040              MOVS     r0,#0x40              ;1741
00199e  6088              STR      r0,[r1,#8]            ;1741  ; SDIO_CmdInitStructure
0019a0  2000              MOVS     r0,#0                 ;1742
0019a2  60c8              STR      r0,[r1,#0xc]          ;1742  ; SDIO_CmdInitStructure
0019a4  f44f6080          MOV      r0,#0x400             ;1743
0019a8  6108              STR      r0,[r1,#0x10]         ;1743  ; SDIO_CmdInitStructure
0019aa  4608              MOV      r0,r1                 ;1744
0019ac  f7fffffe          BL       SDIO_SendCommand
0019b0  2010              MOVS     r0,#0x10              ;1746
0019b2  f7fffffe          BL       CmdResp1Error
0019b6  4605              MOV      r5,r0                 ;1746
0019b8  2d2a              CMP      r5,#0x2a              ;1748
0019ba  d004              BEQ      |L1.6598|
0019bc  4628              MOV      r0,r5                 ;1750
0019be  e7b3              B        |L1.6440|
                  |L1.6592|
0019c0  2526              MOVS     r5,#0x26              ;1755
0019c2  4628              MOV      r0,r5                 ;1756
0019c4  e7b0              B        |L1.6440|
                  |L1.6598|
0019c6  4811              LDR      r0,|L1.6668|
0019c8  8800              LDRH     r0,[r0,#0]            ;1760  ; RCA
0019ca  0400              LSLS     r0,r0,#16             ;1760
0019cc  490e              LDR      r1,|L1.6664|
0019ce  6008              STR      r0,[r1,#0]            ;1760  ; SDIO_CmdInitStructure
0019d0  200d              MOVS     r0,#0xd               ;1761
0019d2  6048              STR      r0,[r1,#4]            ;1761  ; SDIO_CmdInitStructure
0019d4  2040              MOVS     r0,#0x40              ;1762
0019d6  6088              STR      r0,[r1,#8]            ;1762  ; SDIO_CmdInitStructure
0019d8  2000              MOVS     r0,#0                 ;1763
0019da  60c8              STR      r0,[r1,#0xc]          ;1763  ; SDIO_CmdInitStructure
0019dc  f44f6080          MOV      r0,#0x400             ;1764
0019e0  6108              STR      r0,[r1,#0x10]         ;1764  ; SDIO_CmdInitStructure
0019e2  4608              MOV      r0,r1                 ;1765
0019e4  f7fffffe          BL       SDIO_SendCommand
0019e8  200d              MOVS     r0,#0xd               ;1767
0019ea  f7fffffe          BL       CmdResp1Error
0019ee  e017              B        |L1.6688|
                  |L1.6640|
                          DCD      TransferError
                  |L1.6644|
                          DCD      TransferEnd
                  |L1.6648|
                          DCD      TotalNumberOfBytes
                  |L1.6652|
                          DCD      0x000fffff
                  |L1.6656|
                          DCD      SDIO_DataInitStructure
                  |L1.6660|
                          DCD      CardType
                  |L1.6664|
                          DCD      SDIO_CmdInitStructure
                  |L1.6668|
                          DCD      ||RCA||
                  |L1.6672|
                          DCD      StopCondition
                  |L1.6676|
                          DCD      SrcBuffer
                  |L1.6680|
                          DCD      DeviceMode
                  |L1.6684|
                          DCD      0x40018000
                  |L1.6688|
001a20  4605              MOV      r5,r0                 ;1767
001a22  2d2a              CMP      r5,#0x2a              ;1769
001a24  d001              BEQ      |L1.6698|
001a26  4628              MOV      r0,r5                 ;1771
001a28  e77e              B        |L1.6440|
                  |L1.6698|
001a2a  2e01              CMP      r6,#1                 ;1774
001a2c  d97a              BLS      |L1.6948|
001a2e  fb06f004          MUL      r0,r6,r4              ;1777
001a32  f1b07f00          CMP      r0,#0x2000000         ;1777
001a36  d302              BCC      |L1.6718|
001a38  2526              MOVS     r5,#0x26              ;1779
001a3a  4628              MOV      r0,r5                 ;1780
001a3c  e774              B        |L1.6440|
                  |L1.6718|
001a3e  48fe              LDR      r0,|L1.7736|
001a40  6800              LDR      r0,[r0,#0]            ;1783  ; CardType
001a42  b138              CBZ      r0,|L1.6740|
001a44  48fc              LDR      r0,|L1.7736|
001a46  6800              LDR      r0,[r0,#0]            ;1783  ; CardType
001a48  2801              CMP      r0,#1                 ;1783
001a4a  d003              BEQ      |L1.6740|
001a4c  48fa              LDR      r0,|L1.7736|
001a4e  6800              LDR      r0,[r0,#0]            ;1783  ; CardType
001a50  2802              CMP      r0,#2                 ;1783
001a52  d12f              BNE      |L1.6836|
                  |L1.6740|
001a54  48f9              LDR      r0,|L1.7740|
001a56  8800              LDRH     r0,[r0,#0]            ;1786  ; RCA
001a58  0400              LSLS     r0,r0,#16             ;1786
001a5a  49f9              LDR      r1,|L1.7744|
001a5c  6008              STR      r0,[r1,#0]            ;1786  ; SDIO_CmdInitStructure
001a5e  2037              MOVS     r0,#0x37              ;1787
001a60  6048              STR      r0,[r1,#4]            ;1787  ; SDIO_CmdInitStructure
001a62  2040              MOVS     r0,#0x40              ;1788
001a64  6088              STR      r0,[r1,#8]            ;1788  ; SDIO_CmdInitStructure
001a66  2000              MOVS     r0,#0                 ;1789
001a68  60c8              STR      r0,[r1,#0xc]          ;1789  ; SDIO_CmdInitStructure
001a6a  f44f6080          MOV      r0,#0x400             ;1790
001a6e  6108              STR      r0,[r1,#0x10]         ;1790  ; SDIO_CmdInitStructure
001a70  4608              MOV      r0,r1                 ;1791
001a72  f7fffffe          BL       SDIO_SendCommand
001a76  2037              MOVS     r0,#0x37              ;1794
001a78  f7fffffe          BL       CmdResp1Error
001a7c  4605              MOV      r5,r0                 ;1794
001a7e  2d2a              CMP      r5,#0x2a              ;1796
001a80  d001              BEQ      |L1.6790|
001a82  4628              MOV      r0,r5                 ;1798
001a84  e750              B        |L1.6440|
                  |L1.6790|
001a86  48ee              LDR      r0,|L1.7744|
001a88  6006              STR      r6,[r0,#0]            ;1801  ; SDIO_CmdInitStructure
001a8a  2017              MOVS     r0,#0x17              ;1802
001a8c  49ec              LDR      r1,|L1.7744|
001a8e  6048              STR      r0,[r1,#4]            ;1802  ; SDIO_CmdInitStructure
001a90  2040              MOVS     r0,#0x40              ;1803
001a92  6088              STR      r0,[r1,#8]            ;1803  ; SDIO_CmdInitStructure
001a94  2000              MOVS     r0,#0                 ;1804
001a96  60c8              STR      r0,[r1,#0xc]          ;1804  ; SDIO_CmdInitStructure
001a98  f44f6080          MOV      r0,#0x400             ;1805
001a9c  6108              STR      r0,[r1,#0x10]         ;1805  ; SDIO_CmdInitStructure
001a9e  4608              MOV      r0,r1                 ;1806
001aa0  f7fffffe          BL       SDIO_SendCommand
001aa4  2017              MOVS     r0,#0x17              ;1808
001aa6  f7fffffe          BL       CmdResp1Error
001aaa  4605              MOV      r5,r0                 ;1808
001aac  2d2a              CMP      r5,#0x2a              ;1810
001aae  d001              BEQ      |L1.6836|
001ab0  4628              MOV      r0,r5                 ;1812
001ab2  e739              B        |L1.6440|
                  |L1.6836|
001ab4  48e2              LDR      r0,|L1.7744|
001ab6  f8c0a000          STR      r10,[r0,#0]           ;1817  ; SDIO_CmdInitStructure
001aba  2019              MOVS     r0,#0x19              ;1818
001abc  49e0              LDR      r1,|L1.7744|
001abe  6048              STR      r0,[r1,#4]            ;1818  ; SDIO_CmdInitStructure
001ac0  2040              MOVS     r0,#0x40              ;1819
001ac2  6088              STR      r0,[r1,#8]            ;1819  ; SDIO_CmdInitStructure
001ac4  2000              MOVS     r0,#0                 ;1820
001ac6  60c8              STR      r0,[r1,#0xc]          ;1820  ; SDIO_CmdInitStructure
001ac8  f44f6080          MOV      r0,#0x400             ;1821
001acc  6108              STR      r0,[r1,#0x10]         ;1821  ; SDIO_CmdInitStructure
001ace  4608              MOV      r0,r1                 ;1822
001ad0  f7fffffe          BL       SDIO_SendCommand
001ad4  2019              MOVS     r0,#0x19              ;1824
001ad6  f7fffffe          BL       CmdResp1Error
001ada  4605              MOV      r5,r0                 ;1824
001adc  2d2a              CMP      r5,#0x2a              ;1826
001ade  d001              BEQ      |L1.6884|
001ae0  4628              MOV      r0,r5                 ;1828
001ae2  e721              B        |L1.6440|
                  |L1.6884|
001ae4  fb06f004          MUL      r0,r6,r4              ;1831
001ae8  49d6              LDR      r1,|L1.7748|
001aea  6008              STR      r0,[r1,#0]            ;1831  ; TotalNumberOfBytes
001aec  2001              MOVS     r0,#1                 ;1832
001aee  49d6              LDR      r1,|L1.7752|
001af0  6008              STR      r0,[r1,#0]            ;1832  ; StopCondition
001af2  48d6              LDR      r0,|L1.7756|
001af4  f8c09000          STR      r9,[r0,#0]            ;1833  ; SrcBuffer
001af8  48d5              LDR      r0,|L1.7760|
001afa  49d6              LDR      r1,|L1.7764|
001afc  6008              STR      r0,[r1,#0]            ;1835  ; SDIO_DataInitStructure
001afe  fb06f004          MUL      r0,r6,r4              ;1836
001b02  6048              STR      r0,[r1,#4]            ;1836  ; SDIO_DataInitStructure
001b04  ea4f100b          LSL      r0,r11,#4             ;1837
001b08  6088              STR      r0,[r1,#8]            ;1837  ; SDIO_DataInitStructure
001b0a  2000              MOVS     r0,#0                 ;1838
001b0c  60c8              STR      r0,[r1,#0xc]          ;1838  ; SDIO_DataInitStructure
001b0e  6108              STR      r0,[r1,#0x10]         ;1839  ; SDIO_DataInitStructure
001b10  2001              MOVS     r0,#1                 ;1840
001b12  6148              STR      r0,[r1,#0x14]         ;1840  ; SDIO_DataInitStructure
001b14  4608              MOV      r0,r1                 ;1841
001b16  f7fffffe          BL       SDIO_DataConfig
001b1a  48cf              LDR      r0,|L1.7768|
001b1c  6800              LDR      r0,[r0,#0]            ;1843  ; DeviceMode
001b1e  2802              CMP      r0,#2                 ;1843
001b20  d170              BNE      |L1.7172|
001b22  e03e              B        |L1.7074|
                  |L1.6948|
001b24  e0d1              B        |L1.7370|
                  |L1.6950|
001b26  f44f4080          MOV      r0,#0x4000            ;1847
001b2a  f7fffffe          BL       SDIO_GetFlagStatus
001b2e  b3c0              CBZ      r0,|L1.7074|
001b30  48c4              LDR      r0,|L1.7748|
001b32  6800              LDR      r0,[r0,#0]            ;1849  ; TotalNumberOfBytes
001b34  1bc0              SUBS     r0,r0,r7              ;1849
001b36  2820              CMP      r0,#0x20              ;1849
001b38  d311              BCC      |L1.7006|
001b3a  2000              MOVS     r0,#0                 ;1851
001b3c  9000              STR      r0,[sp,#0]            ;1851
001b3e  e007              B        |L1.6992|
                  |L1.6976|
001b40  9900              LDR      r1,[sp,#0]            ;1853
001b42  f8580021          LDR      r0,[r8,r1,LSL #2]     ;1853
001b46  f7fffffe          BL       SDIO_WriteData
001b4a  9800              LDR      r0,[sp,#0]            ;1851
001b4c  1c40              ADDS     r0,r0,#1              ;1851
001b4e  9000              STR      r0,[sp,#0]            ;1851
                  |L1.6992|
001b50  9800              LDR      r0,[sp,#0]            ;1851
001b52  2808              CMP      r0,#8                 ;1851
001b54  d3f4              BCC      |L1.6976|
001b56  f1080820          ADD      r8,r8,#0x20           ;1855
001b5a  3720              ADDS     r7,r7,#0x20           ;1856
001b5c  e021              B        |L1.7074|
                  |L1.7006|
001b5e  48b9              LDR      r0,|L1.7748|
001b60  7800              LDRB     r0,[r0,#0]            ;1860  ; TotalNumberOfBytes
001b62  1bc0              SUBS     r0,r0,r7              ;1860
001b64  f0000003          AND      r0,r0,#3              ;1860
001b68  b920              CBNZ     r0,|L1.7028|
001b6a  48b6              LDR      r0,|L1.7748|
001b6c  6800              LDR      r0,[r0,#0]            ;1860  ; TotalNumberOfBytes
001b6e  1bc0              SUBS     r0,r0,r7              ;1860
001b70  0880              LSRS     r0,r0,#2              ;1860
001b72  e004              B        |L1.7038|
                  |L1.7028|
001b74  48b3              LDR      r0,|L1.7748|
001b76  6800              LDR      r0,[r0,#0]            ;1861  ; TotalNumberOfBytes
001b78  1bc0              SUBS     r0,r0,r7              ;1861
001b7a  0880              LSRS     r0,r0,#2              ;1861
001b7c  1c40              ADDS     r0,r0,#1              ;1861
                  |L1.7038|
001b7e  9001              STR      r0,[sp,#4]            ;1861
001b80  2000              MOVS     r0,#0                 ;1863
001b82  9000              STR      r0,[sp,#0]            ;1863
001b84  e009              B        |L1.7066|
                  |L1.7046|
001b86  f8d80000          LDR      r0,[r8,#0]            ;1865
001b8a  f7fffffe          BL       SDIO_WriteData
001b8e  9800              LDR      r0,[sp,#0]            ;1863
001b90  1c40              ADDS     r0,r0,#1              ;1863
001b92  9000              STR      r0,[sp,#0]            ;1863
001b94  f1080804          ADD      r8,r8,#4              ;1863
001b98  1d3f              ADDS     r7,r7,#4              ;1863
                  |L1.7066|
001b9a  e9dd1000          LDRD     r1,r0,[sp,#0]         ;1863
001b9e  4281              CMP      r1,r0                 ;1863
001ba0  d3f1              BCC      |L1.7046|
                  |L1.7074|
001ba2  48ae              LDR      r0,|L1.7772|
001ba4  6b40              LDR      r0,[r0,#0x34]         ;1845
001ba6  f240311a          MOV      r1,#0x31a             ;1845
001baa  4008              ANDS     r0,r0,r1              ;1845
001bac  2800              CMP      r0,#0                 ;1845
001bae  d0ba              BEQ      |L1.6950|
001bb0  2008              MOVS     r0,#8                 ;1871
001bb2  f7fffffe          BL       SDIO_GetFlagStatus
001bb6  b128              CBZ      r0,|L1.7108|
001bb8  2008              MOVS     r0,#8                 ;1873
001bba  f7fffffe          BL       SDIO_ClearFlag
001bbe  2504              MOVS     r5,#4                 ;1874
001bc0  4628              MOV      r0,r5                 ;1875
001bc2  e6b1              B        |L1.6440|
                  |L1.7108|
001bc4  2002              MOVS     r0,#2                 ;1877
001bc6  f7fffffe          BL       SDIO_GetFlagStatus
001bca  b128              CBZ      r0,|L1.7128|
001bcc  2002              MOVS     r0,#2                 ;1879
001bce  f7fffffe          BL       SDIO_ClearFlag
001bd2  2502              MOVS     r5,#2                 ;1880
001bd4  4628              MOV      r0,r5                 ;1881
001bd6  e6a7              B        |L1.6440|
                  |L1.7128|
001bd8  2010              MOVS     r0,#0x10              ;1883
001bda  f7fffffe          BL       SDIO_GetFlagStatus
001bde  b128              CBZ      r0,|L1.7148|
001be0  2010              MOVS     r0,#0x10              ;1885
001be2  f7fffffe          BL       SDIO_ClearFlag
001be6  2505              MOVS     r5,#5                 ;1886
001be8  4628              MOV      r0,r5                 ;1887
001bea  e69d              B        |L1.6440|
                  |L1.7148|
001bec  f44f7000          MOV      r0,#0x200             ;1889
001bf0  f7fffffe          BL       SDIO_GetFlagStatus
001bf4  b138              CBZ      r0,|L1.7174|
001bf6  f44f7000          MOV      r0,#0x200             ;1891
001bfa  f7fffffe          BL       SDIO_ClearFlag
001bfe  2507              MOVS     r5,#7                 ;1892
001c00  4628              MOV      r0,r5                 ;1893
001c02  e691              B        |L1.6440|
                  |L1.7172|
001c04  e027              B        |L1.7254|
                  |L1.7174|
001c06  f44f7080          MOV      r0,#0x100             ;1896
001c0a  f7fffffe          BL       SDIO_GetFlagStatus
001c0e  2800              CMP      r0,#0                 ;1896
001c10  d05b              BEQ      |L1.7370|
001c12  4889              LDR      r0,|L1.7736|
001c14  6800              LDR      r0,[r0,#0]            ;1898  ; CardType
001c16  b138              CBZ      r0,|L1.7208|
001c18  4887              LDR      r0,|L1.7736|
001c1a  6800              LDR      r0,[r0,#0]            ;1898  ; CardType
001c1c  2801              CMP      r0,#1                 ;1898
001c1e  d003              BEQ      |L1.7208|
001c20  4885              LDR      r0,|L1.7736|
001c22  6800              LDR      r0,[r0,#0]            ;1898  ; CardType
001c24  2802              CMP      r0,#2                 ;1898
001c26  d150              BNE      |L1.7370|
                  |L1.7208|
001c28  2000              MOVS     r0,#0                 ;1901
001c2a  4985              LDR      r1,|L1.7744|
001c2c  6008              STR      r0,[r1,#0]            ;1901  ; SDIO_CmdInitStructure
001c2e  200c              MOVS     r0,#0xc               ;1902
001c30  6048              STR      r0,[r1,#4]            ;1902  ; SDIO_CmdInitStructure
001c32  2040              MOVS     r0,#0x40              ;1903
001c34  6088              STR      r0,[r1,#8]            ;1903  ; SDIO_CmdInitStructure
001c36  2000              MOVS     r0,#0                 ;1904
001c38  60c8              STR      r0,[r1,#0xc]          ;1904  ; SDIO_CmdInitStructure
001c3a  f44f6080          MOV      r0,#0x400             ;1905
001c3e  6108              STR      r0,[r1,#0x10]         ;1905  ; SDIO_CmdInitStructure
001c40  4608              MOV      r0,r1                 ;1906
001c42  f7fffffe          BL       SDIO_SendCommand
001c46  200c              MOVS     r0,#0xc               ;1909
001c48  f7fffffe          BL       CmdResp1Error
001c4c  4605              MOV      r5,r0                 ;1909
001c4e  2d2a              CMP      r5,#0x2a              ;1911
001c50  d03b              BEQ      |L1.7370|
001c52  4628              MOV      r0,r5                 ;1913
001c54  e668              B        |L1.6440|
                  |L1.7254|
001c56  4880              LDR      r0,|L1.7768|
001c58  6800              LDR      r0,[r0,#0]            ;1918  ; DeviceMode
001c5a  2801              CMP      r0,#1                 ;1918
001c5c  d113              BNE      |L1.7302|
001c5e  2101              MOVS     r1,#1                 ;1920
001c60  f244301a          MOV      r0,#0x431a            ;1920
001c64  f7fffffe          BL       SDIO_ITConfig
001c68  bf00              NOP                            ;1921
                  |L1.7274|
001c6a  487d              LDR      r0,|L1.7776|
001c6c  6800              LDR      r0,[r0,#0]            ;1921  ; TransferEnd
001c6e  b918              CBNZ     r0,|L1.7288|
001c70  487c              LDR      r0,|L1.7780|
001c72  7800              LDRB     r0,[r0,#0]            ;1921  ; TransferError
001c74  282a              CMP      r0,#0x2a              ;1921
001c76  d0f8              BEQ      |L1.7274|
                  |L1.7288|
001c78  487a              LDR      r0,|L1.7780|
001c7a  7800              LDRB     r0,[r0,#0]            ;1923  ; TransferError
001c7c  282a              CMP      r0,#0x2a              ;1923
001c7e  d024              BEQ      |L1.7370|
001c80  4878              LDR      r0,|L1.7780|
001c82  7800              LDRB     r0,[r0,#0]            ;1925  ; TransferError
001c84  e650              B        |L1.6440|
                  |L1.7302|
001c86  4874              LDR      r0,|L1.7768|
001c88  6800              LDR      r0,[r0,#0]            ;1928  ; DeviceMode
001c8a  b9f0              CBNZ     r0,|L1.7370|
001c8c  2101              MOVS     r1,#1                 ;1930
001c8e  f240301a          MOV      r0,#0x31a             ;1930
001c92  f7fffffe          BL       SDIO_ITConfig
001c96  2001              MOVS     r0,#1                 ;1931
001c98  f7fffffe          BL       SDIO_DMACmd
001c9c  fb06f104          MUL      r1,r6,r4              ;1932
001ca0  4648              MOV      r0,r9                 ;1932
001ca2  f7fffffe          BL       SD_LowLevel_DMA_TxConfig
001ca6  bf00              NOP                            ;1933
                  |L1.7336|
001ca8  f7fffffe          BL       SD_DMAEndOfTransferStatus
001cac  b930              CBNZ     r0,|L1.7356|
001cae  486c              LDR      r0,|L1.7776|
001cb0  6800              LDR      r0,[r0,#0]            ;1933  ; TransferEnd
001cb2  b918              CBNZ     r0,|L1.7356|
001cb4  486b              LDR      r0,|L1.7780|
001cb6  7800              LDRB     r0,[r0,#0]            ;1933  ; TransferError
001cb8  282a              CMP      r0,#0x2a              ;1933
001cba  d0f5              BEQ      |L1.7336|
                  |L1.7356|
001cbc  4869              LDR      r0,|L1.7780|
001cbe  7800              LDRB     r0,[r0,#0]            ;1935  ; TransferError
001cc0  282a              CMP      r0,#0x2a              ;1935
001cc2  d002              BEQ      |L1.7370|
001cc4  4867              LDR      r0,|L1.7780|
001cc6  7800              LDRB     r0,[r0,#0]            ;1937  ; TransferError
001cc8  e62e              B        |L1.6440|
                  |L1.7370|
001cca  f24050ff          MOV      r0,#0x5ff             ;1942
001cce  f7fffffe          BL       SDIO_ClearFlag
001cd2  2000              MOVS     r0,#0                 ;1945
001cd4  9000              STR      r0,[sp,#0]            ;1945
001cd6  e002              B        |L1.7390|
                  |L1.7384|
001cd8  9800              LDR      r0,[sp,#0]            ;1945
001cda  1c40              ADDS     r0,r0,#1              ;1945
001cdc  9000              STR      r0,[sp,#0]            ;1945
                  |L1.7390|
001cde  f64f71ff          MOV      r1,#0xffff            ;1945
001ce2  9800              LDR      r0,[sp,#0]            ;1945
001ce4  4288              CMP      r0,r1                 ;1945
001ce6  d3f7              BCC      |L1.7384|
001ce8  a802              ADD      r0,sp,#8              ;1949
001cea  f7fffffe          BL       IsCardProgramming
001cee  4605              MOV      r5,r0                 ;1949
001cf0  e003              B        |L1.7418|
                  |L1.7410|
001cf2  a802              ADD      r0,sp,#8              ;1953
001cf4  f7fffffe          BL       IsCardProgramming
001cf8  4605              MOV      r5,r0                 ;1953
                  |L1.7418|
001cfa  2d2a              CMP      r5,#0x2a              ;1951
001cfc  d107              BNE      |L1.7438|
001cfe  f89d0008          LDRB     r0,[sp,#8]            ;1951
001d02  2807              CMP      r0,#7                 ;1951
001d04  d0f5              BEQ      |L1.7410|
001d06  f89d0008          LDRB     r0,[sp,#8]            ;1951
001d0a  2806              CMP      r0,#6                 ;1951
001d0c  d0f1              BEQ      |L1.7410|
                  |L1.7438|
001d0e  4628              MOV      r0,r5                 ;1956
001d10  e60a              B        |L1.6440|
;;;1958   
                          ENDP

                  SD_GetTransferState PROC
;;;1966     */
;;;1967   SDTransferState SD_GetTransferState(void)
001d12  4852              LDR      r0,|L1.7772|
;;;1968   {
;;;1969     if (SDIO->STA & (SDIO_FLAG_TXACT | SDIO_FLAG_RXACT))
001d14  6b40              LDR      r0,[r0,#0x34]
001d16  f4005040          AND      r0,r0,#0x3000
001d1a  b108              CBZ      r0,|L1.7456|
;;;1970     {
;;;1971       return(SD_TRANSFER_BUSY);
001d1c  2001              MOVS     r0,#1
                  |L1.7454|
;;;1972     }
;;;1973     else
;;;1974     {
;;;1975       return(SD_TRANSFER_OK);
;;;1976     }
;;;1977   }
001d1e  4770              BX       lr
                  |L1.7456|
001d20  2000              MOVS     r0,#0                 ;1975
001d22  e7fc              B        |L1.7454|
;;;1978   
                          ENDP

                  SD_StopTransfer PROC
;;;1983     */
;;;1984   SD_Error SD_StopTransfer(void)
001d24  b510              PUSH     {r4,lr}
;;;1985   {
;;;1986     SD_Error errorstatus = SD_OK;
001d26  242a              MOVS     r4,#0x2a
;;;1987   
;;;1988     /*!< Send CMD12 STOP_TRANSMISSION  */
;;;1989     SDIO_CmdInitStructure.SDIO_Argument = 0x0;
001d28  2000              MOVS     r0,#0
001d2a  4945              LDR      r1,|L1.7744|
001d2c  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
;;;1990     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_STOP_TRANSMISSION;
001d2e  200c              MOVS     r0,#0xc
001d30  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;1991     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
001d32  2040              MOVS     r0,#0x40
001d34  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;1992     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
001d36  2000              MOVS     r0,#0
001d38  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;1993     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
001d3a  f44f6080          MOV      r0,#0x400
001d3e  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;1994     SDIO_SendCommand(&SDIO_CmdInitStructure);
001d40  4608              MOV      r0,r1
001d42  f7fffffe          BL       SDIO_SendCommand
;;;1995   
;;;1996     errorstatus = CmdResp1Error(SD_CMD_STOP_TRANSMISSION);
001d46  200c              MOVS     r0,#0xc
001d48  f7fffffe          BL       CmdResp1Error
001d4c  4604              MOV      r4,r0
;;;1997   
;;;1998     return(errorstatus);
001d4e  4620              MOV      r0,r4
;;;1999   }
001d50  bd10              POP      {r4,pc}
;;;2000   
                          ENDP

                  SD_Erase PROC
;;;2006     */
;;;2007   SD_Error SD_Erase(uint32_t startaddr, uint32_t endaddr)
001d52  e92d41fc          PUSH     {r2-r8,lr}
;;;2008   {
001d56  4605              MOV      r5,r0
001d58  460e              MOV      r6,r1
;;;2009     SD_Error errorstatus = SD_OK;
001d5a  242a              MOVS     r4,#0x2a
;;;2010     uint32_t delay = 0;
001d5c  2700              MOVS     r7,#0
;;;2011     __IO uint32_t maxdelay = 0;
001d5e  2000              MOVS     r0,#0
001d60  9001              STR      r0,[sp,#4]
;;;2012     uint8_t cardstate = 0;
001d62  9000              STR      r0,[sp,#0]
;;;2013   
;;;2014     /*!< Check if the card coomnd class supports erase command */
;;;2015     if (((CSD_Tab[1] >> 20) & SD_CCCC_ERASE) == 0)
001d64  4840              LDR      r0,|L1.7784|
001d66  6840              LDR      r0,[r0,#4]  ; CSD_Tab
001d68  2120              MOVS     r1,#0x20
001d6a  ea015010          AND      r0,r1,r0,LSR #20
001d6e  b918              CBNZ     r0,|L1.7544|
;;;2016     {
;;;2017       errorstatus = SD_REQUEST_NOT_APPLICABLE;
001d70  2425              MOVS     r4,#0x25
;;;2018       return(errorstatus);
001d72  4620              MOV      r0,r4
                  |L1.7540|
;;;2019     }
;;;2020   
;;;2021     maxdelay = 120000 / ((SDIO->CLKCR & 0xFF) + 2);
;;;2022   
;;;2023     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
;;;2024     {
;;;2025       errorstatus = SD_LOCK_UNLOCK_FAILED;
;;;2026       return(errorstatus);
;;;2027     }
;;;2028   
;;;2029     if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
;;;2030     {
;;;2031       startaddr /= 512;
;;;2032       endaddr /= 512;
;;;2033     }
;;;2034     
;;;2035     /*!< According to sd-card spec 1.0 ERASE_GROUP_START (CMD32) and erase_group_end(CMD33) */
;;;2036     if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
;;;2037     {
;;;2038       /*!< Send CMD32 SD_ERASE_GRP_START with argument as addr  */
;;;2039       SDIO_CmdInitStructure.SDIO_Argument = startaddr;
;;;2040       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_ERASE_GRP_START;
;;;2041       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2042       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2043       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2044       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2045   
;;;2046       errorstatus = CmdResp1Error(SD_CMD_SD_ERASE_GRP_START);
;;;2047       if (errorstatus != SD_OK)
;;;2048       {
;;;2049         return(errorstatus);
;;;2050       }
;;;2051   
;;;2052       /*!< Send CMD33 SD_ERASE_GRP_END with argument as addr  */
;;;2053       SDIO_CmdInitStructure.SDIO_Argument = endaddr;
;;;2054       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_ERASE_GRP_END;
;;;2055       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2056       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2057       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2058       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2059   
;;;2060       errorstatus = CmdResp1Error(SD_CMD_SD_ERASE_GRP_END);
;;;2061       if (errorstatus != SD_OK)
;;;2062       {
;;;2063         return(errorstatus);
;;;2064       }
;;;2065     }
;;;2066   
;;;2067     /*!< Send CMD38 ERASE */
;;;2068     SDIO_CmdInitStructure.SDIO_Argument = 0;
;;;2069     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_ERASE;
;;;2070     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2071     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2072     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2073     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2074   
;;;2075     errorstatus = CmdResp1Error(SD_CMD_ERASE);
;;;2076   
;;;2077     if (errorstatus != SD_OK)
;;;2078     {
;;;2079       return(errorstatus);
;;;2080     }
;;;2081   
;;;2082     for (delay = 0; delay < maxdelay; delay++)
;;;2083     {}
;;;2084   
;;;2085     /*!< Wait till the card is in programming state */
;;;2086     errorstatus = IsCardProgramming(&cardstate);
;;;2087   
;;;2088     while ((errorstatus == SD_OK) && ((SD_CARD_PROGRAMMING == cardstate) || (SD_CARD_RECEIVING == cardstate)))
;;;2089     {
;;;2090       errorstatus = IsCardProgramming(&cardstate);
;;;2091     }
;;;2092   
;;;2093     return(errorstatus);
;;;2094   }
001d74  e8bd81fc          POP      {r2-r8,pc}
                  |L1.7544|
001d78  4838              LDR      r0,|L1.7772|
001d7a  6840              LDR      r0,[r0,#4]            ;2021
001d7c  b2c0              UXTB     r0,r0                 ;2021
001d7e  1c80              ADDS     r0,r0,#2              ;2021
001d80  493a              LDR      r1,|L1.7788|
001d82  fbb1f0f0          UDIV     r0,r1,r0              ;2021
001d86  9001              STR      r0,[sp,#4]            ;2021
001d88  2000              MOVS     r0,#0                 ;2023
001d8a  f7fffffe          BL       SDIO_GetResponse
001d8e  f0007000          AND      r0,r0,#0x2000000      ;2023
001d92  b110              CBZ      r0,|L1.7578|
001d94  240e              MOVS     r4,#0xe               ;2025
001d96  4620              MOV      r0,r4                 ;2026
001d98  e7ec              B        |L1.7540|
                  |L1.7578|
001d9a  4827              LDR      r0,|L1.7736|
001d9c  6800              LDR      r0,[r0,#0]            ;2029  ; CardType
001d9e  2802              CMP      r0,#2                 ;2029
001da0  d101              BNE      |L1.7590|
001da2  0a6d              LSRS     r5,r5,#9              ;2031
001da4  0a76              LSRS     r6,r6,#9              ;2032
                  |L1.7590|
001da6  4824              LDR      r0,|L1.7736|
001da8  6800              LDR      r0,[r0,#0]            ;2036  ; CardType
001daa  b138              CBZ      r0,|L1.7612|
001dac  4822              LDR      r0,|L1.7736|
001dae  6800              LDR      r0,[r0,#0]            ;2036  ; CardType
001db0  2801              CMP      r0,#1                 ;2036
001db2  d003              BEQ      |L1.7612|
001db4  4820              LDR      r0,|L1.7736|
001db6  6800              LDR      r0,[r0,#0]            ;2036  ; CardType
001db8  2802              CMP      r0,#2                 ;2036
001dba  d12d              BNE      |L1.7704|
                  |L1.7612|
001dbc  4820              LDR      r0,|L1.7744|
001dbe  6005              STR      r5,[r0,#0]            ;2039  ; SDIO_CmdInitStructure
001dc0  2020              MOVS     r0,#0x20              ;2040
001dc2  491f              LDR      r1,|L1.7744|
001dc4  6048              STR      r0,[r1,#4]            ;2040  ; SDIO_CmdInitStructure
001dc6  2040              MOVS     r0,#0x40              ;2041
001dc8  6088              STR      r0,[r1,#8]            ;2041  ; SDIO_CmdInitStructure
001dca  2000              MOVS     r0,#0                 ;2042
001dcc  60c8              STR      r0,[r1,#0xc]          ;2042  ; SDIO_CmdInitStructure
001dce  f44f6080          MOV      r0,#0x400             ;2043
001dd2  6108              STR      r0,[r1,#0x10]         ;2043  ; SDIO_CmdInitStructure
001dd4  4608              MOV      r0,r1                 ;2044
001dd6  f7fffffe          BL       SDIO_SendCommand
001dda  2020              MOVS     r0,#0x20              ;2046
001ddc  f7fffffe          BL       CmdResp1Error
001de0  4604              MOV      r4,r0                 ;2046
001de2  2c2a              CMP      r4,#0x2a              ;2047
001de4  d001              BEQ      |L1.7658|
001de6  4620              MOV      r0,r4                 ;2049
001de8  e7c4              B        |L1.7540|
                  |L1.7658|
001dea  4815              LDR      r0,|L1.7744|
001dec  6006              STR      r6,[r0,#0]            ;2053  ; SDIO_CmdInitStructure
001dee  2021              MOVS     r0,#0x21              ;2054
001df0  4913              LDR      r1,|L1.7744|
001df2  6048              STR      r0,[r1,#4]            ;2054  ; SDIO_CmdInitStructure
001df4  2040              MOVS     r0,#0x40              ;2055
001df6  6088              STR      r0,[r1,#8]            ;2055  ; SDIO_CmdInitStructure
001df8  2000              MOVS     r0,#0                 ;2056
001dfa  60c8              STR      r0,[r1,#0xc]          ;2056  ; SDIO_CmdInitStructure
001dfc  f44f6080          MOV      r0,#0x400             ;2057
001e00  6108              STR      r0,[r1,#0x10]         ;2057  ; SDIO_CmdInitStructure
001e02  4608              MOV      r0,r1                 ;2058
001e04  f7fffffe          BL       SDIO_SendCommand
001e08  2021              MOVS     r0,#0x21              ;2060
001e0a  f7fffffe          BL       CmdResp1Error
001e0e  4604              MOV      r4,r0                 ;2060
001e10  2c2a              CMP      r4,#0x2a              ;2061
001e12  d001              BEQ      |L1.7704|
001e14  4620              MOV      r0,r4                 ;2063
001e16  e7ad              B        |L1.7540|
                  |L1.7704|
001e18  2000              MOVS     r0,#0                 ;2068
001e1a  4909              LDR      r1,|L1.7744|
001e1c  6008              STR      r0,[r1,#0]            ;2068  ; SDIO_CmdInitStructure
001e1e  2026              MOVS     r0,#0x26              ;2069
001e20  6048              STR      r0,[r1,#4]            ;2069  ; SDIO_CmdInitStructure
001e22  2040              MOVS     r0,#0x40              ;2070
001e24  6088              STR      r0,[r1,#8]            ;2070  ; SDIO_CmdInitStructure
001e26  2000              MOVS     r0,#0                 ;2071
001e28  60c8              STR      r0,[r1,#0xc]          ;2071  ; SDIO_CmdInitStructure
001e2a  f44f6080          MOV      r0,#0x400             ;2072
001e2e  6108              STR      r0,[r1,#0x10]         ;2072  ; SDIO_CmdInitStructure
001e30  4608              MOV      r0,r1                 ;2073
001e32  f7fffffe          BL       SDIO_SendCommand
001e36  e01b              B        |L1.7792|
                  |L1.7736|
                          DCD      CardType
                  |L1.7740|
                          DCD      ||RCA||
                  |L1.7744|
                          DCD      SDIO_CmdInitStructure
                  |L1.7748|
                          DCD      TotalNumberOfBytes
                  |L1.7752|
                          DCD      StopCondition
                  |L1.7756|
                          DCD      SrcBuffer
                  |L1.7760|
                          DCD      0x000fffff
                  |L1.7764|
                          DCD      SDIO_DataInitStructure
                  |L1.7768|
                          DCD      DeviceMode
                  |L1.7772|
                          DCD      0x40018000
                  |L1.7776|
                          DCD      TransferEnd
                  |L1.7780|
                          DCD      TransferError
                  |L1.7784|
                          DCD      CSD_Tab
                  |L1.7788|
                          DCD      0x0001d4c0
                  |L1.7792|
001e70  2026              MOVS     r0,#0x26              ;2075
001e72  f7fffffe          BL       CmdResp1Error
001e76  4604              MOV      r4,r0                 ;2075
001e78  2c2a              CMP      r4,#0x2a              ;2077
001e7a  d001              BEQ      |L1.7808|
001e7c  4620              MOV      r0,r4                 ;2079
001e7e  e779              B        |L1.7540|
                  |L1.7808|
001e80  2700              MOVS     r7,#0                 ;2082
001e82  e000              B        |L1.7814|
                  |L1.7812|
001e84  1c7f              ADDS     r7,r7,#1              ;2082
                  |L1.7814|
001e86  9801              LDR      r0,[sp,#4]            ;2082
001e88  4287              CMP      r7,r0                 ;2082
001e8a  d3fb              BCC      |L1.7812|
001e8c  4668              MOV      r0,sp                 ;2086
001e8e  f7fffffe          BL       IsCardProgramming
001e92  4604              MOV      r4,r0                 ;2086
001e94  e003              B        |L1.7838|
                  |L1.7830|
001e96  4668              MOV      r0,sp                 ;2090
001e98  f7fffffe          BL       IsCardProgramming
001e9c  4604              MOV      r4,r0                 ;2090
                  |L1.7838|
001e9e  2c2a              CMP      r4,#0x2a              ;2088
001ea0  d107              BNE      |L1.7858|
001ea2  f89d0000          LDRB     r0,[sp,#0]            ;2088
001ea6  2807              CMP      r0,#7                 ;2088
001ea8  d0f5              BEQ      |L1.7830|
001eaa  f89d0000          LDRB     r0,[sp,#0]            ;2088
001eae  2806              CMP      r0,#6                 ;2088
001eb0  d0f1              BEQ      |L1.7830|
                  |L1.7858|
001eb2  4620              MOV      r0,r4                 ;2093
001eb4  e75e              B        |L1.7540|
;;;2095   
                          ENDP

                  SD_SendSDStatus PROC
;;;2137     */
;;;2138   SD_Error SD_SendSDStatus(uint32_t *psdstatus)
001eb6  b570              PUSH     {r4-r6,lr}
;;;2139   {
001eb8  4604              MOV      r4,r0
;;;2140     SD_Error errorstatus = SD_OK;
001eba  262a              MOVS     r6,#0x2a
;;;2141     uint32_t count = 0;
001ebc  2500              MOVS     r5,#0
;;;2142   
;;;2143     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
001ebe  2000              MOVS     r0,#0
001ec0  f7fffffe          BL       SDIO_GetResponse
001ec4  f0007000          AND      r0,r0,#0x2000000
001ec8  b110              CBZ      r0,|L1.7888|
;;;2144     {
;;;2145       errorstatus = SD_LOCK_UNLOCK_FAILED;
001eca  260e              MOVS     r6,#0xe
;;;2146       return(errorstatus);
001ecc  4630              MOV      r0,r6
                  |L1.7886|
;;;2147     }
;;;2148   
;;;2149     /*!< Set block size for card if it is not equal to current block size for card. */
;;;2150     SDIO_CmdInitStructure.SDIO_Argument = 64;
;;;2151     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
;;;2152     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2153     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2154     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2155     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2156   
;;;2157     errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
;;;2158   
;;;2159     if (errorstatus != SD_OK)
;;;2160     {
;;;2161       return(errorstatus);
;;;2162     }
;;;2163   
;;;2164     /*!< CMD55 */
;;;2165     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
;;;2166     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;2167     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2168     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2169     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2170     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2171     errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;2172   
;;;2173     if (errorstatus != SD_OK)
;;;2174     {
;;;2175       return(errorstatus);
;;;2176     }
;;;2177   
;;;2178     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;2179     SDIO_DataInitStructure.SDIO_DataLength = 64;
;;;2180     SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_64b;
;;;2181     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
;;;2182     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;2183     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;2184     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;2185   
;;;2186     /*!< Send ACMD13 SD_APP_STAUS  with argument as card's RCA.*/
;;;2187     SDIO_CmdInitStructure.SDIO_Argument = 0;
;;;2188     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_STAUS;
;;;2189     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2190     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2191     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2192     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2193     errorstatus = CmdResp1Error(SD_CMD_SD_APP_STAUS);
;;;2194   
;;;2195     if (errorstatus != SD_OK)
;;;2196     {
;;;2197       return(errorstatus);
;;;2198     }
;;;2199   
;;;2200     while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
;;;2201     {
;;;2202       if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
;;;2203       {
;;;2204         for (count = 0; count < 8; count++)
;;;2205         {
;;;2206           *(psdstatus + count) = SDIO_ReadData();
;;;2207         }
;;;2208         psdstatus += 8;
;;;2209       }
;;;2210     }
;;;2211   
;;;2212     if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;2213     {
;;;2214       SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;2215       errorstatus = SD_DATA_TIMEOUT;
;;;2216       return(errorstatus);
;;;2217     }
;;;2218     else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;2219     {
;;;2220       SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;2221       errorstatus = SD_DATA_CRC_FAIL;
;;;2222       return(errorstatus);
;;;2223     }
;;;2224     else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
;;;2225     {
;;;2226       SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
;;;2227       errorstatus = SD_RX_OVERRUN;
;;;2228       return(errorstatus);
;;;2229     }
;;;2230     else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;2231     {
;;;2232       SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;2233       errorstatus = SD_START_BIT_ERR;
;;;2234       return(errorstatus);
;;;2235     }
;;;2236   
;;;2237     while (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
;;;2238     {
;;;2239       *psdstatus = SDIO_ReadData();
;;;2240       psdstatus++;
;;;2241     }
;;;2242   
;;;2243     /*!< Clear all the static status flags*/
;;;2244     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2245     psdstatus -= 16;
;;;2246     for (count = 0; count < 16; count++)
;;;2247     {
;;;2248       psdstatus[count] = ((psdstatus[count] & SD_0TO7BITS) << 24) |((psdstatus[count] & SD_8TO15BITS) << 8) |
;;;2249                          ((psdstatus[count] & SD_16TO23BITS) >> 8) |((psdstatus[count] & SD_24TO31BITS) >> 24);
;;;2250     }
;;;2251     return(errorstatus);
;;;2252   }
001ece  bd70              POP      {r4-r6,pc}
                  |L1.7888|
001ed0  2040              MOVS     r0,#0x40              ;2150
001ed2  49eb              LDR      r1,|L1.8832|
001ed4  6008              STR      r0,[r1,#0]            ;2150  ; SDIO_CmdInitStructure
001ed6  2010              MOVS     r0,#0x10              ;2151
001ed8  6048              STR      r0,[r1,#4]            ;2151  ; SDIO_CmdInitStructure
001eda  2040              MOVS     r0,#0x40              ;2152
001edc  6088              STR      r0,[r1,#8]            ;2152  ; SDIO_CmdInitStructure
001ede  2000              MOVS     r0,#0                 ;2153
001ee0  60c8              STR      r0,[r1,#0xc]          ;2153  ; SDIO_CmdInitStructure
001ee2  f44f6080          MOV      r0,#0x400             ;2154
001ee6  6108              STR      r0,[r1,#0x10]         ;2154  ; SDIO_CmdInitStructure
001ee8  4608              MOV      r0,r1                 ;2155
001eea  f7fffffe          BL       SDIO_SendCommand
001eee  2010              MOVS     r0,#0x10              ;2157
001ef0  f7fffffe          BL       CmdResp1Error
001ef4  4606              MOV      r6,r0                 ;2157
001ef6  2e2a              CMP      r6,#0x2a              ;2159
001ef8  d001              BEQ      |L1.7934|
001efa  4630              MOV      r0,r6                 ;2161
001efc  e7e7              B        |L1.7886|
                  |L1.7934|
001efe  48e1              LDR      r0,|L1.8836|
001f00  8800              LDRH     r0,[r0,#0]            ;2165  ; RCA
001f02  0400              LSLS     r0,r0,#16             ;2165
001f04  49de              LDR      r1,|L1.8832|
001f06  6008              STR      r0,[r1,#0]            ;2165  ; SDIO_CmdInitStructure
001f08  2037              MOVS     r0,#0x37              ;2166
001f0a  6048              STR      r0,[r1,#4]            ;2166  ; SDIO_CmdInitStructure
001f0c  2040              MOVS     r0,#0x40              ;2167
001f0e  6088              STR      r0,[r1,#8]            ;2167  ; SDIO_CmdInitStructure
001f10  2000              MOVS     r0,#0                 ;2168
001f12  60c8              STR      r0,[r1,#0xc]          ;2168  ; SDIO_CmdInitStructure
001f14  f44f6080          MOV      r0,#0x400             ;2169
001f18  6108              STR      r0,[r1,#0x10]         ;2169  ; SDIO_CmdInitStructure
001f1a  4608              MOV      r0,r1                 ;2170
001f1c  f7fffffe          BL       SDIO_SendCommand
001f20  2037              MOVS     r0,#0x37              ;2171
001f22  f7fffffe          BL       CmdResp1Error
001f26  4606              MOV      r6,r0                 ;2171
001f28  2e2a              CMP      r6,#0x2a              ;2173
001f2a  d001              BEQ      |L1.7984|
001f2c  4630              MOV      r0,r6                 ;2175
001f2e  e7ce              B        |L1.7886|
                  |L1.7984|
001f30  48d5              LDR      r0,|L1.8840|
001f32  49d6              LDR      r1,|L1.8844|
001f34  6008              STR      r0,[r1,#0]            ;2178  ; SDIO_DataInitStructure
001f36  2040              MOVS     r0,#0x40              ;2179
001f38  6048              STR      r0,[r1,#4]            ;2179  ; SDIO_DataInitStructure
001f3a  2060              MOVS     r0,#0x60              ;2180
001f3c  6088              STR      r0,[r1,#8]            ;2180  ; SDIO_DataInitStructure
001f3e  2002              MOVS     r0,#2                 ;2181
001f40  60c8              STR      r0,[r1,#0xc]          ;2181  ; SDIO_DataInitStructure
001f42  2000              MOVS     r0,#0                 ;2182
001f44  6108              STR      r0,[r1,#0x10]         ;2182  ; SDIO_DataInitStructure
001f46  2001              MOVS     r0,#1                 ;2183
001f48  6148              STR      r0,[r1,#0x14]         ;2183  ; SDIO_DataInitStructure
001f4a  4608              MOV      r0,r1                 ;2184
001f4c  f7fffffe          BL       SDIO_DataConfig
001f50  2000              MOVS     r0,#0                 ;2187
001f52  49cb              LDR      r1,|L1.8832|
001f54  6008              STR      r0,[r1,#0]            ;2187  ; SDIO_CmdInitStructure
001f56  200d              MOVS     r0,#0xd               ;2188
001f58  6048              STR      r0,[r1,#4]            ;2188  ; SDIO_CmdInitStructure
001f5a  2040              MOVS     r0,#0x40              ;2189
001f5c  6088              STR      r0,[r1,#8]            ;2189  ; SDIO_CmdInitStructure
001f5e  2000              MOVS     r0,#0                 ;2190
001f60  60c8              STR      r0,[r1,#0xc]          ;2190  ; SDIO_CmdInitStructure
001f62  f44f6080          MOV      r0,#0x400             ;2191
001f66  6108              STR      r0,[r1,#0x10]         ;2191  ; SDIO_CmdInitStructure
001f68  4608              MOV      r0,r1                 ;2192
001f6a  f7fffffe          BL       SDIO_SendCommand
001f6e  200d              MOVS     r0,#0xd               ;2193
001f70  f7fffffe          BL       CmdResp1Error
001f74  4606              MOV      r6,r0                 ;2193
001f76  2e2a              CMP      r6,#0x2a              ;2195
001f78  d001              BEQ      |L1.8062|
001f7a  4630              MOV      r0,r6                 ;2197
001f7c  e7a7              B        |L1.7886|
                  |L1.8062|
001f7e  e00e              B        |L1.8094|
                  |L1.8064|
001f80  f44f4000          MOV      r0,#0x8000            ;2202
001f84  f7fffffe          BL       SDIO_GetFlagStatus
001f88  b148              CBZ      r0,|L1.8094|
001f8a  2500              MOVS     r5,#0                 ;2204
001f8c  e004              B        |L1.8088|
                  |L1.8078|
001f8e  f7fffffe          BL       SDIO_ReadData
001f92  f8440025          STR      r0,[r4,r5,LSL #2]     ;2206
001f96  1c6d              ADDS     r5,r5,#1              ;2204
                  |L1.8088|
001f98  2d08              CMP      r5,#8                 ;2204
001f9a  d3f8              BCC      |L1.8078|
001f9c  3420              ADDS     r4,r4,#0x20           ;2208
                  |L1.8094|
001f9e  48bc              LDR      r0,|L1.8848|
001fa0  6b40              LDR      r0,[r0,#0x34]         ;2200
001fa2  f240612a          MOV      r1,#0x62a             ;2200
001fa6  4008              ANDS     r0,r0,r1              ;2200
001fa8  2800              CMP      r0,#0                 ;2200
001faa  d0e9              BEQ      |L1.8064|
001fac  2008              MOVS     r0,#8                 ;2212
001fae  f7fffffe          BL       SDIO_GetFlagStatus
001fb2  b128              CBZ      r0,|L1.8128|
001fb4  2008              MOVS     r0,#8                 ;2214
001fb6  f7fffffe          BL       SDIO_ClearFlag
001fba  2604              MOVS     r6,#4                 ;2215
001fbc  4630              MOV      r0,r6                 ;2216
001fbe  e786              B        |L1.7886|
                  |L1.8128|
001fc0  2002              MOVS     r0,#2                 ;2218
001fc2  f7fffffe          BL       SDIO_GetFlagStatus
001fc6  b128              CBZ      r0,|L1.8148|
001fc8  2002              MOVS     r0,#2                 ;2220
001fca  f7fffffe          BL       SDIO_ClearFlag
001fce  2602              MOVS     r6,#2                 ;2221
001fd0  4630              MOV      r0,r6                 ;2222
001fd2  e77c              B        |L1.7886|
                  |L1.8148|
001fd4  2020              MOVS     r0,#0x20              ;2224
001fd6  f7fffffe          BL       SDIO_GetFlagStatus
001fda  b128              CBZ      r0,|L1.8168|
001fdc  2020              MOVS     r0,#0x20              ;2226
001fde  f7fffffe          BL       SDIO_ClearFlag
001fe2  2606              MOVS     r6,#6                 ;2227
001fe4  4630              MOV      r0,r6                 ;2228
001fe6  e772              B        |L1.7886|
                  |L1.8168|
001fe8  f44f7000          MOV      r0,#0x200             ;2230
001fec  f7fffffe          BL       SDIO_GetFlagStatus
001ff0  b130              CBZ      r0,|L1.8192|
001ff2  f44f7000          MOV      r0,#0x200             ;2232
001ff6  f7fffffe          BL       SDIO_ClearFlag
001ffa  2607              MOVS     r6,#7                 ;2233
001ffc  4630              MOV      r0,r6                 ;2234
001ffe  e766              B        |L1.7886|
                  |L1.8192|
002000  e003              B        |L1.8202|
                  |L1.8194|
002002  f7fffffe          BL       SDIO_ReadData
002006  6020              STR      r0,[r4,#0]            ;2239
002008  1d24              ADDS     r4,r4,#4              ;2240
                  |L1.8202|
00200a  f44f1000          MOV      r0,#0x200000          ;2237
00200e  f7fffffe          BL       SDIO_GetFlagStatus
002012  2800              CMP      r0,#0                 ;2237
002014  d1f5              BNE      |L1.8194|
002016  f24050ff          MOV      r0,#0x5ff             ;2244
00201a  f7fffffe          BL       SDIO_ClearFlag
00201e  3c40              SUBS     r4,r4,#0x40           ;2245
002020  2500              MOVS     r5,#0                 ;2246
002022  e015              B        |L1.8272|
                  |L1.8228|
002024  f8140025          LDRB     r0,[r4,r5,LSL #2]     ;2248
002028  0600              LSLS     r0,r0,#24             ;2248
00202a  f8341025          LDRH     r1,[r4,r5,LSL #2]     ;2248
00202e  f401417f          AND      r1,r1,#0xff00         ;2248
002032  ea402001          ORR      r0,r0,r1,LSL #8       ;2248
002036  f8541025          LDR      r1,[r4,r5,LSL #2]     ;2248
00203a  f401017f          AND      r1,r1,#0xff0000       ;2248
00203e  ea402011          ORR      r0,r0,r1,LSR #8       ;2248
002042  f8541025          LDR      r1,[r4,r5,LSL #2]     ;2248
002046  ea406011          ORR      r0,r0,r1,LSR #24      ;2248
00204a  f8440025          STR      r0,[r4,r5,LSL #2]     ;2248
00204e  1c6d              ADDS     r5,r5,#1              ;2246
                  |L1.8272|
002050  2d10              CMP      r5,#0x10              ;2246
002052  d3e7              BCC      |L1.8228|
002054  4630              MOV      r0,r6                 ;2251
002056  e73a              B        |L1.7886|
;;;2253   
                          ENDP

                  SD_ProcessIRQSrc PROC
;;;2258     */
;;;2259   SD_Error SD_ProcessIRQSrc(void)
002058  b570              PUSH     {r4-r6,lr}
;;;2260   {
;;;2261     uint32_t count = 0, restwords = 0;
00205a  2400              MOVS     r4,#0
00205c  2500              MOVS     r5,#0
;;;2262   
;;;2263     if (DeviceMode == SD_INTERRUPT_MODE)
00205e  488d              LDR      r0,|L1.8852|
002060  6800              LDR      r0,[r0,#0]  ; DeviceMode
002062  2801              CMP      r0,#1
002064  d167              BNE      |L1.8502|
;;;2264     {
;;;2265       if (SDIO_GetITStatus(SDIO_IT_RXFIFOHF) != RESET)
002066  03c0              LSLS     r0,r0,#15
002068  f7fffffe          BL       SDIO_GetITStatus
00206c  b1a8              CBZ      r0,|L1.8346|
;;;2266       {
;;;2267         for (count = 0; count < SD_HALFFIFO; count++)
00206e  bf00              NOP      
002070  e006              B        |L1.8320|
                  |L1.8306|
;;;2268         {
;;;2269           *(DestBuffer + count) = SDIO_ReadData();
002072  f7fffffe          BL       SDIO_ReadData
002076  4988              LDR      r1,|L1.8856|
002078  6809              LDR      r1,[r1,#0]  ; DestBuffer
00207a  f8410024          STR      r0,[r1,r4,LSL #2]
00207e  1c64              ADDS     r4,r4,#1              ;2267
                  |L1.8320|
002080  2c08              CMP      r4,#8                 ;2267
002082  d3f6              BCC      |L1.8306|
;;;2270         }
;;;2271         DestBuffer += SD_HALFFIFO;
002084  4884              LDR      r0,|L1.8856|
002086  6800              LDR      r0,[r0,#0]  ; DestBuffer
002088  3020              ADDS     r0,r0,#0x20
00208a  4983              LDR      r1,|L1.8856|
00208c  6008              STR      r0,[r1,#0]  ; DestBuffer
;;;2272         NumberOfBytes += SD_HALFFIFOBYTES;
00208e  4883              LDR      r0,|L1.8860|
002090  6800              LDR      r0,[r0,#0]  ; NumberOfBytes
002092  3020              ADDS     r0,r0,#0x20
002094  4981              LDR      r1,|L1.8860|
002096  6008              STR      r0,[r1,#0]  ; NumberOfBytes
002098  e04d              B        |L1.8502|
                  |L1.8346|
;;;2273       }
;;;2274       else if (SDIO_GetITStatus(SDIO_IT_TXFIFOHE) != RESET)
00209a  f44f4080          MOV      r0,#0x4000
00209e  f7fffffe          BL       SDIO_GetITStatus
0020a2  2800              CMP      r0,#0
0020a4  d047              BEQ      |L1.8502|
;;;2275       {
;;;2276         if ((TotalNumberOfBytes - NumberOfBytes) < SD_HALFFIFOBYTES)
0020a6  487e              LDR      r0,|L1.8864|
0020a8  6800              LDR      r0,[r0,#0]  ; TotalNumberOfBytes
0020aa  497c              LDR      r1,|L1.8860|
0020ac  6809              LDR      r1,[r1,#0]  ; NumberOfBytes
0020ae  1a40              SUBS     r0,r0,r1
0020b0  2820              CMP      r0,#0x20
0020b2  d22b              BCS      |L1.8460|
;;;2277         {
;;;2278           restwords = ((TotalNumberOfBytes - NumberOfBytes) %  4 == 0) ?
0020b4  487a              LDR      r0,|L1.8864|
0020b6  7800              LDRB     r0,[r0,#0]  ; TotalNumberOfBytes
0020b8  4978              LDR      r1,|L1.8860|
0020ba  6809              LDR      r1,[r1,#0]  ; NumberOfBytes
0020bc  1a40              SUBS     r0,r0,r1
0020be  f0000003          AND      r0,r0,#3
0020c2  b930              CBNZ     r0,|L1.8402|
;;;2279                       ((TotalNumberOfBytes - NumberOfBytes) / 4) :
0020c4  4876              LDR      r0,|L1.8864|
0020c6  6800              LDR      r0,[r0,#0]  ; TotalNumberOfBytes
0020c8  4974              LDR      r1,|L1.8860|
0020ca  6809              LDR      r1,[r1,#0]  ; NumberOfBytes
0020cc  1a40              SUBS     r0,r0,r1
0020ce  0880              LSRS     r0,r0,#2
0020d0  e006              B        |L1.8416|
                  |L1.8402|
;;;2280                       ((TotalNumberOfBytes - NumberOfBytes) / 4 + 1);
0020d2  4873              LDR      r0,|L1.8864|
0020d4  6800              LDR      r0,[r0,#0]  ; TotalNumberOfBytes
0020d6  4971              LDR      r1,|L1.8860|
0020d8  6809              LDR      r1,[r1,#0]  ; NumberOfBytes
0020da  1a40              SUBS     r0,r0,r1
0020dc  0880              LSRS     r0,r0,#2
0020de  1c40              ADDS     r0,r0,#1
                  |L1.8416|
0020e0  4605              MOV      r5,r0
;;;2281   
;;;2282           for (count = 0; count < restwords;  count++, SrcBuffer++, NumberOfBytes += 4)
0020e2  2400              MOVS     r4,#0
0020e4  e00f              B        |L1.8454|
                  |L1.8422|
;;;2283           {
;;;2284             SDIO_WriteData(*SrcBuffer);
0020e6  496f              LDR      r1,|L1.8868|
0020e8  6809              LDR      r1,[r1,#0]  ; SrcBuffer
0020ea  6808              LDR      r0,[r1,#0]
0020ec  f7fffffe          BL       SDIO_WriteData
0020f0  1c64              ADDS     r4,r4,#1              ;2282
0020f2  486c              LDR      r0,|L1.8868|
0020f4  6800              LDR      r0,[r0,#0]            ;2282  ; SrcBuffer
0020f6  1d00              ADDS     r0,r0,#4              ;2282
0020f8  496a              LDR      r1,|L1.8868|
0020fa  6008              STR      r0,[r1,#0]            ;2282  ; SrcBuffer
0020fc  4867              LDR      r0,|L1.8860|
0020fe  6800              LDR      r0,[r0,#0]            ;2282  ; NumberOfBytes
002100  1d00              ADDS     r0,r0,#4              ;2282
002102  4966              LDR      r1,|L1.8860|
002104  6008              STR      r0,[r1,#0]            ;2282  ; NumberOfBytes
                  |L1.8454|
002106  42ac              CMP      r4,r5                 ;2282
002108  d3ed              BCC      |L1.8422|
00210a  e014              B        |L1.8502|
                  |L1.8460|
;;;2285           }
;;;2286         }
;;;2287         else
;;;2288         {
;;;2289           for (count = 0; count < SD_HALFFIFO; count++)
00210c  2400              MOVS     r4,#0
00210e  e006              B        |L1.8478|
                  |L1.8464|
;;;2290           {
;;;2291             SDIO_WriteData(*(SrcBuffer + count));
002110  4964              LDR      r1,|L1.8868|
002112  6809              LDR      r1,[r1,#0]  ; SrcBuffer
002114  f8510024          LDR      r0,[r1,r4,LSL #2]
002118  f7fffffe          BL       SDIO_WriteData
00211c  1c64              ADDS     r4,r4,#1              ;2289
                  |L1.8478|
00211e  2c08              CMP      r4,#8                 ;2289
002120  d3f6              BCC      |L1.8464|
;;;2292           }
;;;2293   
;;;2294           SrcBuffer += SD_HALFFIFO;
002122  4860              LDR      r0,|L1.8868|
002124  6800              LDR      r0,[r0,#0]  ; SrcBuffer
002126  3020              ADDS     r0,r0,#0x20
002128  495e              LDR      r1,|L1.8868|
00212a  6008              STR      r0,[r1,#0]  ; SrcBuffer
;;;2295           NumberOfBytes += SD_HALFFIFOBYTES;
00212c  485b              LDR      r0,|L1.8860|
00212e  6800              LDR      r0,[r0,#0]  ; NumberOfBytes
002130  3020              ADDS     r0,r0,#0x20
002132  495a              LDR      r1,|L1.8860|
002134  6008              STR      r0,[r1,#0]  ; NumberOfBytes
                  |L1.8502|
;;;2296         }
;;;2297       }
;;;2298     }
;;;2299   
;;;2300     if (SDIO_GetITStatus(SDIO_IT_DATAEND) != RESET)
002136  f44f7080          MOV      r0,#0x100
00213a  f7fffffe          BL       SDIO_GetITStatus
00213e  b3d8              CBZ      r0,|L1.8632|
;;;2301     {
;;;2302       if (DeviceMode != SD_DMA_MODE)
002140  4854              LDR      r0,|L1.8852|
002142  6800              LDR      r0,[r0,#0]  ; DeviceMode
002144  b1d0              CBZ      r0,|L1.8572|
;;;2303       {
;;;2304         while ((SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)  &&  (NumberOfBytes < TotalNumberOfBytes))
002146  e00e              B        |L1.8550|
                  |L1.8520|
;;;2305         {
;;;2306           *DestBuffer = SDIO_ReadData();
002148  f7fffffe          BL       SDIO_ReadData
00214c  4952              LDR      r1,|L1.8856|
00214e  6809              LDR      r1,[r1,#0]  ; DestBuffer
002150  6008              STR      r0,[r1,#0]
;;;2307           DestBuffer++;
002152  4851              LDR      r0,|L1.8856|
002154  6800              LDR      r0,[r0,#0]  ; DestBuffer
002156  1d00              ADDS     r0,r0,#4
002158  494f              LDR      r1,|L1.8856|
00215a  6008              STR      r0,[r1,#0]  ; DestBuffer
;;;2308           NumberOfBytes += 4;
00215c  484f              LDR      r0,|L1.8860|
00215e  6800              LDR      r0,[r0,#0]  ; NumberOfBytes
002160  1d00              ADDS     r0,r0,#4
002162  494e              LDR      r1,|L1.8860|
002164  6008              STR      r0,[r1,#0]  ; NumberOfBytes
                  |L1.8550|
002166  f44f1000          MOV      r0,#0x200000          ;2304
00216a  f7fffffe          BL       SDIO_GetFlagStatus
00216e  b128              CBZ      r0,|L1.8572|
002170  484a              LDR      r0,|L1.8860|
002172  6800              LDR      r0,[r0,#0]            ;2304  ; NumberOfBytes
002174  494a              LDR      r1,|L1.8864|
002176  6809              LDR      r1,[r1,#0]            ;2304  ; TotalNumberOfBytes
002178  4288              CMP      r0,r1                 ;2304
00217a  d3e5              BCC      |L1.8520|
                  |L1.8572|
;;;2309         }
;;;2310       }
;;;2311   
;;;2312       if (StopCondition == 1)
00217c  484a              LDR      r0,|L1.8872|
00217e  6800              LDR      r0,[r0,#0]  ; StopCondition
002180  2801              CMP      r0,#1
002182  d104              BNE      |L1.8590|
;;;2313       {
;;;2314         TransferError = SD_StopTransfer();
002184  f7fffffe          BL       SD_StopTransfer
002188  4948              LDR      r1,|L1.8876|
00218a  7008              STRB     r0,[r1,#0]
00218c  e002              B        |L1.8596|
                  |L1.8590|
;;;2315       }
;;;2316       else
;;;2317       {
;;;2318         TransferError = SD_OK;
00218e  202a              MOVS     r0,#0x2a
002190  4946              LDR      r1,|L1.8876|
002192  7008              STRB     r0,[r1,#0]
                  |L1.8596|
;;;2319       }
;;;2320       SDIO_ClearITPendingBit(SDIO_IT_DATAEND);
002194  f44f7080          MOV      r0,#0x100
002198  f7fffffe          BL       SDIO_ClearITPendingBit
;;;2321       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
00219c  2100              MOVS     r1,#0
00219e  f24c303a          MOV      r0,#0xc33a
0021a2  f7fffffe          BL       SDIO_ITConfig
;;;2322                     SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
;;;2323                     SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
;;;2324       TransferEnd = 1;
0021a6  2001              MOVS     r0,#1
0021a8  4941              LDR      r1,|L1.8880|
0021aa  6008              STR      r0,[r1,#0]  ; TransferEnd
;;;2325       NumberOfBytes = 0;
0021ac  2000              MOVS     r0,#0
0021ae  493b              LDR      r1,|L1.8860|
0021b0  6008              STR      r0,[r1,#0]  ; NumberOfBytes
;;;2326       return(TransferError);
0021b2  483e              LDR      r0,|L1.8876|
0021b4  7800              LDRB     r0,[r0,#0]  ; TransferError
                  |L1.8630|
;;;2327     }
;;;2328   
;;;2329     if (SDIO_GetITStatus(SDIO_IT_DCRCFAIL) != RESET)
;;;2330     {
;;;2331       SDIO_ClearITPendingBit(SDIO_IT_DCRCFAIL);
;;;2332       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
;;;2333                     SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
;;;2334                     SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
;;;2335       NumberOfBytes = 0;
;;;2336       TransferError = SD_DATA_CRC_FAIL;
;;;2337       return(SD_DATA_CRC_FAIL);
;;;2338     }
;;;2339   
;;;2340     if (SDIO_GetITStatus(SDIO_IT_DTIMEOUT) != RESET)
;;;2341     {
;;;2342       SDIO_ClearITPendingBit(SDIO_IT_DTIMEOUT);
;;;2343       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
;;;2344                     SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
;;;2345                     SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
;;;2346       NumberOfBytes = 0;
;;;2347       TransferError = SD_DATA_TIMEOUT;
;;;2348       return(SD_DATA_TIMEOUT);
;;;2349     }
;;;2350   
;;;2351     if (SDIO_GetITStatus(SDIO_IT_RXOVERR) != RESET)
;;;2352     {
;;;2353       SDIO_ClearITPendingBit(SDIO_IT_RXOVERR);
;;;2354       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
;;;2355                     SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
;;;2356                     SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
;;;2357       NumberOfBytes = 0;
;;;2358       TransferError = SD_RX_OVERRUN;
;;;2359       return(SD_RX_OVERRUN);
;;;2360     }
;;;2361   
;;;2362     if (SDIO_GetITStatus(SDIO_IT_TXUNDERR) != RESET)
;;;2363     {
;;;2364       SDIO_ClearITPendingBit(SDIO_IT_TXUNDERR);
;;;2365       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
;;;2366                     SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
;;;2367                     SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
;;;2368       NumberOfBytes = 0;
;;;2369       TransferError = SD_TX_UNDERRUN;
;;;2370       return(SD_TX_UNDERRUN);
;;;2371     }
;;;2372   
;;;2373     if (SDIO_GetITStatus(SDIO_IT_STBITERR) != RESET)
;;;2374     {
;;;2375       SDIO_ClearITPendingBit(SDIO_IT_STBITERR);
;;;2376       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
;;;2377                     SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
;;;2378                     SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
;;;2379       NumberOfBytes = 0;
;;;2380       TransferError = SD_START_BIT_ERR;
;;;2381       return(SD_START_BIT_ERR);
;;;2382     }
;;;2383   
;;;2384     return(SD_OK);
;;;2385   }
0021b6  bd70              POP      {r4-r6,pc}
                  |L1.8632|
0021b8  e7ff              B        |L1.8634|
                  |L1.8634|
0021ba  2002              MOVS     r0,#2                 ;2329
0021bc  f7fffffe          BL       SDIO_GetITStatus
0021c0  b170              CBZ      r0,|L1.8672|
0021c2  2002              MOVS     r0,#2                 ;2331
0021c4  f7fffffe          BL       SDIO_ClearITPendingBit
0021c8  2100              MOVS     r1,#0                 ;2332
0021ca  f24c303a          MOV      r0,#0xc33a            ;2332
0021ce  f7fffffe          BL       SDIO_ITConfig
0021d2  2000              MOVS     r0,#0                 ;2335
0021d4  4931              LDR      r1,|L1.8860|
0021d6  6008              STR      r0,[r1,#0]            ;2335  ; NumberOfBytes
0021d8  2002              MOVS     r0,#2                 ;2336
0021da  4934              LDR      r1,|L1.8876|
0021dc  7008              STRB     r0,[r1,#0]            ;2336
0021de  e7ea              B        |L1.8630|
                  |L1.8672|
0021e0  2008              MOVS     r0,#8                 ;2340
0021e2  f7fffffe          BL       SDIO_GetITStatus
0021e6  b170              CBZ      r0,|L1.8710|
0021e8  2008              MOVS     r0,#8                 ;2342
0021ea  f7fffffe          BL       SDIO_ClearITPendingBit
0021ee  2100              MOVS     r1,#0                 ;2343
0021f0  f24c303a          MOV      r0,#0xc33a            ;2343
0021f4  f7fffffe          BL       SDIO_ITConfig
0021f8  2000              MOVS     r0,#0                 ;2346
0021fa  4928              LDR      r1,|L1.8860|
0021fc  6008              STR      r0,[r1,#0]            ;2346  ; NumberOfBytes
0021fe  2004              MOVS     r0,#4                 ;2347
002200  492a              LDR      r1,|L1.8876|
002202  7008              STRB     r0,[r1,#0]            ;2347
002204  e7d7              B        |L1.8630|
                  |L1.8710|
002206  2020              MOVS     r0,#0x20              ;2351
002208  f7fffffe          BL       SDIO_GetITStatus
00220c  b170              CBZ      r0,|L1.8748|
00220e  2020              MOVS     r0,#0x20              ;2353
002210  f7fffffe          BL       SDIO_ClearITPendingBit
002214  2100              MOVS     r1,#0                 ;2354
002216  f24c303a          MOV      r0,#0xc33a            ;2354
00221a  f7fffffe          BL       SDIO_ITConfig
00221e  2000              MOVS     r0,#0                 ;2357
002220  491e              LDR      r1,|L1.8860|
002222  6008              STR      r0,[r1,#0]            ;2357  ; NumberOfBytes
002224  2006              MOVS     r0,#6                 ;2358
002226  4921              LDR      r1,|L1.8876|
002228  7008              STRB     r0,[r1,#0]            ;2358
00222a  e7c4              B        |L1.8630|
                  |L1.8748|
00222c  2010              MOVS     r0,#0x10              ;2362
00222e  f7fffffe          BL       SDIO_GetITStatus
002232  b170              CBZ      r0,|L1.8786|
002234  2010              MOVS     r0,#0x10              ;2364
002236  f7fffffe          BL       SDIO_ClearITPendingBit
00223a  2100              MOVS     r1,#0                 ;2365
00223c  f24c303a          MOV      r0,#0xc33a            ;2365
002240  f7fffffe          BL       SDIO_ITConfig
002244  2000              MOVS     r0,#0                 ;2368
002246  4915              LDR      r1,|L1.8860|
002248  6008              STR      r0,[r1,#0]            ;2368  ; NumberOfBytes
00224a  2005              MOVS     r0,#5                 ;2369
00224c  4917              LDR      r1,|L1.8876|
00224e  7008              STRB     r0,[r1,#0]            ;2369
002250  e7b1              B        |L1.8630|
                  |L1.8786|
002252  f44f7000          MOV      r0,#0x200             ;2373
002256  f7fffffe          BL       SDIO_GetITStatus
00225a  b178              CBZ      r0,|L1.8828|
00225c  f44f7000          MOV      r0,#0x200             ;2375
002260  f7fffffe          BL       SDIO_ClearITPendingBit
002264  2100              MOVS     r1,#0                 ;2376
002266  f24c303a          MOV      r0,#0xc33a            ;2376
00226a  f7fffffe          BL       SDIO_ITConfig
00226e  2000              MOVS     r0,#0                 ;2379
002270  490a              LDR      r1,|L1.8860|
002272  6008              STR      r0,[r1,#0]            ;2379  ; NumberOfBytes
002274  2007              MOVS     r0,#7                 ;2380
002276  490d              LDR      r1,|L1.8876|
002278  7008              STRB     r0,[r1,#0]            ;2380
00227a  e79c              B        |L1.8630|
                  |L1.8828|
00227c  202a              MOVS     r0,#0x2a              ;2384
00227e  e79a              B        |L1.8630|
;;;2386   
                          ENDP

                  |L1.8832|
                          DCD      SDIO_CmdInitStructure
                  |L1.8836|
                          DCD      ||RCA||
                  |L1.8840|
                          DCD      0x000fffff
                  |L1.8844|
                          DCD      SDIO_DataInitStructure
                  |L1.8848|
                          DCD      0x40018000
                  |L1.8852|
                          DCD      DeviceMode
                  |L1.8856|
                          DCD      DestBuffer
                  |L1.8860|
                          DCD      NumberOfBytes
                  |L1.8864|
                          DCD      TotalNumberOfBytes
                  |L1.8868|
                          DCD      SrcBuffer
                  |L1.8872|
                          DCD      StopCondition
                  |L1.8876|
                          DCD      TransferError
                  |L1.8880|
                          DCD      TransferEnd

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  CSD_Tab
                          %        16
                  CID_Tab
                          %        16
                  SDIO_InitStructure
                          %        24
                  SDIO_CmdInitStructure
                          %        20
                  SDIO_DataInitStructure
                          %        24

                          AREA ||.data||, DATA, ALIGN=2

                  CardType
                          DCD      0x00000000
                  ||RCA||
                          DCD      0x00000000
                  DeviceMode
                          DCD      0x00000002
                  TotalNumberOfBytes
                          DCD      0x00000000
                  StopCondition
                          DCD      0x00000000
                  SrcBuffer
                          DCD      0x00000000
                  DestBuffer
                          DCD      0x00000000
                  TransferError
00001c  2a000000          DCB      0x2a,0x00,0x00,0x00
                  TransferEnd
                          DCD      0x00000000
                  NumberOfBytes
                          DCD      0x00000000
