L 1 "user\tjpgd.c"
N/*----------------------------------------------------------------------------/
N/ TJpgDec - Tiny JPEG Decompressor R0.01b                     (C)ChaN, 2012
N/-----------------------------------------------------------------------------/
N/ The TJpgDec is a generic JPEG decompressor module for tiny embedded systems.
N/ This is a free software that opened for education, research and commercial
N/  developments under license policy of following terms.
N/
N/  Copyright (C) 2012, ChaN, all right reserved.
N/
N/ * The TJpgDec module is a free software and there is NO WARRANTY.
N/ * No restriction on use. You can use, modify and redistribute it for
N/   personal, non-profit or commercial products UNDER YOUR RESPONSIBILITY.
N/ * Redistributions of source code must retain the above copyright notice.
N/
N/-----------------------------------------------------------------------------/
N/ Oct 04,'11 R0.01  First release.
N/ Feb 19,'12 R0.01a Fixed decompression fails when scan starts with an escape seq.
N/ Sep 03,'12 R0.01b Added JD_TBLCLIP option.
N/----------------------------------------------------------------------------*/
N
N#include "tjpgd.h"
L 1 "user\tjpgd.h" 1
N/*----------------------------------------------------------------------------/
N/ TJpgDec - Tiny JPEG Decompressor include file               (C)ChaN, 2012
N/----------------------------------------------------------------------------*/
N#ifndef _TJPGDEC
N#define _TJPGDEC
N/*---------------------------------------------------------------------------*/
N/* System Configurations */
N
N#define	JD_SZBUF		512	/* Size of stream input buffer */
N#define JD_FORMAT		1	/* Output pixel format 0:RGB888 (3 BYTE/pix), 1:RGB565 (1 WORD/pix) */
N#define	JD_USE_SCALE	1	/* Use descaling feature for output */
N#define JD_TBLCLIP		1	/* Use table for saturation (might be a bit faster but increases 1K bytes of code size) */
N
N/*---------------------------------------------------------------------------*/
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include "integer.h"
L 1 "user\integer.h" 1
N/*-------------------------------------------*/
N/* Integer type definitions for FatFs module */
N/*-------------------------------------------*/
N
N#ifndef _INTEGER
N#define _INTEGER
N
N#ifdef _WIN32	/* FatFs development platform */
S
S#include <windows.h>
S#include <tchar.h>
S
N#else			/* Embedded platform */
N
N/* These types must be 16-bit, 32-bit or larger integer */
Ntypedef int				INT;
Ntypedef unsigned int	UINT;
N
N/* These types must be 8-bit integer */
Ntypedef char			CHAR;
Ntypedef unsigned char	UCHAR;
Ntypedef unsigned char	BYTE;
N
N/* These types must be 16-bit integer */
Ntypedef short			SHORT;
Ntypedef unsigned short	USHORT;
Ntypedef unsigned short	WORD;
Ntypedef unsigned short	WCHAR;
N
N/* These types must be 32-bit integer */
Ntypedef long			LONG;
Ntypedef unsigned long	ULONG;
Ntypedef unsigned long	DWORD;
N
N#endif
N
N#endif
L 21 "user\tjpgd.h" 2
N
N
N/* Error code */
Ntypedef enum {
N	JDR_OK = 0,	/* 0: Succeeded */
N	JDR_INTR,	/* 1: Interrupted by output function */	
N	JDR_INP,	/* 2: Device error or wrong termination of input stream */
N	JDR_MEM1,	/* 3: Insufficient memory pool for the image */
N	JDR_MEM2,	/* 4: Insufficient stream input buffer */
N	JDR_PAR,	/* 5: Parameter error */
N	JDR_FMT1,	/* 6: Data format error (may be damaged data) */
N	JDR_FMT2,	/* 7: Right format but not supported */
N	JDR_FMT3	/* 8: Not supported JPEG standard */
N} JRESULT;
N
N
N
N/* Rectangular structure */
Ntypedef struct {
N	WORD left, right, top, bottom;
N} JRECT;
N
N
N
N/* Decompressor object structure */
Ntypedef struct JDEC JDEC;
Nstruct JDEC {
N	UINT dctr;				/* Number of bytes available in the input buffer */
N	BYTE* dptr;				/* Current data read ptr */
N	BYTE* inbuf;			/* Bit stream input buffer */
N	BYTE dmsk;				/* Current bit in the current read byte */
N	BYTE scale;				/* Output scaling ratio */
N	BYTE msx, msy;			/* MCU size in unit of block (width, height) */
N	BYTE qtid[3];			/* Quantization table ID of each component */
N	SHORT dcv[3];			/* Previous DC element of each component */
N	WORD nrst;				/* Restart inverval */
N	UINT width, height;		/* Size of the input image (pixel) */
N	BYTE* huffbits[2][2];	/* Huffman bit distribution tables [id][dcac] */
N	WORD* huffcode[2][2];	/* Huffman code word tables [id][dcac] */
N	BYTE* huffdata[2][2];	/* Huffman decoded data tables [id][dcac] */
N	LONG* qttbl[4];			/* Dequaitizer tables [id] */
N	void* workbuf;			/* Working buffer for IDCT and RGB output */
N	BYTE* mcubuf;			/* Working buffer for the MCU */
N	void* pool;				/* Pointer to available memory pool */
N	UINT sz_pool;			/* Size of momory pool (bytes available) */
N	UINT (*infunc)(JDEC*, BYTE*, UINT);/* Pointer to jpeg stream input function */
N	void* device;			/* Pointer to I/O device identifiler for the session */
N};
N
N
N
N/* TJpgDec API functions */
NJRESULT jd_prepare (JDEC*, UINT(*)(JDEC*,BYTE*,UINT), void*, UINT, void*);
NJRESULT jd_decomp (JDEC*, UINT(*)(JDEC*,void*,JRECT*), BYTE);
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* _TJPGDEC */
L 22 "user\tjpgd.c" 2
N
N
N/*-----------------------------------------------*/
N/* Zigzag-order to raster-order conversion table */
N/*-----------------------------------------------*/
N
N#define ZIG(n)	Zig[n]
N
Nstatic
Nconst BYTE Zig[64] = {	/* Zigzag-order to raster-order conversion table */
N	 0,  1,  8, 16,  9,  2,  3, 10, 17, 24, 32, 25, 18, 11,  4,  5,
N	12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13,  6,  7, 14, 21, 28,
N	35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51,
N	58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63
N};
N
N
N
N/*-------------------------------------------------*/
N/* Input scale factor of Arai algorithm            */
N/* (scaled up 16 bits for fixed point operations)  */
N/*-------------------------------------------------*/
N
N#define IPSF(n)	Ipsf[n]
N
Nstatic
Nconst WORD Ipsf[64] = {	/* See also aa_idct.png */
N	(WORD)(1.00000*8192), (WORD)(1.38704*8192), (WORD)(1.30656*8192), (WORD)(1.17588*8192), (WORD)(1.00000*8192), (WORD)(0.78570*8192), (WORD)(0.54120*8192), (WORD)(0.27590*8192),
N	(WORD)(1.38704*8192), (WORD)(1.92388*8192), (WORD)(1.81226*8192), (WORD)(1.63099*8192), (WORD)(1.38704*8192), (WORD)(1.08979*8192), (WORD)(0.75066*8192), (WORD)(0.38268*8192),
N	(WORD)(1.30656*8192), (WORD)(1.81226*8192), (WORD)(1.70711*8192), (WORD)(1.53636*8192), (WORD)(1.30656*8192), (WORD)(1.02656*8192), (WORD)(0.70711*8192), (WORD)(0.36048*8192),
N	(WORD)(1.17588*8192), (WORD)(1.63099*8192), (WORD)(1.53636*8192), (WORD)(1.38268*8192), (WORD)(1.17588*8192), (WORD)(0.92388*8192), (WORD)(0.63638*8192), (WORD)(0.32442*8192),
N	(WORD)(1.00000*8192), (WORD)(1.38704*8192), (WORD)(1.30656*8192), (WORD)(1.17588*8192), (WORD)(1.00000*8192), (WORD)(0.78570*8192), (WORD)(0.54120*8192), (WORD)(0.27590*8192),
N	(WORD)(0.78570*8192), (WORD)(1.08979*8192), (WORD)(1.02656*8192), (WORD)(0.92388*8192), (WORD)(0.78570*8192), (WORD)(0.61732*8192), (WORD)(0.42522*8192), (WORD)(0.21677*8192),
N	(WORD)(0.54120*8192), (WORD)(0.75066*8192), (WORD)(0.70711*8192), (WORD)(0.63638*8192), (WORD)(0.54120*8192), (WORD)(0.42522*8192), (WORD)(0.29290*8192), (WORD)(0.14932*8192),
N	(WORD)(0.27590*8192), (WORD)(0.38268*8192), (WORD)(0.36048*8192), (WORD)(0.32442*8192), (WORD)(0.27590*8192), (WORD)(0.21678*8192), (WORD)(0.14932*8192), (WORD)(0.07612*8192)
N};
N
N
N
N/*---------------------------------------------*/
N/* Conversion table for fast clipping process  */
N/*---------------------------------------------*/
N
N#if JD_TBLCLIP
X#if 1
N
N#define BYTECLIP(v) Clip8[(UINT)(v) & 0x3FF]
N
Nstatic
Nconst BYTE Clip8[1024] = {
N	/* 0..255 */
N	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
N	32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
N	64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
N	96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
N	128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
N	160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
N	192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223,
N	224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
N	/* 256..511 */
N	255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
N	255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
N	255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
N	255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
N	255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
N	255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
N	255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
N	255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
N	/* -512..-257 */
N	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
N	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
N	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
N	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
N	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
N	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
N	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
N	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
N	/* -256..-1 */
N	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
N	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
N	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
N	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
N	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
N	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
N	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
N	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
N};
N
N#else	/* JD_TBLCLIP */
S
Sinline
SBYTE BYTECLIP (
S	INT val
S)
S{
S	if (val < 0) val = 0;
S	if (val > 255) val = 255;
S
S	return (BYTE)val;
S}
S
N#endif
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Allocate a memory block from memory pool                              */
N/*-----------------------------------------------------------------------*/
N
Nstatic
Nvoid* alloc_pool (	/* Pointer to allocated memory block (NULL:no memory available) */
N	JDEC* jd,		/* Pointer to the decompressor object */
N	UINT nd			/* Number of bytes to allocate */
N)
N{
N	char *rp = 0;
N
N
N	nd = (nd + 3) & ~3;			/* Align block size to the word boundary */
N
N	if (jd->sz_pool >= nd) {
N		jd->sz_pool -= nd;
N		rp = (char*)jd->pool;			/* Get start of available memory pool */
N		jd->pool = (void*)(rp + nd);	/* Allocate requierd bytes */
N	}
N
N	return (void*)rp;	/* Return allocated memory block (NULL:no memory to allocate) */
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Create de-quantization and prescaling tables with a DQT segment       */
N/*-----------------------------------------------------------------------*/
N
Nstatic
NUINT create_qt_tbl (	/* 0:OK, !0:Failed */
N	JDEC* jd,			/* Pointer to the decompressor object */
N	const BYTE* data,	/* Pointer to the quantizer tables */
N	UINT ndata			/* Size of input data */
N)
N{
N	UINT i;
N	BYTE d, z;
N	LONG *pb;
N
N
N	while (ndata) {	/* Process all tables in the segment */
N		if (ndata < 65) return JDR_FMT1;	/* Err: table size is unaligned */
N		ndata -= 65;
N		d = *data++;							/* Get table property */
N		if (d & 0xF0) return JDR_FMT1;			/* Err: not 8-bit resolution */
N		i = d & 3;								/* Get table ID */
N		pb = alloc_pool(jd, 64 * sizeof (LONG));/* Allocate a memory block for the table */
N		if (!pb) return JDR_MEM1;				/* Err: not enough memory */
N		jd->qttbl[i] = pb;						/* Register the table */
N		for (i = 0; i < 64; i++) {				/* Load the table */
N			z = ZIG(i);							/* Zigzag-order to raster-order conversion */
X			z = Zig[i];							 
N			pb[z] = (LONG)((DWORD)*data++ * IPSF(z));	/* Apply scale factor of Arai algorithm to the de-quantizers */
X			pb[z] = (LONG)((DWORD)*data++ * Ipsf[z]);	 
N		}
N	}
N
N	return JDR_OK;
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Create huffman code tables with a DHT segment                         */
N/*-----------------------------------------------------------------------*/
N
Nstatic
NUINT create_huffman_tbl (	/* 0:OK, !0:Failed */
N	JDEC* jd,				/* Pointer to the decompressor object */
N	const BYTE* data,		/* Pointer to the packed huffman tables */
N	UINT ndata				/* Size of input data */
N)
N{
N	UINT i, j, b, np, cls, num;
N	BYTE d, *pb, *pd;
N	WORD hc, *ph;
N
N
N	while (ndata) {	/* Process all tables in the segment */
N		if (ndata < 17) return JDR_FMT1;	/* Err: wrong data size */
N		ndata -= 17;
N		d = *data++;						/* Get table number and class */
N		cls = (d >> 4); num = d & 0x0F;		/* class = dc(0)/ac(1), table number = 0/1 */
N		if (d & 0xEE) return JDR_FMT1;		/* Err: invalid class/number */
N		pb = alloc_pool(jd, 16);			/* Allocate a memory block for the bit distribution table */
N		if (!pb) return JDR_MEM1;			/* Err: not enough memory */
N		jd->huffbits[num][cls] = pb;
N		for (np = i = 0; i < 16; i++) {		/* Load number of patterns for 1 to 16-bit code */
N			pb[i] = b = *data++;
N			np += b;	/* Get sum of code words for each code */
N		}
N
N		ph = alloc_pool(jd, np * sizeof (WORD));/* Allocate a memory block for the code word table */
N		if (!ph) return JDR_MEM1;			/* Err: not enough memory */
N		jd->huffcode[num][cls] = ph;
N		hc = 0;
N		for (j = i = 0; i < 16; i++) {		/* Re-build huffman code word table */
N			b = pb[i];
N			while (b--) ph[j++] = hc++;
N			hc <<= 1;
N		}
N
N		if (ndata < np) return JDR_FMT1;	/* Err: wrong data size */
N		ndata -= np;
N		pd = alloc_pool(jd, np);			/* Allocate a memory block for the decoded data */
N		if (!pd) return JDR_MEM1;			/* Err: not enough memory */
N		jd->huffdata[num][cls] = pd;
N		for (i = 0; i < np; i++) {			/* Load decoded data corresponds to each code ward */
N			d = *data++;
N			if (!cls && d > 11) return JDR_FMT1;
N			*pd++ = d;
N		}
N	}
N
N	return JDR_OK;
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Extract N bits from input stream                                      */
N/*-----------------------------------------------------------------------*/
N
Nstatic
NINT bitext (	/* >=0: extracted data, <0: error code */
N	JDEC* jd,	/* Pointer to the decompressor object */
N	UINT nbit	/* Number of bits to extract (1 to 11) */
N)
N{
N	BYTE msk, s, *dp;
N	UINT dc, v, f;
N
N
N	msk = jd->dmsk; dc = jd->dctr; dp = jd->dptr;	/* Bit mask, number of data available, read ptr */
N	s = *dp; v = f = 0;
N	do {
N		if (!msk) {				/* Next byte? */
N			if (!dc) {			/* No input data is available, re-fill input buffer */
N				dp = jd->inbuf;	/* Top of input buffer */
N				dc = jd->infunc(jd, dp, JD_SZBUF);
X				dc = jd->infunc(jd, dp, 512);
N				if (!dc) return 0 - (INT)JDR_INP;	/* Err: read error or wrong stream termination */
N			} else {
N				dp++;			/* Next data ptr */
N			}
N			dc--;				/* Decrement number of available bytes */
N			if (f) {			/* In flag sequence? */
N				f = 0;			/* Exit flag sequence */
N				if (*dp != 0) return 0 - (INT)JDR_FMT1;	/* Err: unexpected flag is detected (may be collapted data) */
N				*dp = s = 0xFF;			/* The flag is a data 0xFF */
N			} else {
N				s = *dp;				/* Get next data byte */
N				if (s == 0xFF) {		/* Is start of flag sequence? */
N					f = 1; continue;	/* Enter flag sequence */
N				}
N			}
N			msk = 0x80;		/* Read from MSB */
N		}
N		v <<= 1;	/* Get a bit */
N		if (s & msk) v++;
N		msk >>= 1;
N		nbit--;
N	} while (nbit);
N	jd->dmsk = msk; jd->dctr = dc; jd->dptr = dp;
N
N	return (INT)v;
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Extract a huffman decoded data from input stream                      */
N/*-----------------------------------------------------------------------*/
N
Nstatic
NINT huffext (			/* >=0: decoded data, <0: error code */
N	JDEC* jd,			/* Pointer to the decompressor object */
N	const BYTE* hbits,	/* Pointer to the bit distribution table */
N	const WORD* hcode,	/* Pointer to the code word table */
N	const BYTE* hdata	/* Pointer to the data table */
N)
N{
N	BYTE msk, s, *dp;
N	UINT dc, v, f, bl, nd;
N
N
N	msk = jd->dmsk; dc = jd->dctr; dp = jd->dptr;	/* Bit mask, number of data available, read ptr */
N	s = *dp; v = f = 0;
N	bl = 16;	/* Max code length */
N	do {
N		if (!msk) {		/* Next byte? */
N			if (!dc) {	/* No input data is available, re-fill input buffer */
N				dp = jd->inbuf;	/* Top of input buffer */
N				dc = jd->infunc(jd, dp, JD_SZBUF);
X				dc = jd->infunc(jd, dp, 512);
N				if (!dc) return 0 - (INT)JDR_INP;	/* Err: read error or wrong stream termination */
N			} else {
N				dp++;	/* Next data ptr */
N			}
N			dc--;		/* Decrement number of available bytes */
N			if (f) {		/* In flag sequence? */
N				f = 0;		/* Exit flag sequence */
N				if (*dp != 0)
N					return 0 - (INT)JDR_FMT1;	/* Err: unexpected flag is detected (may be collapted data) */
N				*dp = s = 0xFF;			/* The flag is a data 0xFF */
N			} else {
N				s = *dp;				/* Get next data byte */
N				if (s == 0xFF) {		/* Is start of flag sequence? */
N					f = 1; continue;	/* Enter flag sequence, get trailing byte */
N				}
N			}
N			msk = 0x80;		/* Read from MSB */
N		}
N		v <<= 1;	/* Get a bit */
N		if (s & msk) v++;
N		msk >>= 1;
N
N		for (nd = *hbits++; nd; nd--) {	/* Search the code word in this bit length */
N			if (v == *hcode++) {		/* Matched? */
N				jd->dmsk = msk; jd->dctr = dc; jd->dptr = dp;
N				return *hdata;			/* Return the decoded data */
N			}
N			hdata++;
N		}
N		bl--;
N	} while (bl);
N
N	return 0 - (INT)JDR_FMT1;	/* Err: code not found (may be collapted data) */
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Apply Inverse-DCT in Arai Algorithm (see also aa_idct.png)            */
N/*-----------------------------------------------------------------------*/
N
Nstatic
Nvoid block_idct (
N	LONG* src,	/* Input block data (de-quantized and pre-scaled for Arai Algorithm) */
N	BYTE* dst	/* Pointer to the destination to store the block as byte array */
N)
N{
N	const LONG M13 = (LONG)(1.41421*4096), M2 = (LONG)(1.08239*4096), M4 = (LONG)(2.61313*4096), M5 = (LONG)(1.84776*4096);
N	LONG v0, v1, v2, v3, v4, v5, v6, v7;
N	LONG t10, t11, t12, t13;
N	UINT i;
N
N	/* Process columns */
N	for (i = 0; i < 8; i++) {
N		v0 = src[8 * 0];	/* Get even elements */
N		v1 = src[8 * 2];
N		v2 = src[8 * 4];
N		v3 = src[8 * 6];
N
N		t10 = v0 + v2;		/* Process the even elements */
N		t12 = v0 - v2;
N		t11 = (v1 - v3) * M13 >> 12;
N		v3 += v1;
N		t11 -= v3;
N		v0 = t10 + v3;
N		v3 = t10 - v3;
N		v1 = t11 + t12;
N		v2 = t12 - t11;
N
N		v4 = src[8 * 7];	/* Get odd elements */
N		v5 = src[8 * 1];
N		v6 = src[8 * 5];
N		v7 = src[8 * 3];
N
N		t10 = v5 - v4;		/* Process the odd elements */
N		t11 = v5 + v4;
N		t12 = v6 - v7;
N		v7 += v6;
N		v5 = (t11 - v7) * M13 >> 12;
N		v7 += t11;
N		t13 = (t10 + t12) * M5 >> 12;
N		v4 = t13 - (t10 * M2 >> 12);
N		v6 = t13 - (t12 * M4 >> 12) - v7;
N		v5 -= v6;
N		v4 -= v5;
N
N		src[8 * 0] = v0 + v7;	/* Write-back transformed values */
N		src[8 * 7] = v0 - v7;
N		src[8 * 1] = v1 + v6;
N		src[8 * 6] = v1 - v6;
N		src[8 * 2] = v2 + v5;
N		src[8 * 5] = v2 - v5;
N		src[8 * 3] = v3 + v4;
N		src[8 * 4] = v3 - v4;
N
N		src++;	/* Next column */
N	}
N
N	/* Process rows */
N	src -= 8;
N	for (i = 0; i < 8; i++) {
N		v0 = src[0] + (128L << 8);	/* Get even elements (remove DC offset (-128) here) */
N		v1 = src[2];
N		v2 = src[4];
N		v3 = src[6];
N
N		t10 = v0 + v2;				/* Process the even elements */
N		t12 = v0 - v2;
N		t11 = (v1 - v3) * M13 >> 12;
N		v3 += v1;
N		t11 -= v3;
N		v0 = t10 + v3;
N		v3 = t10 - v3;
N		v1 = t11 + t12;
N		v2 = t12 - t11;
N
N		v4 = src[7];				/* Get odd elements */
N		v5 = src[1];
N		v6 = src[5];
N		v7 = src[3];
N
N		t10 = v5 - v4;				/* Process the odd elements */
N		t11 = v5 + v4;
N		t12 = v6 - v7;
N		v7 += v6;
N		v5 = (t11 - v7) * M13 >> 12;
N		v7 += t11;
N		t13 = (t10 + t12) * M5 >> 12;
N		v4 = t13 - (t10 * M2 >> 12);
N		v6 = t13 - (t12 * M4 >> 12) - v7;
N		v5 -= v6;
N		v4 -= v5;
N
N		dst[0] = BYTECLIP((v0 + v7) >> 8);	/* Descale the transformed values 8 bits and output */
X		dst[0] = Clip8[(UINT)((v0 + v7) >> 8) & 0x3FF];	 
N		dst[7] = BYTECLIP((v0 - v7) >> 8);
X		dst[7] = Clip8[(UINT)((v0 - v7) >> 8) & 0x3FF];
N		dst[1] = BYTECLIP((v1 + v6) >> 8);
X		dst[1] = Clip8[(UINT)((v1 + v6) >> 8) & 0x3FF];
N		dst[6] = BYTECLIP((v1 - v6) >> 8);
X		dst[6] = Clip8[(UINT)((v1 - v6) >> 8) & 0x3FF];
N		dst[2] = BYTECLIP((v2 + v5) >> 8);
X		dst[2] = Clip8[(UINT)((v2 + v5) >> 8) & 0x3FF];
N		dst[5] = BYTECLIP((v2 - v5) >> 8);
X		dst[5] = Clip8[(UINT)((v2 - v5) >> 8) & 0x3FF];
N		dst[3] = BYTECLIP((v3 + v4) >> 8);
X		dst[3] = Clip8[(UINT)((v3 + v4) >> 8) & 0x3FF];
N		dst[4] = BYTECLIP((v3 - v4) >> 8);
X		dst[4] = Clip8[(UINT)((v3 - v4) >> 8) & 0x3FF];
N		dst += 8;
N
N		src += 8;	/* Next row */
N	}
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Load all blocks in the MCU into working buffer                        */
N/*-----------------------------------------------------------------------*/
N
Nstatic
NJRESULT mcu_load (
N	JDEC* jd		/* Pointer to the decompressor object */
N)
N{
N	LONG *tmp = (LONG*)jd->workbuf;	/* Block working buffer for de-quantize and IDCT */
N	UINT blk, nby, nbc, i, z, id, cmp;
N	INT b, d, e;
N	BYTE *bp;
N	const BYTE *hb, *hd;
N	const WORD *hc;
N	const LONG *dqf;
N
N
N	nby = jd->msx * jd->msy;	/* Number of Y blocks (1, 2 or 4) */
N	nbc = 2;					/* Number of C blocks (2) */
N	bp = jd->mcubuf;			/* Pointer to the first block */
N
N	for (blk = 0; blk < nby + nbc; blk++) {
N		cmp = (blk < nby) ? 0 : blk - nby + 1;	/* Component number 0:Y, 1:Cb, 2:Cr */
N		id = cmp ? 1 : 0;						/* Huffman table ID of the component */
N
N		/* Extract a DC element from input stream */
N		hb = jd->huffbits[id][0];				/* Huffman table for the DC element */
N		hc = jd->huffcode[id][0];
N		hd = jd->huffdata[id][0];
N		b = huffext(jd, hb, hc, hd);			/* Extract a huffman coded data (bit length) */
W "user\tjpgd.c" 505 21 enumerated type mixed with another type
N		if (b < 0) return 0 - b;				/* Err: invalid code or input */
N		d = jd->dcv[cmp];						/* DC value of previous block */
N		if (b) {								/* If there is any difference from previous block */
N			e = bitext(jd, b);					/* Extract data bits */
W "user\tjpgd.c" 509 22 enumerated type mixed with another type
N			if (e < 0) return 0 - e;			/* Err: input */
N			b = 1 << (b - 1);					/* MSB position */
N			if (!(e & b)) e -= (b << 1) - 1;	/* Restore sign if needed */
N			d += e;								/* Get current value */
N			jd->dcv[cmp] = (SHORT)d;			/* Save current DC value for next block */
N		}
N		dqf = jd->qttbl[jd->qtid[cmp]];			/* De-quantizer table ID for this component */
N		tmp[0] = d * dqf[0] >> 8;				/* De-quantize, apply scale factor of Arai algorithm and descale 8 bits */
N
N		/* Extract following 63 AC elements from input stream */
N		for (i = 1; i < 64; i++) tmp[i] = 0;	/* Clear rest of elements */
N		hb = jd->huffbits[id][1];				/* Huffman table for the AC elements */
N		hc = jd->huffcode[id][1];
N		hd = jd->huffdata[id][1];
N		i = 1;					/* Top of the AC elements */
N		do {
N			b = huffext(jd, hb, hc, hd);		/* Extract a huffman coded value (zero runs and bit length) */
N			if (b == 0) break;					/* EOB? */
W "user\tjpgd.c" 527 22 enumerated type mixed with another type
N			if (b < 0) return 0 - b;			/* Err: invalid code or input error */
N			z = (UINT)b >> 4;					/* Number of leading zero elements */
N			if (z) {
N				i += z;							/* Skip zero elements */
N				if (i >= 64) return JDR_FMT1;	/* Too long zero run */
N			}
N			if (b &= 0x0F) {					/* Bit length */
N				d = bitext(jd, b);				/* Extract data bits */
W "user\tjpgd.c" 535 23 enumerated type mixed with another type
N				if (d < 0) return 0 - d;		/* Err: input device */
N				b = 1 << (b - 1);				/* MSB position */
N				if (!(d & b)) d -= (b << 1) - 1;/* Restore negative value if needed */
N				z = ZIG(i);						/* Zigzag-order to raster-order converted index */
X				z = Zig[i];						 
N				tmp[z] = d * dqf[z] >> 8;		/* De-quantize, apply scale factor of Arai algorithm and descale 8 bits */
N			}
N		} while (++i < 64);		/* Next AC element */
N
N		if (JD_USE_SCALE && jd->scale == 3)
X		if (1 && jd->scale == 3)
N			*bp = (*tmp / 256) + 128;	/* If scale ratio is 1/8, IDCT can be ommited and only DC element is used */
N		else
N			block_idct(tmp, bp);		/* Apply IDCT and store the block to the MCU buffer */
N
N		bp += 64;				/* Next block */
N	}
N
N	return JDR_OK;	/* All blocks have been loaded successfully */
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Output an MCU: Convert YCrCb to RGB and output it in RGB form         */
N/*-----------------------------------------------------------------------*/
N
Nstatic
NJRESULT mcu_output (
N	JDEC* jd,	/* Pointer to the decompressor object */
N	UINT (*outfunc)(JDEC*, void*, JRECT*),	/* RGB output function */
N	UINT x,		/* MCU position in the image (left of the MCU) */
N	UINT y		/* MCU position in the image (top of the MCU) */
N)
N{
N	const INT CVACC = (sizeof (INT) > 2) ? 1024 : 128;
N	UINT ix, iy, mx, my, rx, ry;
N	INT yy, cb, cr;
N	BYTE *py, *pc, *rgb24;
N	JRECT rect;
N
N
N	mx = jd->msx * 8; my = jd->msy * 8;					/* MCU size (pixel) */
N	rx = (x + mx <= jd->width) ? mx : jd->width - x;	/* Output rectangular size (it may be clipped at right/bottom end) */
N	ry = (y + my <= jd->height) ? my : jd->height - y;
N	if (JD_USE_SCALE) {
X	if (1) {
N		rx >>= jd->scale; ry >>= jd->scale;
N		if (!rx || !ry) return JDR_OK;					/* Skip this MCU if all pixel is to be rounded off */
N		x >>= jd->scale; y >>= jd->scale;
N	}
N	rect.left = x; rect.right = x + rx - 1;				/* Rectangular area in the frame buffer */
N	rect.top = y; rect.bottom = y + ry - 1;
N
N
N	if (!JD_USE_SCALE || jd->scale != 3) {	/* Not for 1/8 scaling */
X	if (!1 || jd->scale != 3) {	 
N
N		/* Build an RGB MCU from discrete comopnents */
N		rgb24 = (BYTE*)jd->workbuf;
N		for (iy = 0; iy < my; iy++) {
N			pc = jd->mcubuf;
N			py = pc + iy * 8;
N			if (my == 16) {		/* Double block height? */
N				pc += 64 * 4 + (iy >> 1) * 8;
N				if (iy >= 8) py += 64;
N			} else {			/* Single block height */
N				pc += mx * 8 + iy * 8;
N			}
N			for (ix = 0; ix < mx; ix++) {
N				cb = pc[0] - 128; 	/* Get Cb/Cr component and restore right level */
N				cr = pc[64] - 128;
N				if (mx == 16) {					/* Double block width? */
N					if (ix == 8) py += 64 - 8;	/* Jump to next block if double block heigt */
N					pc += ix & 1;				/* Increase chroma pointer every two pixels */
N				} else {						/* Single block width */
N					pc++;						/* Increase chroma pointer every pixel */
N				}
N				yy = *py++;			/* Get Y component */
N
N				/* Convert YCbCr to RGB */
N				*rgb24++ = /* R */ BYTECLIP(yy + ((INT)(1.402 * CVACC) * cr) / CVACC);
X				*rgb24++ =   Clip8[(UINT)(yy + ((INT)(1.402 * CVACC) * cr) / CVACC) & 0x3FF];
N				*rgb24++ = /* G */ BYTECLIP(yy - ((INT)(0.344 * CVACC) * cb + (INT)(0.714 * CVACC) * cr) / CVACC);
X				*rgb24++ =   Clip8[(UINT)(yy - ((INT)(0.344 * CVACC) * cb + (INT)(0.714 * CVACC) * cr) / CVACC) & 0x3FF];
N				*rgb24++ = /* B */ BYTECLIP(yy + ((INT)(1.772 * CVACC) * cb) / CVACC);
X				*rgb24++ =   Clip8[(UINT)(yy + ((INT)(1.772 * CVACC) * cb) / CVACC) & 0x3FF];
N			}
N		}
N
N		/* Descale the MCU rectangular if needed */
N		if (JD_USE_SCALE && jd->scale) {
X		if (1 && jd->scale) {
N			UINT x, y, r, g, b, s, w, a;
N			BYTE *op;
N
N			/* Get averaged RGB value of each square correcponds to a pixel */
N			s = jd->scale * 2;	/* Bumber of shifts for averaging */
N			w = 1 << jd->scale;	/* Width of square */
N			a = (mx - w) * 3;	/* Bytes to skip for next line in the square */
N			op = (BYTE*)jd->workbuf;
N			for (iy = 0; iy < my; iy += w) {
N				for (ix = 0; ix < mx; ix += w) {
N					rgb24 = (BYTE*)jd->workbuf + (iy * mx + ix) * 3;
N					r = g = b = 0;
N					for (y = 0; y < w; y++) {	/* Accumulate RGB value in the square */
N						for (x = 0; x < w; x++) {
N							r += *rgb24++;
N							g += *rgb24++;
N							b += *rgb24++;
N						}
N						rgb24 += a;
N					}							/* Put the averaged RGB value as a pixel */
N					*op++ = (BYTE)(r >> s);
N					*op++ = (BYTE)(g >> s);
N					*op++ = (BYTE)(b >> s);
N				}
N			}
N		}
N
N	} else {	/* For only 1/8 scaling (left-top pixel in each block are the DC value of the block) */
N
N		/* Build a 1/8 descaled RGB MCU from discrete comopnents */
N		rgb24 = (BYTE*)jd->workbuf;
N		pc = jd->mcubuf + mx * my;
N		cb = pc[0] - 128;		/* Get Cb/Cr component and restore right level */
N		cr = pc[64] - 128;
N		for (iy = 0; iy < my; iy += 8) {
N			py = jd->mcubuf;
N			if (iy == 8) py += 64 * 2;
N			for (ix = 0; ix < mx; ix += 8) {
N				yy = *py;	/* Get Y component */
N				py += 64;
N
N				/* Convert YCbCr to RGB */
N				*rgb24++ = /* R */ BYTECLIP(yy + ((INT)(1.402 * CVACC) * cr / CVACC));
X				*rgb24++ =   Clip8[(UINT)(yy + ((INT)(1.402 * CVACC) * cr / CVACC)) & 0x3FF];
N				*rgb24++ = /* G */ BYTECLIP(yy - ((INT)(0.344 * CVACC) * cb + (INT)(0.714 * CVACC) * cr) / CVACC);
X				*rgb24++ =   Clip8[(UINT)(yy - ((INT)(0.344 * CVACC) * cb + (INT)(0.714 * CVACC) * cr) / CVACC) & 0x3FF];
N				*rgb24++ = /* B */ BYTECLIP(yy + ((INT)(1.772 * CVACC) * cb / CVACC));
X				*rgb24++ =   Clip8[(UINT)(yy + ((INT)(1.772 * CVACC) * cb / CVACC)) & 0x3FF];
N			}
N		}
N	}
N
N	/* Squeeze up pixel table if a part of MCU is to be truncated */
N	mx >>= jd->scale;
N	if (rx < mx) {
N		BYTE *s, *d;
N		UINT x, y;
N
N		s = d = (BYTE*)jd->workbuf;
N		for (y = 0; y < ry; y++) {
N			for (x = 0; x < rx; x++) {	/* Copy effective pixels */
N				*d++ = *s++;
N				*d++ = *s++;
N				*d++ = *s++;
N			}
N			s += (mx - rx) * 3;	/* Skip truncated pixels */
N		}
N	}
N
N	/* Convert RGB888 to RGB565 if needed */
N	if (JD_FORMAT == 1) {
X	if (1 == 1) {
N		BYTE *s = (BYTE*)jd->workbuf;
N		WORD w, *d = (WORD*)s;
N		UINT n = rx * ry;
N
N		do {
N			w = (*s++ & 0xF8) << 8;		/* RRRRR----------- */
N			w |= (*s++ & 0xFC) << 3;	/* -----GGGGGG----- */
N			w |= *s++ >> 3;				/* -----------BBBBB */
N			*d++ = w;
N		} while (--n);
N	}
N
N	/* Output the RGB rectangular */
N	return outfunc(jd, jd->workbuf, &rect) ? JDR_OK : JDR_INTR; 
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Process restart interval                                              */
N/*-----------------------------------------------------------------------*/
N
Nstatic
NJRESULT restart (
N	JDEC* jd,	/* Pointer to the decompressor object */
N	WORD rstn	/* Expected restert sequense number */
N)
N{
N	UINT i, dc;
N	WORD d;
N	BYTE *dp;
N
N
N	/* Discard padding bits and get two bytes from the input stream */
N	dp = jd->dptr; dc = jd->dctr;
N	d = 0;
N	for (i = 0; i < 2; i++) {
N		if (!dc) {	/* No input data is available, re-fill input buffer */
N			dp = jd->inbuf;
N			dc = jd->infunc(jd, dp, JD_SZBUF);
X			dc = jd->infunc(jd, dp, 512);
N			if (!dc) return JDR_INP;
N		} else {
N			dp++;
N		}
N		dc--;
N		d = (d << 8) | *dp;	/* Get a byte */
N	}
N	jd->dptr = dp; jd->dctr = dc; jd->dmsk = 0;
N
N	/* Check the marker */
N	if ((d & 0xFFD8) != 0xFFD0 || (d & 7) != (rstn & 7))
N		return JDR_FMT1;	/* Err: expected RSTn marker is not detected (may be collapted data) */
N
N	/* Reset DC offset */
N	jd->dcv[2] = jd->dcv[1] = jd->dcv[0] = 0;
N
N	return JDR_OK;
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Analyze the JPEG image and Initialize decompressor object             */
N/*-----------------------------------------------------------------------*/
N
N#define	LDB_WORD(ptr)		(WORD)(((WORD)*((BYTE*)(ptr))<<8)|(WORD)*(BYTE*)((ptr)+1))
N
N
NJRESULT jd_prepare (
N	JDEC* jd,			/* Blank decompressor object */
N	UINT (*infunc)(JDEC*, BYTE*, UINT),	/* JPEG strem input function */
N	void* pool,			/* Working buffer for the decompression session */
N	UINT sz_pool,		/* Size of working buffer */
N	void* dev			/* I/O device identifier for the session */
N)
N{
N	BYTE *seg, b;
N	WORD marker;
N	DWORD ofs;
N	UINT n, i, j, len;
N	JRESULT rc;
N
N
N	if (!pool) return JDR_PAR;
N
N	jd->pool = pool;		/* Work memroy */
N	jd->sz_pool = sz_pool;	/* Size of given work memory */
N	jd->infunc = infunc;	/* Stream input function */
N	jd->device = dev;		/* I/O device identifier */
N	jd->nrst = 0;			/* No restart interval (default) */
N
N	for (i = 0; i < 2; i++) {	/* Nulls pointers */
N		for (j = 0; j < 2; j++) {
N			jd->huffbits[i][j] = 0;
N			jd->huffcode[i][j] = 0;
N			jd->huffdata[i][j] = 0;
N		}
N	}
N	for (i = 0; i < 4; i++) jd->qttbl[i] = 0;
N
N	jd->inbuf = seg = alloc_pool(jd, JD_SZBUF);		/* Allocate stream input buffer */
X	jd->inbuf = seg = alloc_pool(jd, 512);		 
N	if (!seg) return JDR_MEM1;
N
N	if (jd->infunc(jd, seg, 2) != 2) return JDR_INP;/* Check SOI marker */
N	if (LDB_WORD(seg) != 0xFFD8) return JDR_FMT1;	/* Err: SOI is not detected */
X	if ((WORD)(((WORD)*((BYTE*)(seg))<<8)|(WORD)*(BYTE*)((seg)+1)) != 0xFFD8) return JDR_FMT1;	 
N	ofs = 2;
N
N	for (;;) {
N		/* Get a JPEG marker */
N		if (jd->infunc(jd, seg, 4) != 4) return JDR_INP;
N		marker = LDB_WORD(seg);		/* Marker */
X		marker = (WORD)(((WORD)*((BYTE*)(seg))<<8)|(WORD)*(BYTE*)((seg)+1));		 
N		len = LDB_WORD(seg + 2);	/* Length field */
X		len = (WORD)(((WORD)*((BYTE*)(seg + 2))<<8)|(WORD)*(BYTE*)((seg + 2)+1));	 
N		if (len <= 2 || (marker >> 8) != 0xFF) return JDR_FMT1;
N		len -= 2;		/* Content size excluding length field */
N		ofs += 4 + len;	/* Number of bytes loaded */
N
N		switch (marker & 0xFF) {
N		case 0xC0:	/* SOF0 (baseline JPEG) */
N			/* Load segment data */
N			if (len > JD_SZBUF) return JDR_MEM2;
X			if (len > 512) return JDR_MEM2;
N			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
N
N			jd->width = LDB_WORD(seg+3);		/* Image width in unit of pixel */
X			jd->width = (WORD)(((WORD)*((BYTE*)(seg+3))<<8)|(WORD)*(BYTE*)((seg+3)+1));		 
N			jd->height = LDB_WORD(seg+1);		/* Image height in unit of pixel */
X			jd->height = (WORD)(((WORD)*((BYTE*)(seg+1))<<8)|(WORD)*(BYTE*)((seg+1)+1));		 
N			if (seg[5] != 3) return JDR_FMT3;	/* Err: Supports only Y/Cb/Cr format */
N
N			/* Check three image components */
N			for (i = 0; i < 3; i++) {	
N				b = seg[7 + 3 * i];							/* Get sampling factor */
N				if (!i) {	/* Y component */
N					if (b != 0x11 && b != 0x22 && b != 0x21)/* Check sampling factor */
N						return JDR_FMT3;					/* Err: Supports only 4:4:4, 4:2:0 or 4:2:2 */
N					jd->msx = b >> 4; jd->msy = b & 15;		/* Size of MCU [blocks] */
N				} else {	/* Cb/Cr component */
N					if (b != 0x11) return JDR_FMT3;			/* Err: Sampling factor of Cr/Cb must be 1 */
N				}
N				b = seg[8 + 3 * i];							/* Get dequantizer table ID for this component */
N				if (b > 3) return JDR_FMT3;					/* Err: Invalid ID */
N				jd->qtid[i] = b;
N			}
N			break;
N
N		case 0xDD:	/* DRI */
N			/* Load segment data */
N			if (len > JD_SZBUF) return JDR_MEM2;
X			if (len > 512) return JDR_MEM2;
N			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
N
N			/* Get restart interval (MCUs) */
N			jd->nrst = LDB_WORD(seg);
X			jd->nrst = (WORD)(((WORD)*((BYTE*)(seg))<<8)|(WORD)*(BYTE*)((seg)+1));
N			break;
N
N		case 0xC4:	/* DHT */
N			/* Load segment data */
N			if (len > JD_SZBUF) return JDR_MEM2;
X			if (len > 512) return JDR_MEM2;
N			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
N
N			/* Create huffman tables */
W "user\tjpgd.c" 848 7 enumerated type mixed with another type
N			rc = create_huffman_tbl(jd, seg, len);
N			if (rc) return rc;
N			break;
N
N		case 0xDB:	/* DQT */
N			/* Load segment data */
N			if (len > JD_SZBUF) return JDR_MEM2;
X			if (len > 512) return JDR_MEM2;
N			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
N
N			/* Create de-quantizer tables */
W "user\tjpgd.c" 858 7 enumerated type mixed with another type
N			rc = create_qt_tbl(jd, seg, len);
N			if (rc) return rc;
N			break;
N
N		case 0xDA:	/* SOS */
N			/* Load segment data */
N			if (len > JD_SZBUF) return JDR_MEM2;
X			if (len > 512) return JDR_MEM2;
N			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
N
N			if (!jd->width || !jd->height) return JDR_FMT1;	/* Err: Invalid image size */
N
N			if (seg[0] != 3) return JDR_FMT3;				/* Err: Supports only three color components format */
N
N			/* Check if all tables corresponding to each components have been loaded */
N			for (i = 0; i < 3; i++) {
N				b = seg[2 + 2 * i];	/* Get huffman table ID */
N				if (b != 0x00 && b != 0x11)	return JDR_FMT3;	/* Err: Different table number for DC/AC element */
N				b = i ? 1 : 0;
N				if (!jd->huffbits[b][0] || !jd->huffbits[b][1])	/* Check huffman table for this component */
N					return JDR_FMT1;							/* Err: Huffman table not loaded */
N				if (!jd->qttbl[jd->qtid[i]]) return JDR_FMT1;	/* Err: Dequantizer table not loaded */
N			}
N
N			/* Allocate working buffer for MCU and RGB */
N			n = jd->msy * jd->msx;						/* Number of Y blocks in the MCU */
N			if (!n) return JDR_FMT1;					/* Err: SOF0 has not been loaded */
N			len = n * 64 * 2 + 64;						/* Allocate buffer for IDCT and RGB output */
N			if (len < 256) len = 256;					/* but at least 256 byte is required for IDCT */
N			jd->workbuf = alloc_pool(jd, len);			/* and it may occupy a part of following MCU working buffer for RGB output */
N			if (!jd->workbuf) return JDR_MEM1;			/* Err: not enough memory */
N			jd->mcubuf = alloc_pool(jd, (n + 2) * 64);	/* Allocate MCU working buffer */
N			if (!jd->mcubuf) return JDR_MEM1;			/* Err: not enough memory */
N
N			/* Pre-load the JPEG data to extract it from the bit stream */
N			jd->dptr = seg; jd->dctr = 0; jd->dmsk = 0;	/* Prepare to read bit stream */
N			if (ofs %= JD_SZBUF) {						/* Align read offset to JD_SZBUF */
X			if (ofs %= 512) {						 
N				jd->dctr = jd->infunc(jd, seg + ofs, JD_SZBUF - (UINT)ofs);
X				jd->dctr = jd->infunc(jd, seg + ofs, 512 - (UINT)ofs);
N				jd->dptr = seg + ofs - 1;
N			}
N
N			return JDR_OK;		/* Initialization succeeded. Ready to decompress the JPEG image. */
N
N		case 0xC1:	/* SOF1 */
N		case 0xC2:	/* SOF2 */
N		case 0xC3:	/* SOF3 */
N		case 0xC5:	/* SOF5 */
N		case 0xC6:	/* SOF6 */
N		case 0xC7:	/* SOF7 */
N		case 0xC9:	/* SOF9 */
N		case 0xCA:	/* SOF10 */
N		case 0xCB:	/* SOF11 */
N		case 0xCD:	/* SOF13 */
N		case 0xCE:	/* SOF14 */
N		case 0xCF:	/* SOF15 */
N		case 0xD9:	/* EOI */
N			return JDR_FMT3;	/* Unsuppoted JPEG standard (may be progressive JPEG) */
N
N		default:	/* Unknown segment (comment, exif or etc..) */
N			/* Skip segment data */
N			if (jd->infunc(jd, 0, len) != len)	/* Null pointer specifies to skip bytes of stream */
N				return JDR_INP;
N		}
N	}
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Start to decompress the JPEG picture                                  */
N/*-----------------------------------------------------------------------*/
N
NJRESULT jd_decomp (
N	JDEC* jd,								/* Initialized decompression object */
N	UINT (*outfunc)(JDEC*, void*, JRECT*),	/* RGB output function */
N	BYTE scale								/* Output de-scaling factor (0 to 3) */
N)
N{
N	UINT x, y, mx, my;
N	WORD rst, rsc;
N	JRESULT rc;
N
N
N	if (scale > (JD_USE_SCALE ? 3 : 0)) return JDR_PAR;
X	if (scale > (1 ? 3 : 0)) return JDR_PAR;
N	jd->scale = scale;
N
N	mx = jd->msx * 8; my = jd->msy * 8;			/* Size of the MCU (pixel) */
N
N	jd->dcv[2] = jd->dcv[1] = jd->dcv[0] = 0;	/* Initialize DC values */
N	rst = rsc = 0;
N
N	rc = JDR_OK;
N	for (y = 0; y < jd->height; y += my) {		/* Vertical loop of MCUs */
N		for (x = 0; x < jd->width; x += mx) {	/* Horizontal loop of MCUs */
N			if (jd->nrst && rst++ == jd->nrst) {	/* Process restart interval if enabled */
N				rc = restart(jd, rsc++);
N				if (rc != JDR_OK) return rc;
N				rst = 1;
N			}
N			rc = mcu_load(jd);					/* Load an MCU (decompress huffman coded stream and apply IDCT) */
N			if (rc != JDR_OK) return rc;
N			rc = mcu_output(jd, outfunc, x, y);	/* Output the MCU (color space conversion, scaling and output) */
N			if (rc != JDR_OK) return rc;
N		}
N	}
N
N	return rc;
N}
N
N
N
