; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\tjpgd.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\tjpgd.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -IF:\excitationPulse\Ver_F8_·­Ò³\RTE -ID:\Keil_v5\MDK\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\Keil_v5\MDK\ARM\CMSIS\Include -D__UVISION_VERSION=515 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\tjpgd.crf user\tjpgd.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  alloc_pool PROC
;;;130    static
;;;131    void* alloc_pool (	/* Pointer to allocated memory block (NULL:no memory available) */
000000  4602              MOV      r2,r0
;;;132    	JDEC* jd,		/* Pointer to the decompressor object */
;;;133    	UINT nd			/* Number of bytes to allocate */
;;;134    )
;;;135    {
;;;136    	char *rp = 0;
000002  2000              MOVS     r0,#0
;;;137    
;;;138    
;;;139    	nd = (nd + 3) & ~3;			/* Align block size to the word boundary */
000004  1ccb              ADDS     r3,r1,#3
000006  f0230103          BIC      r1,r3,#3
;;;140    
;;;141    	if (jd->sz_pool >= nd) {
00000a  6f13              LDR      r3,[r2,#0x70]
00000c  428b              CMP      r3,r1
00000e  d305              BCC      |L1.28|
;;;142    		jd->sz_pool -= nd;
000010  6f13              LDR      r3,[r2,#0x70]
000012  1a5b              SUBS     r3,r3,r1
000014  6713              STR      r3,[r2,#0x70]
;;;143    		rp = (char*)jd->pool;			/* Get start of available memory pool */
000016  6ed0              LDR      r0,[r2,#0x6c]
;;;144    		jd->pool = (void*)(rp + nd);	/* Allocate requierd bytes */
000018  1843              ADDS     r3,r0,r1
00001a  66d3              STR      r3,[r2,#0x6c]
                  |L1.28|
;;;145    	}
;;;146    
;;;147    	return (void*)rp;	/* Return allocated memory block (NULL:no memory to allocate) */
;;;148    }
00001c  4770              BX       lr
;;;149    
                          ENDP

                  create_qt_tbl PROC
;;;157    static
;;;158    UINT create_qt_tbl (	/* 0:OK, !0:Failed */
00001e  e92d47f0          PUSH     {r4-r10,lr}
;;;159    	JDEC* jd,			/* Pointer to the decompressor object */
;;;160    	const BYTE* data,	/* Pointer to the quantizer tables */
;;;161    	UINT ndata			/* Size of input data */
;;;162    )
;;;163    {
000022  4682              MOV      r10,r0
000024  460c              MOV      r4,r1
000026  4616              MOV      r6,r2
;;;164    	UINT i;
;;;165    	BYTE d, z;
;;;166    	LONG *pb;
;;;167    
;;;168    
;;;169    	while (ndata) {	/* Process all tables in the segment */
000028  e02b              B        |L1.130|
                  |L1.42|
;;;170    		if (ndata < 65) return JDR_FMT1;	/* Err: table size is unaligned */
00002a  2e41              CMP      r6,#0x41
00002c  d202              BCS      |L1.52|
00002e  2006              MOVS     r0,#6
                  |L1.48|
;;;171    		ndata -= 65;
;;;172    		d = *data++;							/* Get table property */
;;;173    		if (d & 0xF0) return JDR_FMT1;			/* Err: not 8-bit resolution */
;;;174    		i = d & 3;								/* Get table ID */
;;;175    		pb = alloc_pool(jd, 64 * sizeof (LONG));/* Allocate a memory block for the table */
;;;176    		if (!pb) return JDR_MEM1;				/* Err: not enough memory */
;;;177    		jd->qttbl[i] = pb;						/* Register the table */
;;;178    		for (i = 0; i < 64; i++) {				/* Load the table */
;;;179    			z = ZIG(i);							/* Zigzag-order to raster-order conversion */
;;;180    			pb[z] = (LONG)((DWORD)*data++ * IPSF(z));	/* Apply scale factor of Arai algorithm to the de-quantizers */
;;;181    		}
;;;182    	}
;;;183    
;;;184    	return JDR_OK;
;;;185    }
000030  e8bd87f0          POP      {r4-r10,pc}
                  |L1.52|
000034  3e41              SUBS     r6,r6,#0x41           ;171
000036  f8148b01          LDRB     r8,[r4],#1            ;172
00003a  f00800f0          AND      r0,r8,#0xf0           ;173
00003e  b108              CBZ      r0,|L1.68|
000040  2006              MOVS     r0,#6                 ;173
000042  e7f5              B        |L1.48|
                  |L1.68|
000044  f0080703          AND      r7,r8,#3              ;174
000048  f44f7180          MOV      r1,#0x100             ;175
00004c  4650              MOV      r0,r10                ;175
00004e  f7fffffe          BL       alloc_pool
000052  4605              MOV      r5,r0                 ;175
000054  b90d              CBNZ     r5,|L1.90|
000056  2003              MOVS     r0,#3                 ;176
000058  e7ea              B        |L1.48|
                  |L1.90|
00005a  f10a0054          ADD      r0,r10,#0x54          ;177
00005e  f8405027          STR      r5,[r0,r7,LSL #2]     ;177
000062  2700              MOVS     r7,#0                 ;178
000064  e00b              B        |L1.126|
                  |L1.102|
000066  48fd              LDR      r0,|L1.1116|
000068  f8109007          LDRB     r9,[r0,r7]            ;179
00006c  f8140b01          LDRB     r0,[r4],#1            ;180
000070  49fb              LDR      r1,|L1.1120|
000072  f8311019          LDRH     r1,[r1,r9,LSL #1]     ;180
000076  4348              MULS     r0,r1,r0              ;180
000078  f8450029          STR      r0,[r5,r9,LSL #2]     ;180
00007c  1c7f              ADDS     r7,r7,#1              ;178
                  |L1.126|
00007e  2f40              CMP      r7,#0x40              ;178
000080  d3f1              BCC      |L1.102|
                  |L1.130|
000082  2e00              CMP      r6,#0                 ;169
000084  d1d1              BNE      |L1.42|
000086  2000              MOVS     r0,#0                 ;184
000088  e7d2              B        |L1.48|
;;;186    
                          ENDP

                  create_huffman_tbl PROC
;;;194    static
;;;195    UINT create_huffman_tbl (	/* 0:OK, !0:Failed */
00008a  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;196    	JDEC* jd,				/* Pointer to the decompressor object */
;;;197    	const BYTE* data,		/* Pointer to the packed huffman tables */
;;;198    	UINT ndata				/* Size of input data */
;;;199    )
;;;200    {
00008e  b086              SUB      sp,sp,#0x18
000090  460d              MOV      r5,r1
000092  4616              MOV      r6,r2
;;;201    	UINT i, j, b, np, cls, num;
;;;202    	BYTE d, *pb, *pd;
;;;203    	WORD hc, *ph;
;;;204    
;;;205    
;;;206    	while (ndata) {	/* Process all tables in the segment */
000094  e08e              B        |L1.436|
                  |L1.150|
;;;207    		if (ndata < 17) return JDR_FMT1;	/* Err: wrong data size */
000096  2e11              CMP      r6,#0x11
000098  d203              BCS      |L1.162|
00009a  2006              MOVS     r0,#6
                  |L1.156|
;;;208    		ndata -= 17;
;;;209    		d = *data++;						/* Get table number and class */
;;;210    		cls = (d >> 4); num = d & 0x0F;		/* class = dc(0)/ac(1), table number = 0/1 */
;;;211    		if (d & 0xEE) return JDR_FMT1;		/* Err: invalid class/number */
;;;212    		pb = alloc_pool(jd, 16);			/* Allocate a memory block for the bit distribution table */
;;;213    		if (!pb) return JDR_MEM1;			/* Err: not enough memory */
;;;214    		jd->huffbits[num][cls] = pb;
;;;215    		for (np = i = 0; i < 16; i++) {		/* Load number of patterns for 1 to 16-bit code */
;;;216    			pb[i] = b = *data++;
;;;217    			np += b;	/* Get sum of code words for each code */
;;;218    		}
;;;219    
;;;220    		ph = alloc_pool(jd, np * sizeof (WORD));/* Allocate a memory block for the code word table */
;;;221    		if (!ph) return JDR_MEM1;			/* Err: not enough memory */
;;;222    		jd->huffcode[num][cls] = ph;
;;;223    		hc = 0;
;;;224    		for (j = i = 0; i < 16; i++) {		/* Re-build huffman code word table */
;;;225    			b = pb[i];
;;;226    			while (b--) ph[j++] = hc++;
;;;227    			hc <<= 1;
;;;228    		}
;;;229    
;;;230    		if (ndata < np) return JDR_FMT1;	/* Err: wrong data size */
;;;231    		ndata -= np;
;;;232    		pd = alloc_pool(jd, np);			/* Allocate a memory block for the decoded data */
;;;233    		if (!pd) return JDR_MEM1;			/* Err: not enough memory */
;;;234    		jd->huffdata[num][cls] = pd;
;;;235    		for (i = 0; i < np; i++) {			/* Load decoded data corresponds to each code ward */
;;;236    			d = *data++;
;;;237    			if (!cls && d > 11) return JDR_FMT1;
;;;238    			*pd++ = d;
;;;239    		}
;;;240    	}
;;;241    
;;;242    	return JDR_OK;
;;;243    }
00009c  b009              ADD      sp,sp,#0x24
00009e  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.162|
0000a2  3e11              SUBS     r6,r6,#0x11           ;208
0000a4  f815ab01          LDRB     r10,[r5],#1           ;209
0000a8  ea4f192a          ASR      r9,r10,#4             ;210
0000ac  f00a000f          AND      r0,r10,#0xf           ;210
0000b0  9003              STR      r0,[sp,#0xc]          ;210
0000b2  f00a00ee          AND      r0,r10,#0xee          ;211
0000b6  b108              CBZ      r0,|L1.188|
0000b8  2006              MOVS     r0,#6                 ;211
0000ba  e7ef              B        |L1.156|
                  |L1.188|
0000bc  2110              MOVS     r1,#0x10              ;212
0000be  9806              LDR      r0,[sp,#0x18]         ;212
0000c0  f7fffffe          BL       alloc_pool
0000c4  4680              MOV      r8,r0                 ;212
0000c6  f1b80f00          CMP      r8,#0                 ;213
0000ca  d101              BNE      |L1.208|
0000cc  2003              MOVS     r0,#3                 ;213
0000ce  e7e5              B        |L1.156|
                  |L1.208|
0000d0  9806              LDR      r0,[sp,#0x18]         ;214
0000d2  3024              ADDS     r0,r0,#0x24           ;214
0000d4  9903              LDR      r1,[sp,#0xc]          ;214
0000d6  eb0000c1          ADD      r0,r0,r1,LSL #3       ;214
0000da  f8408029          STR      r8,[r0,r9,LSL #2]     ;214
0000de  2000              MOVS     r0,#0                 ;215
0000e0  4604              MOV      r4,r0                 ;215
0000e2  4607              MOV      r7,r0                 ;215
0000e4  e007              B        |L1.246|
                  |L1.230|
0000e6  f8150b01          LDRB     r0,[r5],#1            ;216
0000ea  9004              STR      r0,[sp,#0x10]         ;216
0000ec  f8080004          STRB     r0,[r8,r4]            ;216
0000f0  9804              LDR      r0,[sp,#0x10]         ;217
0000f2  4407              ADD      r7,r7,r0              ;217
0000f4  1c64              ADDS     r4,r4,#1              ;215
                  |L1.246|
0000f6  2c10              CMP      r4,#0x10              ;215
0000f8  d3f5              BCC      |L1.230|
0000fa  0079              LSLS     r1,r7,#1              ;220
0000fc  9806              LDR      r0,[sp,#0x18]         ;220
0000fe  f7fffffe          BL       alloc_pool
000102  4683              MOV      r11,r0                ;220
000104  f1bb0f00          CMP      r11,#0                ;221
000108  d101              BNE      |L1.270|
00010a  2003              MOVS     r0,#3                 ;221
00010c  e7c6              B        |L1.156|
                  |L1.270|
00010e  9806              LDR      r0,[sp,#0x18]         ;222
000110  3034              ADDS     r0,r0,#0x34           ;222
000112  9903              LDR      r1,[sp,#0xc]          ;222
000114  eb0000c1          ADD      r0,r0,r1,LSL #3       ;222
000118  f840b029          STR      r11,[r0,r9,LSL #2]    ;222
00011c  2000              MOVS     r0,#0                 ;223
00011e  9001              STR      r0,[sp,#4]            ;223
000120  4604              MOV      r4,r0                 ;224
000122  9005              STR      r0,[sp,#0x14]         ;224
000124  e019              B        |L1.346|
                  |L1.294|
000126  f8180004          LDRB     r0,[r8,r4]            ;225
00012a  9004              STR      r0,[sp,#0x10]         ;225
00012c  e009              B        |L1.322|
                  |L1.302|
00012e  9805              LDR      r0,[sp,#0x14]         ;226
000130  1c42              ADDS     r2,r0,#1              ;226
000132  9901              LDR      r1,[sp,#4]            ;226
000134  9205              STR      r2,[sp,#0x14]         ;226
000136  f82b1010          STRH     r1,[r11,r0,LSL #1]    ;226
00013a  9801              LDR      r0,[sp,#4]            ;226
00013c  1c40              ADDS     r0,r0,#1              ;226
00013e  b280              UXTH     r0,r0                 ;226
000140  9001              STR      r0,[sp,#4]            ;226
                  |L1.322|
000142  9804              LDR      r0,[sp,#0x10]         ;226
000144  1e41              SUBS     r1,r0,#1              ;226
000146  9104              STR      r1,[sp,#0x10]         ;226
000148  2800              CMP      r0,#0                 ;226
00014a  d1f0              BNE      |L1.302|
00014c  f64f71ff          MOV      r1,#0xffff            ;227
000150  9801              LDR      r0,[sp,#4]            ;227
000152  ea010040          AND      r0,r1,r0,LSL #1       ;227
000156  9001              STR      r0,[sp,#4]            ;227
000158  1c64              ADDS     r4,r4,#1              ;224
                  |L1.346|
00015a  2c10              CMP      r4,#0x10              ;224
00015c  d3e3              BCC      |L1.294|
00015e  42be              CMP      r6,r7                 ;230
000160  d201              BCS      |L1.358|
000162  2006              MOVS     r0,#6                 ;230
000164  e79a              B        |L1.156|
                  |L1.358|
000166  1bf6              SUBS     r6,r6,r7              ;231
000168  4639              MOV      r1,r7                 ;232
00016a  9806              LDR      r0,[sp,#0x18]         ;232
00016c  f7fffffe          BL       alloc_pool
000170  9002              STR      r0,[sp,#8]            ;232
000172  9802              LDR      r0,[sp,#8]            ;233
000174  b908              CBNZ     r0,|L1.378|
000176  2003              MOVS     r0,#3                 ;233
000178  e790              B        |L1.156|
                  |L1.378|
00017a  9806              LDR      r0,[sp,#0x18]         ;234
00017c  3044              ADDS     r0,r0,#0x44           ;234
00017e  e9dd1202          LDRD     r1,r2,[sp,#8]         ;234
000182  eb0000c2          ADD      r0,r0,r2,LSL #3       ;234
000186  f8401029          STR      r1,[r0,r9,LSL #2]     ;234
00018a  2400              MOVS     r4,#0                 ;235
00018c  e010              B        |L1.432|
                  |L1.398|
00018e  f815ab01          LDRB     r10,[r5],#1           ;236
000192  f1b90f00          CMP      r9,#0                 ;237
000196  d104              BNE      |L1.418|
000198  f1ba0f0b          CMP      r10,#0xb              ;237
00019c  dd01              BLE      |L1.418|
00019e  2006              MOVS     r0,#6                 ;237
0001a0  e77c              B        |L1.156|
                  |L1.418|
0001a2  9802              LDR      r0,[sp,#8]            ;238
0001a4  f880a000          STRB     r10,[r0,#0]           ;238
0001a8  9802              LDR      r0,[sp,#8]            ;238
0001aa  1c40              ADDS     r0,r0,#1              ;238
0001ac  9002              STR      r0,[sp,#8]            ;238
0001ae  1c64              ADDS     r4,r4,#1              ;235
                  |L1.432|
0001b0  42bc              CMP      r4,r7                 ;235
0001b2  d3ec              BCC      |L1.398|
                  |L1.436|
0001b4  2e00              CMP      r6,#0                 ;206
0001b6  f47faf6e          BNE      |L1.150|
0001ba  2000              MOVS     r0,#0                 ;242
0001bc  e76e              B        |L1.156|
;;;244    
                          ENDP

                  bitext PROC
;;;252    static
;;;253    INT bitext (	/* >=0: extracted data, <0: error code */
0001be  e92d5ff0          PUSH     {r4-r12,lr}
;;;254    	JDEC* jd,	/* Pointer to the decompressor object */
;;;255    	UINT nbit	/* Number of bits to extract (1 to 11) */
;;;256    )
;;;257    {
0001c2  4604              MOV      r4,r0
0001c4  4688              MOV      r8,r1
;;;258    	BYTE msk, s, *dp;
;;;259    	UINT dc, v, f;
;;;260    
;;;261    
;;;262    	msk = jd->dmsk; dc = jd->dctr; dp = jd->dptr;	/* Bit mask, number of data available, read ptr */
0001c6  7b26              LDRB     r6,[r4,#0xc]
0001c8  6827              LDR      r7,[r4,#0]
0001ca  6865              LDR      r5,[r4,#4]
;;;263    	s = *dp; v = f = 0;
0001cc  f895a000          LDRB     r10,[r5,#0]
0001d0  2000              MOVS     r0,#0
0001d2  4683              MOV      r11,r0
0001d4  4681              MOV      r9,r0
;;;264    	do {
0001d6  bf00              NOP      
                  |L1.472|
;;;265    		if (!msk) {				/* Next byte? */
0001d8  bb36              CBNZ     r6,|L1.552|
;;;266    			if (!dc) {			/* No input data is available, re-fill input buffer */
0001da  b967              CBNZ     r7,|L1.502|
;;;267    				dp = jd->inbuf;	/* Top of input buffer */
0001dc  68a5              LDR      r5,[r4,#8]
;;;268    				dc = jd->infunc(jd, dp, JD_SZBUF);
0001de  f44f7200          MOV      r2,#0x200
0001e2  4629              MOV      r1,r5
0001e4  4620              MOV      r0,r4
0001e6  6f63              LDR      r3,[r4,#0x74]
0001e8  4798              BLX      r3
0001ea  4607              MOV      r7,r0
;;;269    				if (!dc) return 0 - (INT)JDR_INP;	/* Err: read error or wrong stream termination */
0001ec  b927              CBNZ     r7,|L1.504|
0001ee  f06f0001          MVN      r0,#1
                  |L1.498|
;;;270    			} else {
;;;271    				dp++;			/* Next data ptr */
;;;272    			}
;;;273    			dc--;				/* Decrement number of available bytes */
;;;274    			if (f) {			/* In flag sequence? */
;;;275    				f = 0;			/* Exit flag sequence */
;;;276    				if (*dp != 0) return 0 - (INT)JDR_FMT1;	/* Err: unexpected flag is detected (may be collapted data) */
;;;277    				*dp = s = 0xFF;			/* The flag is a data 0xFF */
;;;278    			} else {
;;;279    				s = *dp;				/* Get next data byte */
;;;280    				if (s == 0xFF) {		/* Is start of flag sequence? */
;;;281    					f = 1; continue;	/* Enter flag sequence */
;;;282    				}
;;;283    			}
;;;284    			msk = 0x80;		/* Read from MSB */
;;;285    		}
;;;286    		v <<= 1;	/* Get a bit */
;;;287    		if (s & msk) v++;
;;;288    		msk >>= 1;
;;;289    		nbit--;
;;;290    	} while (nbit);
;;;291    	jd->dmsk = msk; jd->dctr = dc; jd->dptr = dp;
;;;292    
;;;293    	return (INT)v;
;;;294    }
0001f2  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.502|
0001f6  1c6d              ADDS     r5,r5,#1              ;271
                  |L1.504|
0001f8  1e7f              SUBS     r7,r7,#1              ;273
0001fa  f1bb0f00          CMP      r11,#0                ;274
0001fe  d00a              BEQ      |L1.534|
000200  f04f0b00          MOV      r11,#0                ;275
000204  7828              LDRB     r0,[r5,#0]            ;276
000206  b110              CBZ      r0,|L1.526|
000208  f06f0005          MVN      r0,#5                 ;276
00020c  e7f1              B        |L1.498|
                  |L1.526|
00020e  20ff              MOVS     r0,#0xff              ;277
000210  4682              MOV      r10,r0                ;277
000212  7028              STRB     r0,[r5,#0]            ;277
000214  e007              B        |L1.550|
                  |L1.534|
000216  f895a000          LDRB     r10,[r5,#0]           ;279
00021a  f1ba0fff          CMP      r10,#0xff             ;280
00021e  d102              BNE      |L1.550|
000220  f04f0b01          MOV      r11,#1                ;281
000224  e00b              B        |L1.574|
                  |L1.550|
000226  2680              MOVS     r6,#0x80              ;284
                  |L1.552|
000228  ea4f0949          LSL      r9,r9,#1              ;286
00022c  ea0a0006          AND      r0,r10,r6             ;287
000230  b108              CBZ      r0,|L1.566|
000232  f1090901          ADD      r9,r9,#1              ;287
                  |L1.566|
000236  1076              ASRS     r6,r6,#1              ;288
000238  f1a80801          SUB      r8,r8,#1              ;289
00023c  bf00              NOP                            ;281
                  |L1.574|
00023e  f1b80f00          CMP      r8,#0                 ;290
000242  d1c9              BNE      |L1.472|
000244  7326              STRB     r6,[r4,#0xc]          ;291
000246  6027              STR      r7,[r4,#0]            ;291
000248  6065              STR      r5,[r4,#4]            ;291
00024a  4648              MOV      r0,r9                 ;293
00024c  e7d1              B        |L1.498|
;;;295    
                          ENDP

                  huffext PROC
;;;303    static
;;;304    INT huffext (			/* >=0: decoded data, <0: error code */
00024e  e92d5fff          PUSH     {r0-r12,lr}
;;;305    	JDEC* jd,			/* Pointer to the decompressor object */
;;;306    	const BYTE* hbits,	/* Pointer to the bit distribution table */
;;;307    	const WORD* hcode,	/* Pointer to the code word table */
;;;308    	const BYTE* hdata	/* Pointer to the data table */
;;;309    )
;;;310    {
000252  4604              MOV      r4,r0
000254  4688              MOV      r8,r1
000256  4691              MOV      r9,r2
000258  469a              MOV      r10,r3
;;;311    	BYTE msk, s, *dp;
;;;312    	UINT dc, v, f, bl, nd;
;;;313    
;;;314    
;;;315    	msk = jd->dmsk; dc = jd->dctr; dp = jd->dptr;	/* Bit mask, number of data available, read ptr */
00025a  7b26              LDRB     r6,[r4,#0xc]
00025c  6827              LDR      r7,[r4,#0]
00025e  6865              LDR      r5,[r4,#4]
;;;316    	s = *dp; v = f = 0;
000260  7828              LDRB     r0,[r5,#0]
000262  9003              STR      r0,[sp,#0xc]
000264  2000              MOVS     r0,#0
000266  4683              MOV      r11,r0
000268  9002              STR      r0,[sp,#8]
;;;317    	bl = 16;	/* Max code length */
00026a  2010              MOVS     r0,#0x10
00026c  9001              STR      r0,[sp,#4]
;;;318    	do {
00026e  bf00              NOP      
                  |L1.624|
;;;319    		if (!msk) {		/* Next byte? */
000270  bb36              CBNZ     r6,|L1.704|
;;;320    			if (!dc) {	/* No input data is available, re-fill input buffer */
000272  b96f              CBNZ     r7,|L1.656|
;;;321    				dp = jd->inbuf;	/* Top of input buffer */
000274  68a5              LDR      r5,[r4,#8]
;;;322    				dc = jd->infunc(jd, dp, JD_SZBUF);
000276  f44f7200          MOV      r2,#0x200
00027a  4629              MOV      r1,r5
00027c  4620              MOV      r0,r4
00027e  6f63              LDR      r3,[r4,#0x74]
000280  4798              BLX      r3
000282  4607              MOV      r7,r0
;;;323    				if (!dc) return 0 - (INT)JDR_INP;	/* Err: read error or wrong stream termination */
000284  b92f              CBNZ     r7,|L1.658|
000286  f06f0001          MVN      r0,#1
                  |L1.650|
;;;324    			} else {
;;;325    				dp++;	/* Next data ptr */
;;;326    			}
;;;327    			dc--;		/* Decrement number of available bytes */
;;;328    			if (f) {		/* In flag sequence? */
;;;329    				f = 0;		/* Exit flag sequence */
;;;330    				if (*dp != 0)
;;;331    					return 0 - (INT)JDR_FMT1;	/* Err: unexpected flag is detected (may be collapted data) */
;;;332    				*dp = s = 0xFF;			/* The flag is a data 0xFF */
;;;333    			} else {
;;;334    				s = *dp;				/* Get next data byte */
;;;335    				if (s == 0xFF) {		/* Is start of flag sequence? */
;;;336    					f = 1; continue;	/* Enter flag sequence, get trailing byte */
;;;337    				}
;;;338    			}
;;;339    			msk = 0x80;		/* Read from MSB */
;;;340    		}
;;;341    		v <<= 1;	/* Get a bit */
;;;342    		if (s & msk) v++;
;;;343    		msk >>= 1;
;;;344    
;;;345    		for (nd = *hbits++; nd; nd--) {	/* Search the code word in this bit length */
;;;346    			if (v == *hcode++) {		/* Matched? */
;;;347    				jd->dmsk = msk; jd->dctr = dc; jd->dptr = dp;
;;;348    				return *hdata;			/* Return the decoded data */
;;;349    			}
;;;350    			hdata++;
;;;351    		}
;;;352    		bl--;
;;;353    	} while (bl);
;;;354    
;;;355    	return 0 - (INT)JDR_FMT1;	/* Err: code not found (may be collapted data) */
;;;356    }
00028a  b004              ADD      sp,sp,#0x10
00028c  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.656|
000290  1c6d              ADDS     r5,r5,#1              ;325
                  |L1.658|
000292  1e7f              SUBS     r7,r7,#1              ;327
000294  9802              LDR      r0,[sp,#8]            ;328
000296  b150              CBZ      r0,|L1.686|
000298  2000              MOVS     r0,#0                 ;329
00029a  9002              STR      r0,[sp,#8]            ;329
00029c  7828              LDRB     r0,[r5,#0]            ;330
00029e  b110              CBZ      r0,|L1.678|
0002a0  f06f0005          MVN      r0,#5                 ;331
0002a4  e7f1              B        |L1.650|
                  |L1.678|
0002a6  20ff              MOVS     r0,#0xff              ;332
0002a8  9003              STR      r0,[sp,#0xc]          ;332
0002aa  7028              STRB     r0,[r5,#0]            ;332
0002ac  e007              B        |L1.702|
                  |L1.686|
0002ae  7828              LDRB     r0,[r5,#0]            ;334
0002b0  9003              STR      r0,[sp,#0xc]          ;334
0002b2  9803              LDR      r0,[sp,#0xc]          ;335
0002b4  28ff              CMP      r0,#0xff              ;335
0002b6  d102              BNE      |L1.702|
0002b8  2001              MOVS     r0,#1                 ;336
0002ba  9002              STR      r0,[sp,#8]            ;336
0002bc  e022              B        |L1.772|
                  |L1.702|
0002be  2680              MOVS     r6,#0x80              ;339
                  |L1.704|
0002c0  ea4f0b4b          LSL      r11,r11,#1            ;341
0002c4  9803              LDR      r0,[sp,#0xc]          ;342
0002c6  4030              ANDS     r0,r0,r6              ;342
0002c8  b108              CBZ      r0,|L1.718|
0002ca  f10b0b01          ADD      r11,r11,#1            ;342
                  |L1.718|
0002ce  1076              ASRS     r6,r6,#1              ;343
0002d0  f8180b01          LDRB     r0,[r8],#1            ;345
0002d4  9000              STR      r0,[sp,#0]            ;345
0002d6  e00e              B        |L1.758|
                  |L1.728|
0002d8  f8391b02          LDRH     r1,[r9],#2            ;346
0002dc  4559              CMP      r1,r11                ;346
0002de  d105              BNE      |L1.748|
0002e0  7326              STRB     r6,[r4,#0xc]          ;347
0002e2  6027              STR      r7,[r4,#0]            ;347
0002e4  6065              STR      r5,[r4,#4]            ;347
0002e6  f89a0000          LDRB     r0,[r10,#0]           ;348
0002ea  e7ce              B        |L1.650|
                  |L1.748|
0002ec  f10a0a01          ADD      r10,r10,#1            ;350
0002f0  9800              LDR      r0,[sp,#0]            ;345
0002f2  1e40              SUBS     r0,r0,#1              ;345
0002f4  9000              STR      r0,[sp,#0]            ;345
                  |L1.758|
0002f6  9800              LDR      r0,[sp,#0]            ;345
0002f8  2800              CMP      r0,#0                 ;345
0002fa  d1ed              BNE      |L1.728|
0002fc  9801              LDR      r0,[sp,#4]            ;352
0002fe  1e40              SUBS     r0,r0,#1              ;352
000300  9001              STR      r0,[sp,#4]            ;352
000302  bf00              NOP                            ;336
                  |L1.772|
000304  9801              LDR      r0,[sp,#4]            ;353
000306  2800              CMP      r0,#0                 ;353
000308  d1b2              BNE      |L1.624|
00030a  1f80              SUBS     r0,r0,#6              ;355
00030c  e7bd              B        |L1.650|
;;;357    
                          ENDP

                  block_idct PROC
;;;365    static
;;;366    void block_idct (
00030e  e92d4ff0          PUSH     {r4-r11,lr}
;;;367    	LONG* src,	/* Input block data (de-quantized and pre-scaled for Arai Algorithm) */
;;;368    	BYTE* dst	/* Pointer to the destination to store the block as byte array */
;;;369    )
;;;370    {
000312  b087              SUB      sp,sp,#0x1c
000314  460c              MOV      r4,r1
;;;371    	const LONG M13 = (LONG)(1.41421*4096), M2 = (LONG)(1.08239*4096), M4 = (LONG)(2.61313*4096), M5 = (LONG)(1.84776*4096);
000316  f44f5bb5          MOV      r11,#0x16a0
00031a  f8cdb018          STR      r11,[sp,#0x18]
00031e  f2411b51          MOV      r11,#0x1151
000322  f8cdb014          STR      r11,[sp,#0x14]
000326  f6421bcf          MOV      r11,#0x29cf
00032a  f8cdb010          STR      r11,[sp,#0x10]
00032e  f6415b90          MOV      r11,#0x1d90
000332  f8cdb00c          STR      r11,[sp,#0xc]
;;;372    	LONG v0, v1, v2, v3, v4, v5, v6, v7;
;;;373    	LONG t10, t11, t12, t13;
;;;374    	UINT i;
;;;375    
;;;376    	/* Process columns */
;;;377    	for (i = 0; i < 8; i++) {
000336  f04f0b00          MOV      r11,#0
00033a  f8cdb000          STR      r11,[sp,#0]
00033e  e080              B        |L1.1090|
                  |L1.832|
;;;378    		v0 = src[8 * 0];	/* Get even elements */
000340  f8d0c000          LDR      r12,[r0,#0]
;;;379    		v1 = src[8 * 2];
000344  f8d08040          LDR      r8,[r0,#0x40]
;;;380    		v2 = src[8 * 4];
000348  f8d09080          LDR      r9,[r0,#0x80]
;;;381    		v3 = src[8 * 6];
00034c  f8d010c0          LDR      r1,[r0,#0xc0]
;;;382    
;;;383    		t10 = v0 + v2;		/* Process the even elements */
000350  eb0c0a09          ADD      r10,r12,r9
;;;384    		t12 = v0 - v2;
000354  ebac0b09          SUB      r11,r12,r9
000358  f8cdb008          STR      r11,[sp,#8]
;;;385    		t11 = (v1 - v3) * M13 >> 12;
00035c  eba80b01          SUB      r11,r8,r1
000360  f44f5eb5          MOV      lr,#0x16a0
000364  fb0bfb0e          MUL      r11,r11,lr
000368  ea4f372b          ASR      r7,r11,#12
;;;386    		v3 += v1;
00036c  4441              ADD      r1,r1,r8
;;;387    		t11 -= v3;
00036e  1a7f              SUBS     r7,r7,r1
;;;388    		v0 = t10 + v3;
000370  eb0a0c01          ADD      r12,r10,r1
;;;389    		v3 = t10 - v3;
000374  ebaa0101          SUB      r1,r10,r1
;;;390    		v1 = t11 + t12;
000378  f8ddb008          LDR      r11,[sp,#8]
00037c  eb07080b          ADD      r8,r7,r11
;;;391    		v2 = t12 - t11;
000380  f8ddb008          LDR      r11,[sp,#8]
000384  ebab0907          SUB      r9,r11,r7
;;;392    
;;;393    		v4 = src[8 * 7];	/* Get odd elements */
000388  f8d050e0          LDR      r5,[r0,#0xe0]
;;;394    		v5 = src[8 * 1];
00038c  6a03              LDR      r3,[r0,#0x20]
;;;395    		v6 = src[8 * 5];
00038e  f8d060a0          LDR      r6,[r0,#0xa0]
;;;396    		v7 = src[8 * 3];
000392  6e02              LDR      r2,[r0,#0x60]
;;;397    
;;;398    		t10 = v5 - v4;		/* Process the odd elements */
000394  eba30a05          SUB      r10,r3,r5
;;;399    		t11 = v5 + v4;
000398  195f              ADDS     r7,r3,r5
;;;400    		t12 = v6 - v7;
00039a  eba60b02          SUB      r11,r6,r2
00039e  f8cdb008          STR      r11,[sp,#8]
;;;401    		v7 += v6;
0003a2  4432              ADD      r2,r2,r6
;;;402    		v5 = (t11 - v7) * M13 >> 12;
0003a4  eba70b02          SUB      r11,r7,r2
0003a8  fb0bfb0e          MUL      r11,r11,lr
0003ac  ea4f332b          ASR      r3,r11,#12
;;;403    		v7 += t11;
0003b0  443a              ADD      r2,r2,r7
;;;404    		t13 = (t10 + t12) * M5 >> 12;
0003b2  f8ddb008          LDR      r11,[sp,#8]
0003b6  44d3              ADD      r11,r11,r10
0003b8  f6415e90          MOV      lr,#0x1d90
0003bc  fb0bfb0e          MUL      r11,r11,lr
0003c0  ea4f3b2b          ASR      r11,r11,#12
0003c4  f8cdb004          STR      r11,[sp,#4]
;;;405    		v4 = t13 - (t10 * M2 >> 12);
0003c8  f2411b51          MOV      r11,#0x1151
0003cc  fb0afe0b          MUL      lr,r10,r11
0003d0  f8ddb004          LDR      r11,[sp,#4]
0003d4  ebab352e          SUB      r5,r11,lr,ASR #12
;;;406    		v6 = t13 - (t12 * M4 >> 12) - v7;
0003d8  f6421ecf          MOV      lr,#0x29cf
0003dc  f8ddb008          LDR      r11,[sp,#8]
0003e0  fb0bfe0e          MUL      lr,r11,lr
0003e4  f8ddb004          LDR      r11,[sp,#4]
0003e8  ebab3b2e          SUB      r11,r11,lr,ASR #12
0003ec  ebab0602          SUB      r6,r11,r2
;;;407    		v5 -= v6;
0003f0  1b9b              SUBS     r3,r3,r6
;;;408    		v4 -= v5;
0003f2  1aed              SUBS     r5,r5,r3
;;;409    
;;;410    		src[8 * 0] = v0 + v7;	/* Write-back transformed values */
0003f4  eb0c0b02          ADD      r11,r12,r2
0003f8  f8c0b000          STR      r11,[r0,#0]
;;;411    		src[8 * 7] = v0 - v7;
0003fc  ebac0b02          SUB      r11,r12,r2
000400  f8c0b0e0          STR      r11,[r0,#0xe0]
;;;412    		src[8 * 1] = v1 + v6;
000404  eb080b06          ADD      r11,r8,r6
000408  f8c0b020          STR      r11,[r0,#0x20]
;;;413    		src[8 * 6] = v1 - v6;
00040c  eba80b06          SUB      r11,r8,r6
000410  f8c0b0c0          STR      r11,[r0,#0xc0]
;;;414    		src[8 * 2] = v2 + v5;
000414  eb090b03          ADD      r11,r9,r3
000418  f8c0b040          STR      r11,[r0,#0x40]
;;;415    		src[8 * 5] = v2 - v5;
00041c  eba90b03          SUB      r11,r9,r3
000420  f8c0b0a0          STR      r11,[r0,#0xa0]
;;;416    		src[8 * 3] = v3 + v4;
000424  eb010b05          ADD      r11,r1,r5
000428  f8c0b060          STR      r11,[r0,#0x60]
;;;417    		src[8 * 4] = v3 - v4;
00042c  eba10b05          SUB      r11,r1,r5
000430  f8c0b080          STR      r11,[r0,#0x80]
;;;418    
;;;419    		src++;	/* Next column */
000434  1d00              ADDS     r0,r0,#4
000436  f8ddb000          LDR      r11,[sp,#0]           ;377
00043a  f10b0b01          ADD      r11,r11,#1            ;377
00043e  f8cdb000          STR      r11,[sp,#0]           ;377
                  |L1.1090|
000442  f8ddb000          LDR      r11,[sp,#0]           ;377
000446  f1bb0f08          CMP      r11,#8                ;377
00044a  f4ffaf79          BCC      |L1.832|
;;;420    	}
;;;421    
;;;422    	/* Process rows */
;;;423    	src -= 8;
00044e  3820              SUBS     r0,r0,#0x20
;;;424    	for (i = 0; i < 8; i++) {
000450  f04f0b00          MOV      r11,#0
000454  f8cdb000          STR      r11,[sp,#0]
000458  e0a7              B        |L1.1450|
00045a  0000              DCW      0x0000
                  |L1.1116|
                          DCD      Zig
                  |L1.1120|
                          DCD      Ipsf
                  |L1.1124|
;;;425    		v0 = src[0] + (128L << 8);	/* Get even elements (remove DC offset (-128) here) */
000464  f8d0b000          LDR      r11,[r0,#0]
000468  f50b4c00          ADD      r12,r11,#0x8000
;;;426    		v1 = src[2];
00046c  f8d08008          LDR      r8,[r0,#8]
;;;427    		v2 = src[4];
000470  f8d09010          LDR      r9,[r0,#0x10]
;;;428    		v3 = src[6];
000474  6981              LDR      r1,[r0,#0x18]
;;;429    
;;;430    		t10 = v0 + v2;				/* Process the even elements */
000476  eb0c0a09          ADD      r10,r12,r9
;;;431    		t12 = v0 - v2;
00047a  ebac0b09          SUB      r11,r12,r9
00047e  f8cdb008          STR      r11,[sp,#8]
;;;432    		t11 = (v1 - v3) * M13 >> 12;
000482  eba80b01          SUB      r11,r8,r1
000486  f44f5eb5          MOV      lr,#0x16a0
00048a  fb0bfb0e          MUL      r11,r11,lr
00048e  ea4f372b          ASR      r7,r11,#12
;;;433    		v3 += v1;
000492  4441              ADD      r1,r1,r8
;;;434    		t11 -= v3;
000494  1a7f              SUBS     r7,r7,r1
;;;435    		v0 = t10 + v3;
000496  eb0a0c01          ADD      r12,r10,r1
;;;436    		v3 = t10 - v3;
00049a  ebaa0101          SUB      r1,r10,r1
;;;437    		v1 = t11 + t12;
00049e  f8ddb008          LDR      r11,[sp,#8]
0004a2  eb07080b          ADD      r8,r7,r11
;;;438    		v2 = t12 - t11;
0004a6  f8ddb008          LDR      r11,[sp,#8]
0004aa  ebab0907          SUB      r9,r11,r7
;;;439    
;;;440    		v4 = src[7];				/* Get odd elements */
0004ae  69c5              LDR      r5,[r0,#0x1c]
;;;441    		v5 = src[1];
0004b0  6843              LDR      r3,[r0,#4]
;;;442    		v6 = src[5];
0004b2  6946              LDR      r6,[r0,#0x14]
;;;443    		v7 = src[3];
0004b4  68c2              LDR      r2,[r0,#0xc]
;;;444    
;;;445    		t10 = v5 - v4;				/* Process the odd elements */
0004b6  eba30a05          SUB      r10,r3,r5
;;;446    		t11 = v5 + v4;
0004ba  195f              ADDS     r7,r3,r5
;;;447    		t12 = v6 - v7;
0004bc  eba60b02          SUB      r11,r6,r2
0004c0  f8cdb008          STR      r11,[sp,#8]
;;;448    		v7 += v6;
0004c4  4432              ADD      r2,r2,r6
;;;449    		v5 = (t11 - v7) * M13 >> 12;
0004c6  eba70b02          SUB      r11,r7,r2
0004ca  fb0bfb0e          MUL      r11,r11,lr
0004ce  ea4f332b          ASR      r3,r11,#12
;;;450    		v7 += t11;
0004d2  443a              ADD      r2,r2,r7
;;;451    		t13 = (t10 + t12) * M5 >> 12;
0004d4  f8ddb008          LDR      r11,[sp,#8]
0004d8  44d3              ADD      r11,r11,r10
0004da  f6415e90          MOV      lr,#0x1d90
0004de  fb0bfb0e          MUL      r11,r11,lr
0004e2  ea4f3b2b          ASR      r11,r11,#12
0004e6  f8cdb004          STR      r11,[sp,#4]
;;;452    		v4 = t13 - (t10 * M2 >> 12);
0004ea  f2411b51          MOV      r11,#0x1151
0004ee  fb0afe0b          MUL      lr,r10,r11
0004f2  f8ddb004          LDR      r11,[sp,#4]
0004f6  ebab352e          SUB      r5,r11,lr,ASR #12
;;;453    		v6 = t13 - (t12 * M4 >> 12) - v7;
0004fa  f6421ecf          MOV      lr,#0x29cf
0004fe  f8ddb008          LDR      r11,[sp,#8]
000502  fb0bfe0e          MUL      lr,r11,lr
000506  f8ddb004          LDR      r11,[sp,#4]
00050a  ebab3b2e          SUB      r11,r11,lr,ASR #12
00050e  ebab0602          SUB      r6,r11,r2
;;;454    		v5 -= v6;
000512  1b9b              SUBS     r3,r3,r6
;;;455    		v4 -= v5;
000514  1aed              SUBS     r5,r5,r3
;;;456    
;;;457    		dst[0] = BYTECLIP((v0 + v7) >> 8);	/* Descale the transformed values 8 bits and output */
000516  eb0c0b02          ADD      r11,r12,r2
00051a  f3cb2b09          UBFX     r11,r11,#8,#10
00051e  f8dfe608          LDR      lr,|L1.2856|
000522  f81eb00b          LDRB     r11,[lr,r11]
000526  f884b000          STRB     r11,[r4,#0]
;;;458    		dst[7] = BYTECLIP((v0 - v7) >> 8);
00052a  ebac0b02          SUB      r11,r12,r2
00052e  f3cb2b09          UBFX     r11,r11,#8,#10
000532  f81eb00b          LDRB     r11,[lr,r11]
000536  f884b007          STRB     r11,[r4,#7]
;;;459    		dst[1] = BYTECLIP((v1 + v6) >> 8);
00053a  eb080b06          ADD      r11,r8,r6
00053e  f3cb2b09          UBFX     r11,r11,#8,#10
000542  f81eb00b          LDRB     r11,[lr,r11]
000546  f884b001          STRB     r11,[r4,#1]
;;;460    		dst[6] = BYTECLIP((v1 - v6) >> 8);
00054a  eba80b06          SUB      r11,r8,r6
00054e  f3cb2b09          UBFX     r11,r11,#8,#10
000552  f81eb00b          LDRB     r11,[lr,r11]
000556  f884b006          STRB     r11,[r4,#6]
;;;461    		dst[2] = BYTECLIP((v2 + v5) >> 8);
00055a  eb090b03          ADD      r11,r9,r3
00055e  f3cb2b09          UBFX     r11,r11,#8,#10
000562  f81eb00b          LDRB     r11,[lr,r11]
000566  f884b002          STRB     r11,[r4,#2]
;;;462    		dst[5] = BYTECLIP((v2 - v5) >> 8);
00056a  eba90b03          SUB      r11,r9,r3
00056e  f3cb2b09          UBFX     r11,r11,#8,#10
000572  f81eb00b          LDRB     r11,[lr,r11]
000576  f884b005          STRB     r11,[r4,#5]
;;;463    		dst[3] = BYTECLIP((v3 + v4) >> 8);
00057a  eb010b05          ADD      r11,r1,r5
00057e  f3cb2b09          UBFX     r11,r11,#8,#10
000582  f81eb00b          LDRB     r11,[lr,r11]
000586  f884b003          STRB     r11,[r4,#3]
;;;464    		dst[4] = BYTECLIP((v3 - v4) >> 8);
00058a  eba10b05          SUB      r11,r1,r5
00058e  f3cb2b09          UBFX     r11,r11,#8,#10
000592  f81eb00b          LDRB     r11,[lr,r11]
000596  f884b004          STRB     r11,[r4,#4]
;;;465    		dst += 8;
00059a  3408              ADDS     r4,r4,#8
;;;466    
;;;467    		src += 8;	/* Next row */
00059c  3020              ADDS     r0,r0,#0x20
00059e  f8ddb000          LDR      r11,[sp,#0]           ;424
0005a2  f10b0b01          ADD      r11,r11,#1            ;424
0005a6  f8cdb000          STR      r11,[sp,#0]           ;424
                  |L1.1450|
0005aa  f8ddb000          LDR      r11,[sp,#0]           ;424
0005ae  f1bb0f08          CMP      r11,#8                ;424
0005b2  f4ffaf57          BCC      |L1.1124|
;;;468    	}
;;;469    }
0005b6  b007              ADD      sp,sp,#0x1c
0005b8  e8bd8ff0          POP      {r4-r11,pc}
;;;470    
                          ENDP

                  mcu_load PROC
;;;478    static
;;;479    JRESULT mcu_load (
0005bc  e92d4ff0          PUSH     {r4-r11,lr}
;;;480    	JDEC* jd		/* Pointer to the decompressor object */
;;;481    )
;;;482    {
0005c0  b089              SUB      sp,sp,#0x24
0005c2  4604              MOV      r4,r0
;;;483    	LONG *tmp = (LONG*)jd->workbuf;	/* Block working buffer for de-quantize and IDCT */
0005c4  f8d49064          LDR      r9,[r4,#0x64]
;;;484    	UINT blk, nby, nbc, i, z, id, cmp;
;;;485    	INT b, d, e;
;;;486    	BYTE *bp;
;;;487    	const BYTE *hb, *hd;
;;;488    	const WORD *hc;
;;;489    	const LONG *dqf;
;;;490    
;;;491    
;;;492    	nby = jd->msx * jd->msy;	/* Number of Y blocks (1, 2 or 4) */
0005c8  7ba0              LDRB     r0,[r4,#0xe]
0005ca  7be1              LDRB     r1,[r4,#0xf]
0005cc  4348              MULS     r0,r1,r0
0005ce  9008              STR      r0,[sp,#0x20]
;;;493    	nbc = 2;					/* Number of C blocks (2) */
0005d0  2002              MOVS     r0,#2
0005d2  9007              STR      r0,[sp,#0x1c]
;;;494    	bp = jd->mcubuf;			/* Pointer to the first block */
0005d4  6ea0              LDR      r0,[r4,#0x68]
0005d6  9004              STR      r0,[sp,#0x10]
;;;495    
;;;496    	for (blk = 0; blk < nby + nbc; blk++) {
0005d8  f04f0b00          MOV      r11,#0
0005dc  e0d4              B        |L1.1928|
                  |L1.1502|
;;;497    		cmp = (blk < nby) ? 0 : blk - nby + 1;	/* Component number 0:Y, 1:Cb, 2:Cr */
0005de  9808              LDR      r0,[sp,#0x20]
0005e0  4583              CMP      r11,r0
0005e2  d201              BCS      |L1.1512|
0005e4  2000              MOVS     r0,#0
0005e6  e003              B        |L1.1520|
                  |L1.1512|
0005e8  9808              LDR      r0,[sp,#0x20]
0005ea  ebab0000          SUB      r0,r11,r0
0005ee  1c40              ADDS     r0,r0,#1
                  |L1.1520|
0005f0  9005              STR      r0,[sp,#0x14]
;;;498    		id = cmp ? 1 : 0;						/* Huffman table ID of the component */
0005f2  9805              LDR      r0,[sp,#0x14]
0005f4  b108              CBZ      r0,|L1.1530|
0005f6  2001              MOVS     r0,#1
0005f8  e000              B        |L1.1532|
                  |L1.1530|
0005fa  2000              MOVS     r0,#0
                  |L1.1532|
0005fc  4680              MOV      r8,r0
;;;499    
;;;500    		/* Extract a DC element from input stream */
;;;501    		hb = jd->huffbits[id][0];				/* Huffman table for the DC element */
0005fe  f1040024          ADD      r0,r4,#0x24
000602  f8500038          LDR      r0,[r0,r8,LSL #3]
000606  9003              STR      r0,[sp,#0xc]
;;;502    		hc = jd->huffcode[id][0];
000608  f1040034          ADD      r0,r4,#0x34
00060c  f8500038          LDR      r0,[r0,r8,LSL #3]
000610  9001              STR      r0,[sp,#4]
;;;503    		hd = jd->huffdata[id][0];
000612  f1040044          ADD      r0,r4,#0x44
000616  f8500038          LDR      r0,[r0,r8,LSL #3]
00061a  9002              STR      r0,[sp,#8]
;;;504    		b = huffext(jd, hb, hc, hd);			/* Extract a huffman coded data (bit length) */
00061c  4620              MOV      r0,r4
00061e  e9dd2301          LDRD     r2,r3,[sp,#4]
000622  9903              LDR      r1,[sp,#0xc]
000624  f7fffffe          BL       huffext
000628  4605              MOV      r5,r0
;;;505    		if (b < 0) return 0 - b;				/* Err: invalid code or input */
00062a  2d00              CMP      r5,#0
00062c  da04              BGE      |L1.1592|
00062e  4268              RSBS     r0,r5,#0
000630  b2c0              UXTB     r0,r0
                  |L1.1586|
;;;506    		d = jd->dcv[cmp];						/* DC value of previous block */
;;;507    		if (b) {								/* If there is any difference from previous block */
;;;508    			e = bitext(jd, b);					/* Extract data bits */
;;;509    			if (e < 0) return 0 - e;			/* Err: input */
;;;510    			b = 1 << (b - 1);					/* MSB position */
;;;511    			if (!(e & b)) e -= (b << 1) - 1;	/* Restore sign if needed */
;;;512    			d += e;								/* Get current value */
;;;513    			jd->dcv[cmp] = (SHORT)d;			/* Save current DC value for next block */
;;;514    		}
;;;515    		dqf = jd->qttbl[jd->qtid[cmp]];			/* De-quantizer table ID for this component */
;;;516    		tmp[0] = d * dqf[0] >> 8;				/* De-quantize, apply scale factor of Arai algorithm and descale 8 bits */
;;;517    
;;;518    		/* Extract following 63 AC elements from input stream */
;;;519    		for (i = 1; i < 64; i++) tmp[i] = 0;	/* Clear rest of elements */
;;;520    		hb = jd->huffbits[id][1];				/* Huffman table for the AC elements */
;;;521    		hc = jd->huffcode[id][1];
;;;522    		hd = jd->huffdata[id][1];
;;;523    		i = 1;					/* Top of the AC elements */
;;;524    		do {
;;;525    			b = huffext(jd, hb, hc, hd);		/* Extract a huffman coded value (zero runs and bit length) */
;;;526    			if (b == 0) break;					/* EOB? */
;;;527    			if (b < 0) return 0 - b;			/* Err: invalid code or input error */
;;;528    			z = (UINT)b >> 4;					/* Number of leading zero elements */
;;;529    			if (z) {
;;;530    				i += z;							/* Skip zero elements */
;;;531    				if (i >= 64) return JDR_FMT1;	/* Too long zero run */
;;;532    			}
;;;533    			if (b &= 0x0F) {					/* Bit length */
;;;534    				d = bitext(jd, b);				/* Extract data bits */
;;;535    				if (d < 0) return 0 - d;		/* Err: input device */
;;;536    				b = 1 << (b - 1);				/* MSB position */
;;;537    				if (!(d & b)) d -= (b << 1) - 1;/* Restore negative value if needed */
;;;538    				z = ZIG(i);						/* Zigzag-order to raster-order converted index */
;;;539    				tmp[z] = d * dqf[z] >> 8;		/* De-quantize, apply scale factor of Arai algorithm and descale 8 bits */
;;;540    			}
;;;541    		} while (++i < 64);		/* Next AC element */
;;;542    
;;;543    		if (JD_USE_SCALE && jd->scale == 3)
;;;544    			*bp = (*tmp / 256) + 128;	/* If scale ratio is 1/8, IDCT can be ommited and only DC element is used */
;;;545    		else
;;;546    			block_idct(tmp, bp);		/* Apply IDCT and store the block to the MCU buffer */
;;;547    
;;;548    		bp += 64;				/* Next block */
;;;549    	}
;;;550    
;;;551    	return JDR_OK;	/* All blocks have been loaded successfully */
;;;552    }
000632  b009              ADD      sp,sp,#0x24
000634  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1592|
000638  f1040014          ADD      r0,r4,#0x14           ;506
00063c  9905              LDR      r1,[sp,#0x14]         ;506
00063e  f9306011          LDRSH    r6,[r0,r1,LSL #1]     ;506
000642  b1f5              CBZ      r5,|L1.1666|
000644  4629              MOV      r1,r5                 ;508
000646  4620              MOV      r0,r4                 ;508
000648  f7fffffe          BL       bitext
00064c  4682              MOV      r10,r0                ;508
00064e  f1ba0f00          CMP      r10,#0                ;509
000652  da03              BGE      |L1.1628|
000654  f1ca0000          RSB      r0,r10,#0             ;509
000658  b2c0              UXTB     r0,r0                 ;509
00065a  e7ea              B        |L1.1586|
                  |L1.1628|
00065c  1e68              SUBS     r0,r5,#1              ;510
00065e  2101              MOVS     r1,#1                 ;510
000660  fa01f500          LSL      r5,r1,r0              ;510
000664  ea0a0005          AND      r0,r10,r5             ;511
000668  b920              CBNZ     r0,|L1.1652|
00066a  2001              MOVS     r0,#1                 ;511
00066c  ebc00045          RSB      r0,r0,r5,LSL #1       ;511
000670  ebaa0a00          SUB      r10,r10,r0            ;511
                  |L1.1652|
000674  4456              ADD      r6,r6,r10             ;512
000676  b232              SXTH     r2,r6                 ;513
000678  f1040014          ADD      r0,r4,#0x14           ;513
00067c  9905              LDR      r1,[sp,#0x14]         ;513
00067e  f8202011          STRH     r2,[r0,r1,LSL #1]     ;513
                  |L1.1666|
000682  f1040010          ADD      r0,r4,#0x10           ;515
000686  9905              LDR      r1,[sp,#0x14]         ;515
000688  5c41              LDRB     r1,[r0,r1]            ;515
00068a  3044              ADDS     r0,r0,#0x44           ;515
00068c  f8500021          LDR      r0,[r0,r1,LSL #2]     ;515
000690  9000              STR      r0,[sp,#0]            ;515
000692  9800              LDR      r0,[sp,#0]            ;516
000694  6800              LDR      r0,[r0,#0]            ;516
000696  4370              MULS     r0,r6,r0              ;516
000698  1200              ASRS     r0,r0,#8              ;516
00069a  f8c90000          STR      r0,[r9,#0]            ;516
00069e  2701              MOVS     r7,#1                 ;519
0006a0  e003              B        |L1.1706|
                  |L1.1698|
0006a2  2000              MOVS     r0,#0                 ;519
0006a4  f8490027          STR      r0,[r9,r7,LSL #2]     ;519
0006a8  1c7f              ADDS     r7,r7,#1              ;519
                  |L1.1706|
0006aa  2f40              CMP      r7,#0x40              ;519
0006ac  d3f9              BCC      |L1.1698|
0006ae  f1040024          ADD      r0,r4,#0x24           ;520
0006b2  eb0000c8          ADD      r0,r0,r8,LSL #3       ;520
0006b6  6840              LDR      r0,[r0,#4]            ;520
0006b8  9003              STR      r0,[sp,#0xc]          ;520
0006ba  f1040034          ADD      r0,r4,#0x34           ;521
0006be  eb0000c8          ADD      r0,r0,r8,LSL #3       ;521
0006c2  6840              LDR      r0,[r0,#4]            ;521
0006c4  9001              STR      r0,[sp,#4]            ;521
0006c6  f1040044          ADD      r0,r4,#0x44           ;522
0006ca  eb0000c8          ADD      r0,r0,r8,LSL #3       ;522
0006ce  6840              LDR      r0,[r0,#4]            ;522
0006d0  9002              STR      r0,[sp,#8]            ;522
0006d2  2701              MOVS     r7,#1                 ;523
0006d4  bf00              NOP                            ;524
                  |L1.1750|
0006d6  4620              MOV      r0,r4                 ;525
0006d8  e9dd2301          LDRD     r2,r3,[sp,#4]         ;525
0006dc  9903              LDR      r1,[sp,#0xc]          ;525
0006de  f7fffffe          BL       huffext
0006e2  4605              MOV      r5,r0                 ;525
0006e4  b905              CBNZ     r5,|L1.1768|
0006e6  e037              B        |L1.1880|
                  |L1.1768|
0006e8  2d00              CMP      r5,#0                 ;527
0006ea  da02              BGE      |L1.1778|
0006ec  4268              RSBS     r0,r5,#0              ;527
0006ee  b2c0              UXTB     r0,r0                 ;527
0006f0  e79f              B        |L1.1586|
                  |L1.1778|
0006f2  0928              LSRS     r0,r5,#4              ;528
0006f4  9006              STR      r0,[sp,#0x18]         ;528
0006f6  9806              LDR      r0,[sp,#0x18]         ;529
0006f8  b128              CBZ      r0,|L1.1798|
0006fa  9806              LDR      r0,[sp,#0x18]         ;530
0006fc  4407              ADD      r7,r7,r0              ;530
0006fe  2f40              CMP      r7,#0x40              ;531
000700  d301              BCC      |L1.1798|
000702  2006              MOVS     r0,#6                 ;531
000704  e795              B        |L1.1586|
                  |L1.1798|
000706  f005000f          AND      r0,r5,#0xf            ;533
00070a  0005              MOVS     r5,r0                 ;533
00070c  d020              BEQ      |L1.1872|
00070e  4629              MOV      r1,r5                 ;534
000710  4620              MOV      r0,r4                 ;534
000712  f7fffffe          BL       bitext
000716  4606              MOV      r6,r0                 ;534
000718  2e00              CMP      r6,#0                 ;535
00071a  da02              BGE      |L1.1826|
00071c  4270              RSBS     r0,r6,#0              ;535
00071e  b2c0              UXTB     r0,r0                 ;535
000720  e787              B        |L1.1586|
                  |L1.1826|
000722  1e68              SUBS     r0,r5,#1              ;536
000724  2101              MOVS     r1,#1                 ;536
000726  fa01f500          LSL      r5,r1,r0              ;536
00072a  ea060005          AND      r0,r6,r5              ;537
00072e  b918              CBNZ     r0,|L1.1848|
000730  2001              MOVS     r0,#1                 ;537
000732  ebc00045          RSB      r0,r0,r5,LSL #1       ;537
000736  1a36              SUBS     r6,r6,r0              ;537
                  |L1.1848|
000738  48fc              LDR      r0,|L1.2860|
00073a  5dc0              LDRB     r0,[r0,r7]            ;538
00073c  9006              STR      r0,[sp,#0x18]         ;538
00073e  9906              LDR      r1,[sp,#0x18]         ;539
000740  9800              LDR      r0,[sp,#0]            ;539
000742  f8500021          LDR      r0,[r0,r1,LSL #2]     ;539
000746  4370              MULS     r0,r6,r0              ;539
000748  1201              ASRS     r1,r0,#8              ;539
00074a  9806              LDR      r0,[sp,#0x18]         ;539
00074c  f8491020          STR      r1,[r9,r0,LSL #2]     ;539
                  |L1.1872|
000750  1c78              ADDS     r0,r7,#1              ;541
000752  4607              MOV      r7,r0                 ;541
000754  2840              CMP      r0,#0x40              ;541
000756  d3be              BCC      |L1.1750|
                  |L1.1880|
000758  bf00              NOP                            ;526
00075a  7b60              LDRB     r0,[r4,#0xd]          ;543
00075c  2803              CMP      r0,#3                 ;543
00075e  d10a              BNE      |L1.1910|
000760  f8d90000          LDR      r0,[r9,#0]            ;544
000764  17c1              ASRS     r1,r0,#31             ;544
000766  eb006111          ADD      r1,r0,r1,LSR #24      ;544
00076a  1209              ASRS     r1,r1,#8              ;544
00076c  3180              ADDS     r1,r1,#0x80           ;544
00076e  b2ca              UXTB     r2,r1                 ;544
000770  9904              LDR      r1,[sp,#0x10]         ;544
000772  700a              STRB     r2,[r1,#0]            ;544
000774  e003              B        |L1.1918|
                  |L1.1910|
000776  4648              MOV      r0,r9                 ;546
000778  9904              LDR      r1,[sp,#0x10]         ;546
00077a  f7fffffe          BL       block_idct
                  |L1.1918|
00077e  9804              LDR      r0,[sp,#0x10]         ;548
000780  3040              ADDS     r0,r0,#0x40           ;548
000782  9004              STR      r0,[sp,#0x10]         ;548
000784  f10b0b01          ADD      r11,r11,#1            ;496
                  |L1.1928|
000788  e9dd1007          LDRD     r1,r0,[sp,#0x1c]      ;496
00078c  4408              ADD      r0,r0,r1              ;496
00078e  4558              CMP      r0,r11                ;496
000790  f63faf25          BHI      |L1.1502|
000794  2000              MOVS     r0,#0                 ;551
000796  e74c              B        |L1.1586|
;;;553    
                          ENDP

                  mcu_output PROC
;;;561    static
;;;562    JRESULT mcu_output (
000798  e92d4fff          PUSH     {r0-r11,lr}
;;;563    	JDEC* jd,	/* Pointer to the decompressor object */
;;;564    	UINT (*outfunc)(JDEC*, void*, JRECT*),	/* RGB output function */
;;;565    	UINT x,		/* MCU position in the image (left of the MCU) */
;;;566    	UINT y		/* MCU position in the image (top of the MCU) */
;;;567    )
;;;568    {
00079c  b08d              SUB      sp,sp,#0x34
00079e  4604              MOV      r4,r0
;;;569    	const INT CVACC = (sizeof (INT) > 2) ? 1024 : 128;
0007a0  f44f6080          MOV      r0,#0x400
0007a4  900c              STR      r0,[sp,#0x30]
;;;570    	UINT ix, iy, mx, my, rx, ry;
;;;571    	INT yy, cb, cr;
;;;572    	BYTE *py, *pc, *rgb24;
;;;573    	JRECT rect;
;;;574    
;;;575    
;;;576    	mx = jd->msx * 8; my = jd->msy * 8;					/* MCU size (pixel) */
0007a6  7ba0              LDRB     r0,[r4,#0xe]
0007a8  00c7              LSLS     r7,r0,#3
0007aa  7be0              LDRB     r0,[r4,#0xf]
0007ac  00c0              LSLS     r0,r0,#3
0007ae  900b              STR      r0,[sp,#0x2c]
;;;577    	rx = (x + mx <= jd->width) ? mx : jd->width - x;	/* Output rectangular size (it may be clipped at right/bottom end) */
0007b0  980f              LDR      r0,[sp,#0x3c]
0007b2  4438              ADD      r0,r0,r7
0007b4  69e1              LDR      r1,[r4,#0x1c]
0007b6  4288              CMP      r0,r1
0007b8  d801              BHI      |L1.1982|
0007ba  4638              MOV      r0,r7
0007bc  e002              B        |L1.1988|
                  |L1.1982|
0007be  69e1              LDR      r1,[r4,#0x1c]
0007c0  980f              LDR      r0,[sp,#0x3c]
0007c2  1a08              SUBS     r0,r1,r0
                  |L1.1988|
0007c4  4683              MOV      r11,r0
;;;578    	ry = (y + my <= jd->height) ? my : jd->height - y;
0007c6  990b              LDR      r1,[sp,#0x2c]
0007c8  9810              LDR      r0,[sp,#0x40]
0007ca  4408              ADD      r0,r0,r1
0007cc  6a21              LDR      r1,[r4,#0x20]
0007ce  4288              CMP      r0,r1
0007d0  d801              BHI      |L1.2006|
0007d2  980b              LDR      r0,[sp,#0x2c]
0007d4  e002              B        |L1.2012|
                  |L1.2006|
0007d6  6a21              LDR      r1,[r4,#0x20]
0007d8  9810              LDR      r0,[sp,#0x40]
0007da  1a08              SUBS     r0,r1,r0
                  |L1.2012|
0007dc  900a              STR      r0,[sp,#0x28]
;;;579    	if (JD_USE_SCALE) {
;;;580    		rx >>= jd->scale; ry >>= jd->scale;
0007de  7b60              LDRB     r0,[r4,#0xd]
0007e0  fa2bfb00          LSR      r11,r11,r0
0007e4  7b61              LDRB     r1,[r4,#0xd]
0007e6  980a              LDR      r0,[sp,#0x28]
0007e8  40c8              LSRS     r0,r0,r1
0007ea  900a              STR      r0,[sp,#0x28]
;;;581    		if (!rx || !ry) return JDR_OK;					/* Skip this MCU if all pixel is to be rounded off */
0007ec  f1bb0f00          CMP      r11,#0
0007f0  d001              BEQ      |L1.2038|
0007f2  980a              LDR      r0,[sp,#0x28]
0007f4  b918              CBNZ     r0,|L1.2046|
                  |L1.2038|
0007f6  2000              MOVS     r0,#0
                  |L1.2040|
;;;582    		x >>= jd->scale; y >>= jd->scale;
;;;583    	}
;;;584    	rect.left = x; rect.right = x + rx - 1;				/* Rectangular area in the frame buffer */
;;;585    	rect.top = y; rect.bottom = y + ry - 1;
;;;586    
;;;587    
;;;588    	if (!JD_USE_SCALE || jd->scale != 3) {	/* Not for 1/8 scaling */
;;;589    
;;;590    		/* Build an RGB MCU from discrete comopnents */
;;;591    		rgb24 = (BYTE*)jd->workbuf;
;;;592    		for (iy = 0; iy < my; iy++) {
;;;593    			pc = jd->mcubuf;
;;;594    			py = pc + iy * 8;
;;;595    			if (my == 16) {		/* Double block height? */
;;;596    				pc += 64 * 4 + (iy >> 1) * 8;
;;;597    				if (iy >= 8) py += 64;
;;;598    			} else {			/* Single block height */
;;;599    				pc += mx * 8 + iy * 8;
;;;600    			}
;;;601    			for (ix = 0; ix < mx; ix++) {
;;;602    				cb = pc[0] - 128; 	/* Get Cb/Cr component and restore right level */
;;;603    				cr = pc[64] - 128;
;;;604    				if (mx == 16) {					/* Double block width? */
;;;605    					if (ix == 8) py += 64 - 8;	/* Jump to next block if double block heigt */
;;;606    					pc += ix & 1;				/* Increase chroma pointer every two pixels */
;;;607    				} else {						/* Single block width */
;;;608    					pc++;						/* Increase chroma pointer every pixel */
;;;609    				}
;;;610    				yy = *py++;			/* Get Y component */
;;;611    
;;;612    				/* Convert YCbCr to RGB */
;;;613    				*rgb24++ = /* R */ BYTECLIP(yy + ((INT)(1.402 * CVACC) * cr) / CVACC);
;;;614    				*rgb24++ = /* G */ BYTECLIP(yy - ((INT)(0.344 * CVACC) * cb + (INT)(0.714 * CVACC) * cr) / CVACC);
;;;615    				*rgb24++ = /* B */ BYTECLIP(yy + ((INT)(1.772 * CVACC) * cb) / CVACC);
;;;616    			}
;;;617    		}
;;;618    
;;;619    		/* Descale the MCU rectangular if needed */
;;;620    		if (JD_USE_SCALE && jd->scale) {
;;;621    			UINT x, y, r, g, b, s, w, a;
;;;622    			BYTE *op;
;;;623    
;;;624    			/* Get averaged RGB value of each square correcponds to a pixel */
;;;625    			s = jd->scale * 2;	/* Bumber of shifts for averaging */
;;;626    			w = 1 << jd->scale;	/* Width of square */
;;;627    			a = (mx - w) * 3;	/* Bytes to skip for next line in the square */
;;;628    			op = (BYTE*)jd->workbuf;
;;;629    			for (iy = 0; iy < my; iy += w) {
;;;630    				for (ix = 0; ix < mx; ix += w) {
;;;631    					rgb24 = (BYTE*)jd->workbuf + (iy * mx + ix) * 3;
;;;632    					r = g = b = 0;
;;;633    					for (y = 0; y < w; y++) {	/* Accumulate RGB value in the square */
;;;634    						for (x = 0; x < w; x++) {
;;;635    							r += *rgb24++;
;;;636    							g += *rgb24++;
;;;637    							b += *rgb24++;
;;;638    						}
;;;639    						rgb24 += a;
;;;640    					}							/* Put the averaged RGB value as a pixel */
;;;641    					*op++ = (BYTE)(r >> s);
;;;642    					*op++ = (BYTE)(g >> s);
;;;643    					*op++ = (BYTE)(b >> s);
;;;644    				}
;;;645    			}
;;;646    		}
;;;647    
;;;648    	} else {	/* For only 1/8 scaling (left-top pixel in each block are the DC value of the block) */
;;;649    
;;;650    		/* Build a 1/8 descaled RGB MCU from discrete comopnents */
;;;651    		rgb24 = (BYTE*)jd->workbuf;
;;;652    		pc = jd->mcubuf + mx * my;
;;;653    		cb = pc[0] - 128;		/* Get Cb/Cr component and restore right level */
;;;654    		cr = pc[64] - 128;
;;;655    		for (iy = 0; iy < my; iy += 8) {
;;;656    			py = jd->mcubuf;
;;;657    			if (iy == 8) py += 64 * 2;
;;;658    			for (ix = 0; ix < mx; ix += 8) {
;;;659    				yy = *py;	/* Get Y component */
;;;660    				py += 64;
;;;661    
;;;662    				/* Convert YCbCr to RGB */
;;;663    				*rgb24++ = /* R */ BYTECLIP(yy + ((INT)(1.402 * CVACC) * cr / CVACC));
;;;664    				*rgb24++ = /* G */ BYTECLIP(yy - ((INT)(0.344 * CVACC) * cb + (INT)(0.714 * CVACC) * cr) / CVACC);
;;;665    				*rgb24++ = /* B */ BYTECLIP(yy + ((INT)(1.772 * CVACC) * cb / CVACC));
;;;666    			}
;;;667    		}
;;;668    	}
;;;669    
;;;670    	/* Squeeze up pixel table if a part of MCU is to be truncated */
;;;671    	mx >>= jd->scale;
;;;672    	if (rx < mx) {
;;;673    		BYTE *s, *d;
;;;674    		UINT x, y;
;;;675    
;;;676    		s = d = (BYTE*)jd->workbuf;
;;;677    		for (y = 0; y < ry; y++) {
;;;678    			for (x = 0; x < rx; x++) {	/* Copy effective pixels */
;;;679    				*d++ = *s++;
;;;680    				*d++ = *s++;
;;;681    				*d++ = *s++;
;;;682    			}
;;;683    			s += (mx - rx) * 3;	/* Skip truncated pixels */
;;;684    		}
;;;685    	}
;;;686    
;;;687    	/* Convert RGB888 to RGB565 if needed */
;;;688    	if (JD_FORMAT == 1) {
;;;689    		BYTE *s = (BYTE*)jd->workbuf;
;;;690    		WORD w, *d = (WORD*)s;
;;;691    		UINT n = rx * ry;
;;;692    
;;;693    		do {
;;;694    			w = (*s++ & 0xF8) << 8;		/* RRRRR----------- */
;;;695    			w |= (*s++ & 0xFC) << 3;	/* -----GGGGGG----- */
;;;696    			w |= *s++ >> 3;				/* -----------BBBBB */
;;;697    			*d++ = w;
;;;698    		} while (--n);
;;;699    	}
;;;700    
;;;701    	/* Output the RGB rectangular */
;;;702    	return outfunc(jd, jd->workbuf, &rect) ? JDR_OK : JDR_INTR; 
;;;703    }
0007f8  b011              ADD      sp,sp,#0x44
0007fa  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.2046|
0007fe  7b61              LDRB     r1,[r4,#0xd]          ;582
000800  980f              LDR      r0,[sp,#0x3c]         ;582
000802  40c8              LSRS     r0,r0,r1              ;582
000804  900f              STR      r0,[sp,#0x3c]         ;582
000806  7b61              LDRB     r1,[r4,#0xd]          ;582
000808  9810              LDR      r0,[sp,#0x40]         ;582
00080a  40c8              LSRS     r0,r0,r1              ;582
00080c  9010              STR      r0,[sp,#0x40]         ;582
00080e  980f              LDR      r0,[sp,#0x3c]         ;584
000810  b280              UXTH     r0,r0                 ;584
000812  f8ad0014          STRH     r0,[sp,#0x14]         ;584
000816  980f              LDR      r0,[sp,#0x3c]         ;584
000818  4458              ADD      r0,r0,r11             ;584
00081a  1e40              SUBS     r0,r0,#1              ;584
00081c  b280              UXTH     r0,r0                 ;584
00081e  f8ad0016          STRH     r0,[sp,#0x16]         ;584
000822  9810              LDR      r0,[sp,#0x40]         ;585
000824  b280              UXTH     r0,r0                 ;585
000826  f8ad0018          STRH     r0,[sp,#0x18]         ;585
00082a  990a              LDR      r1,[sp,#0x28]         ;585
00082c  9810              LDR      r0,[sp,#0x40]         ;585
00082e  4408              ADD      r0,r0,r1              ;585
000830  1e40              SUBS     r0,r0,#1              ;585
000832  b280              UXTH     r0,r0                 ;585
000834  f8ad001a          STRH     r0,[sp,#0x1a]         ;585
000838  7b60              LDRB     r0,[r4,#0xd]          ;588
00083a  2803              CMP      r0,#3                 ;588
00083c  d07d              BEQ      |L1.2362|
00083e  6e65              LDR      r5,[r4,#0x64]         ;591
000840  2600              MOVS     r6,#0                 ;592
000842  e06e              B        |L1.2338|
                  |L1.2116|
000844  f8d48068          LDR      r8,[r4,#0x68]         ;593
000848  eb0800c6          ADD      r0,r8,r6,LSL #3       ;594
00084c  9007              STR      r0,[sp,#0x1c]         ;594
00084e  980b              LDR      r0,[sp,#0x2c]         ;595
000850  2810              CMP      r0,#0x10              ;595
000852  d10b              BNE      |L1.2156|
000854  0870              LSRS     r0,r6,#1              ;596
000856  f44f7180          MOV      r1,#0x100             ;596
00085a  eb0100c0          ADD      r0,r1,r0,LSL #3       ;596
00085e  4480              ADD      r8,r8,r0              ;596
000860  2e08              CMP      r6,#8                 ;597
000862  d307              BCC      |L1.2164|
000864  9807              LDR      r0,[sp,#0x1c]         ;597
000866  3040              ADDS     r0,r0,#0x40           ;597
000868  9007              STR      r0,[sp,#0x1c]         ;597
00086a  e003              B        |L1.2164|
                  |L1.2156|
00086c  00f8              LSLS     r0,r7,#3              ;599
00086e  eb0000c6          ADD      r0,r0,r6,LSL #3       ;599
000872  4480              ADD      r8,r8,r0              ;599
                  |L1.2164|
000874  f04f0900          MOV      r9,#0                 ;601
000878  e050              B        |L1.2332|
                  |L1.2170|
00087a  f8980000          LDRB     r0,[r8,#0]            ;602
00087e  3880              SUBS     r0,r0,#0x80           ;602
000880  9009              STR      r0,[sp,#0x24]         ;602
000882  f8980040          LDRB     r0,[r8,#0x40]         ;603
000886  3880              SUBS     r0,r0,#0x80           ;603
000888  9008              STR      r0,[sp,#0x20]         ;603
00088a  2f10              CMP      r7,#0x10              ;604
00088c  d109              BNE      |L1.2210|
00088e  f1b90f08          CMP      r9,#8                 ;605
000892  d102              BNE      |L1.2202|
000894  9807              LDR      r0,[sp,#0x1c]         ;605
000896  3038              ADDS     r0,r0,#0x38           ;605
000898  9007              STR      r0,[sp,#0x1c]         ;605
                  |L1.2202|
00089a  f0090001          AND      r0,r9,#1              ;606
00089e  4480              ADD      r8,r8,r0              ;606
0008a0  e001              B        |L1.2214|
                  |L1.2210|
0008a2  f1080801          ADD      r8,r8,#1              ;608
                  |L1.2214|
0008a6  9807              LDR      r0,[sp,#0x1c]         ;610
0008a8  f810ab01          LDRB     r10,[r0],#1           ;610
0008ac  9007              STR      r0,[sp,#0x1c]         ;610
0008ae  f240529b          MOV      r2,#0x59b             ;613
0008b2  9908              LDR      r1,[sp,#0x20]         ;613
0008b4  fb01f002          MUL      r0,r1,r2              ;613
0008b8  17c1              ASRS     r1,r0,#31             ;613
0008ba  eb005191          ADD      r1,r0,r1,LSR #22      ;613
0008be  eb0a21a1          ADD      r1,r10,r1,ASR #10     ;613
0008c2  f3c10109          UBFX     r1,r1,#0,#10          ;613
0008c6  4a98              LDR      r2,|L1.2856|
0008c8  5c51              LDRB     r1,[r2,r1]            ;613
0008ca  f8051b01          STRB     r1,[r5],#1            ;613
0008ce  f44f72b0          MOV      r2,#0x160             ;614
0008d2  9909              LDR      r1,[sp,#0x24]         ;614
0008d4  4351              MULS     r1,r2,r1              ;614
0008d6  f24023db          MOV      r3,#0x2db             ;614
0008da  9a08              LDR      r2,[sp,#0x20]         ;614
0008dc  fb031002          MLA      r0,r3,r2,r1           ;614
0008e0  17c1              ASRS     r1,r0,#31             ;614
0008e2  eb005191          ADD      r1,r0,r1,LSR #22      ;614
0008e6  ebaa21a1          SUB      r1,r10,r1,ASR #10     ;614
0008ea  f3c10109          UBFX     r1,r1,#0,#10          ;614
0008ee  4a8e              LDR      r2,|L1.2856|
0008f0  5c51              LDRB     r1,[r2,r1]            ;614
0008f2  f8051b01          STRB     r1,[r5],#1            ;614
0008f6  f2407216          MOV      r2,#0x716             ;615
0008fa  9909              LDR      r1,[sp,#0x24]         ;615
0008fc  fb01f002          MUL      r0,r1,r2              ;615
000900  17c1              ASRS     r1,r0,#31             ;615
000902  eb005191          ADD      r1,r0,r1,LSR #22      ;615
000906  eb0a21a1          ADD      r1,r10,r1,ASR #10     ;615
00090a  f3c10109          UBFX     r1,r1,#0,#10          ;615
00090e  4a86              LDR      r2,|L1.2856|
000910  5c51              LDRB     r1,[r2,r1]            ;615
000912  7029              STRB     r1,[r5,#0]            ;615
000914  1c69              ADDS     r1,r5,#1              ;615
000916  460d              MOV      r5,r1                 ;615
000918  f1090901          ADD      r9,r9,#1              ;601
                  |L1.2332|
00091c  45b9              CMP      r9,r7                 ;601
00091e  d3ac              BCC      |L1.2170|
000920  1c76              ADDS     r6,r6,#1              ;592
                  |L1.2338|
000922  980b              LDR      r0,[sp,#0x2c]         ;592
000924  4286              CMP      r6,r0                 ;592
000926  d38d              BCC      |L1.2116|
000928  7b60              LDRB     r0,[r4,#0xd]          ;620
00092a  2800              CMP      r0,#0                 ;620
00092c  d053              BEQ      |L1.2518|
00092e  7b63              LDRB     r3,[r4,#0xd]          ;625
000930  005a              LSLS     r2,r3,#1              ;625
000932  f894e00d          LDRB     lr,[r4,#0xd]          ;626
000936  2301              MOVS     r3,#1                 ;626
000938  e000              B        |L1.2364|
                  |L1.2362|
00093a  e04d              B        |L1.2520|
                  |L1.2364|
00093c  fa03f10e          LSL      r1,r3,lr              ;626
000940  1a7b              SUBS     r3,r7,r1              ;627
000942  eb030343          ADD      r3,r3,r3,LSL #1       ;627
000946  9300              STR      r3,[sp,#0]            ;627
000948  6e60              LDR      r0,[r4,#0x64]         ;628
00094a  2600              MOVS     r6,#0                 ;629
00094c  e040              B        |L1.2512|
                  |L1.2382|
00094e  f04f0900          MOV      r9,#0                 ;630
000952  e03a              B        |L1.2506|
                  |L1.2388|
000954  fb069e07          MLA      lr,r6,r7,r9           ;631
000958  eb0e0e4e          ADD      lr,lr,lr,LSL #1       ;631
00095c  6e63              LDR      r3,[r4,#0x64]         ;631
00095e  eb03050e          ADD      r5,r3,lr              ;631
000962  2300              MOVS     r3,#0                 ;632
000964  9301              STR      r3,[sp,#4]            ;632
000966  9302              STR      r3,[sp,#8]            ;632
000968  9303              STR      r3,[sp,#0xc]          ;632
00096a  9304              STR      r3,[sp,#0x10]         ;633
00096c  e01d              B        |L1.2474|
                  |L1.2414|
00096e  f04f0c00          MOV      r12,#0                ;634
000972  e013              B        |L1.2460|
                  |L1.2420|
000974  f8153b01          LDRB     r3,[r5],#1            ;635
000978  f8dde00c          LDR      lr,[sp,#0xc]          ;635
00097c  4473              ADD      r3,r3,lr              ;635
00097e  9303              STR      r3,[sp,#0xc]          ;635
000980  f8153b01          LDRB     r3,[r5],#1            ;636
000984  f8dde008          LDR      lr,[sp,#8]            ;636
000988  4473              ADD      r3,r3,lr              ;636
00098a  9302              STR      r3,[sp,#8]            ;636
00098c  f8153b01          LDRB     r3,[r5],#1            ;637
000990  f8dde004          LDR      lr,[sp,#4]            ;637
000994  4473              ADD      r3,r3,lr              ;637
000996  9301              STR      r3,[sp,#4]            ;637
000998  f10c0c01          ADD      r12,r12,#1            ;634
                  |L1.2460|
00099c  458c              CMP      r12,r1                ;634
00099e  d3e9              BCC      |L1.2420|
0009a0  9b00              LDR      r3,[sp,#0]            ;639
0009a2  441d              ADD      r5,r5,r3              ;639
0009a4  9b04              LDR      r3,[sp,#0x10]         ;633
0009a6  1c5b              ADDS     r3,r3,#1              ;633
0009a8  9304              STR      r3,[sp,#0x10]         ;633
                  |L1.2474|
0009aa  9b04              LDR      r3,[sp,#0x10]         ;633
0009ac  428b              CMP      r3,r1                 ;633
0009ae  d3de              BCC      |L1.2414|
0009b0  9b03              LDR      r3,[sp,#0xc]          ;641
0009b2  40d3              LSRS     r3,r3,r2              ;641
0009b4  f8003b01          STRB     r3,[r0],#1            ;641
0009b8  9b02              LDR      r3,[sp,#8]            ;642
0009ba  40d3              LSRS     r3,r3,r2              ;642
0009bc  f8003b01          STRB     r3,[r0],#1            ;642
0009c0  9b01              LDR      r3,[sp,#4]            ;643
0009c2  40d3              LSRS     r3,r3,r2              ;643
0009c4  f8003b01          STRB     r3,[r0],#1            ;643
0009c8  4489              ADD      r9,r9,r1              ;630
                  |L1.2506|
0009ca  45b9              CMP      r9,r7                 ;630
0009cc  d3c2              BCC      |L1.2388|
0009ce  440e              ADD      r6,r6,r1              ;629
                  |L1.2512|
0009d0  9b0b              LDR      r3,[sp,#0x2c]         ;629
0009d2  429e              CMP      r6,r3                 ;629
0009d4  d3bb              BCC      |L1.2382|
                  |L1.2518|
0009d6  e05b              B        |L1.2704|
                  |L1.2520|
0009d8  6e65              LDR      r5,[r4,#0x64]         ;651
0009da  6ea1              LDR      r1,[r4,#0x68]         ;652
0009dc  980b              LDR      r0,[sp,#0x2c]         ;652
0009de  fb071800          MLA      r8,r7,r0,r1           ;652
0009e2  f8980000          LDRB     r0,[r8,#0]            ;653
0009e6  3880              SUBS     r0,r0,#0x80           ;653
0009e8  9009              STR      r0,[sp,#0x24]         ;653
0009ea  f8980040          LDRB     r0,[r8,#0x40]         ;654
0009ee  3880              SUBS     r0,r0,#0x80           ;654
0009f0  9008              STR      r0,[sp,#0x20]         ;654
0009f2  2600              MOVS     r6,#0                 ;655
0009f4  e049              B        |L1.2698|
                  |L1.2550|
0009f6  6ea0              LDR      r0,[r4,#0x68]         ;656
0009f8  9007              STR      r0,[sp,#0x1c]         ;656
0009fa  2e08              CMP      r6,#8                 ;657
0009fc  d102              BNE      |L1.2564|
0009fe  9807              LDR      r0,[sp,#0x1c]         ;657
000a00  3080              ADDS     r0,r0,#0x80           ;657
000a02  9007              STR      r0,[sp,#0x1c]         ;657
                  |L1.2564|
000a04  f04f0900          MOV      r9,#0                 ;658
000a08  e03c              B        |L1.2692|
                  |L1.2570|
000a0a  9807              LDR      r0,[sp,#0x1c]         ;659
000a0c  f890a000          LDRB     r10,[r0,#0]           ;659
000a10  9807              LDR      r0,[sp,#0x1c]         ;660
000a12  3040              ADDS     r0,r0,#0x40           ;660
000a14  9007              STR      r0,[sp,#0x1c]         ;660
000a16  f240529b          MOV      r2,#0x59b             ;663
000a1a  9908              LDR      r1,[sp,#0x20]         ;663
000a1c  fb01f002          MUL      r0,r1,r2              ;663
000a20  17c1              ASRS     r1,r0,#31             ;663
000a22  eb005191          ADD      r1,r0,r1,LSR #22      ;663
000a26  eb0a21a1          ADD      r1,r10,r1,ASR #10     ;663
000a2a  f3c10109          UBFX     r1,r1,#0,#10          ;663
000a2e  4a3e              LDR      r2,|L1.2856|
000a30  5c51              LDRB     r1,[r2,r1]            ;663
000a32  f8051b01          STRB     r1,[r5],#1            ;663
000a36  f44f72b0          MOV      r2,#0x160             ;664
000a3a  9909              LDR      r1,[sp,#0x24]         ;664
000a3c  4351              MULS     r1,r2,r1              ;664
000a3e  f24023db          MOV      r3,#0x2db             ;664
000a42  9a08              LDR      r2,[sp,#0x20]         ;664
000a44  fb031002          MLA      r0,r3,r2,r1           ;664
000a48  17c1              ASRS     r1,r0,#31             ;664
000a4a  eb005191          ADD      r1,r0,r1,LSR #22      ;664
000a4e  ebaa21a1          SUB      r1,r10,r1,ASR #10     ;664
000a52  f3c10109          UBFX     r1,r1,#0,#10          ;664
000a56  4a34              LDR      r2,|L1.2856|
000a58  5c51              LDRB     r1,[r2,r1]            ;664
000a5a  f8051b01          STRB     r1,[r5],#1            ;664
000a5e  f2407216          MOV      r2,#0x716             ;665
000a62  9909              LDR      r1,[sp,#0x24]         ;665
000a64  fb01f002          MUL      r0,r1,r2              ;665
000a68  17c1              ASRS     r1,r0,#31             ;665
000a6a  eb005191          ADD      r1,r0,r1,LSR #22      ;665
000a6e  eb0a21a1          ADD      r1,r10,r1,ASR #10     ;665
000a72  f3c10109          UBFX     r1,r1,#0,#10          ;665
000a76  4a2c              LDR      r2,|L1.2856|
000a78  5c51              LDRB     r1,[r2,r1]            ;665
000a7a  7029              STRB     r1,[r5,#0]            ;665
000a7c  1c69              ADDS     r1,r5,#1              ;665
000a7e  460d              MOV      r5,r1                 ;665
000a80  f1090908          ADD      r9,r9,#8              ;658
                  |L1.2692|
000a84  45b9              CMP      r9,r7                 ;658
000a86  d3c0              BCC      |L1.2570|
000a88  3608              ADDS     r6,r6,#8              ;655
                  |L1.2698|
000a8a  980b              LDR      r0,[sp,#0x2c]         ;655
000a8c  4286              CMP      r6,r0                 ;655
000a8e  d3b2              BCC      |L1.2550|
                  |L1.2704|
000a90  7b60              LDRB     r0,[r4,#0xd]          ;671
000a92  40c7              LSRS     r7,r7,r0              ;671
000a94  45bb              CMP      r11,r7                ;672
000a96  d221              BCS      |L1.2780|
000a98  f8d4c064          LDR      r12,[r4,#0x64]        ;676
000a9c  4661              MOV      r1,r12                ;676
000a9e  4660              MOV      r0,r12                ;676
000aa0  2300              MOVS     r3,#0                 ;677
000aa2  e016              B        |L1.2770|
                  |L1.2724|
000aa4  2200              MOVS     r2,#0                 ;678
000aa6  e00c              B        |L1.2754|
                  |L1.2728|
000aa8  f810cb01          LDRB     r12,[r0],#1           ;679
000aac  f801cb01          STRB     r12,[r1],#1           ;679
000ab0  f810cb01          LDRB     r12,[r0],#1           ;680
000ab4  f801cb01          STRB     r12,[r1],#1           ;680
000ab8  f810cb01          LDRB     r12,[r0],#1           ;681
000abc  f801cb01          STRB     r12,[r1],#1           ;681
000ac0  1c52              ADDS     r2,r2,#1              ;678
                  |L1.2754|
000ac2  455a              CMP      r2,r11                ;678
000ac4  d3f0              BCC      |L1.2728|
000ac6  eba70c0b          SUB      r12,r7,r11            ;683
000aca  eb0c0c4c          ADD      r12,r12,r12,LSL #1    ;683
000ace  4460              ADD      r0,r0,r12             ;683
000ad0  1c5b              ADDS     r3,r3,#1              ;677
                  |L1.2770|
000ad2  f8ddc028          LDR      r12,[sp,#0x28]        ;677
000ad6  4563              CMP      r3,r12                ;677
000ad8  d3e4              BCC      |L1.2724|
000ada  bf00              NOP                            ;685
                  |L1.2780|
000adc  6e60              LDR      r0,[r4,#0x64]         ;689
000ade  4602              MOV      r2,r0                 ;690
000ae0  f8ddc028          LDR      r12,[sp,#0x28]        ;691
000ae4  fb0bf30c          MUL      r3,r11,r12            ;691
000ae8  bf00              NOP                            ;693
                  |L1.2794|
000aea  f810cb01          LDRB     r12,[r0],#1           ;694
000aee  f00c0cf8          AND      r12,r12,#0xf8         ;694
000af2  ea4f210c          LSL      r1,r12,#8             ;694
000af6  f810cb01          LDRB     r12,[r0],#1           ;695
000afa  f00c0cfc          AND      r12,r12,#0xfc         ;695
000afe  ea4101cc          ORR      r1,r1,r12,LSL #3      ;695
000b02  f810cb01          LDRB     r12,[r0],#1           ;696
000b06  ea4101ec          ORR      r1,r1,r12,ASR #3      ;696
000b0a  f8221b02          STRH     r1,[r2],#2            ;697
000b0e  f1a30c01          SUB      r12,r3,#1             ;698
000b12  ea5f030c          MOVS     r3,r12                ;698
000b16  d1e8              BNE      |L1.2794|
000b18  aa05              ADD      r2,sp,#0x14           ;702
000b1a  4620              MOV      r0,r4                 ;702
000b1c  6e61              LDR      r1,[r4,#0x64]         ;702
000b1e  9b0e              LDR      r3,[sp,#0x38]         ;702
000b20  4798              BLX      r3                    ;702
000b22  b928              CBNZ     r0,|L1.2864|
000b24  2001              MOVS     r0,#1                 ;702
000b26  e667              B        |L1.2040|
                  |L1.2856|
                          DCD      Clip8
                  |L1.2860|
                          DCD      Zig
                  |L1.2864|
000b30  2000              MOVS     r0,#0                 ;702
000b32  e661              B        |L1.2040|
;;;704    
                          ENDP

                  restart PROC
;;;712    static
;;;713    JRESULT restart (
000b34  e92d47f0          PUSH     {r4-r10,lr}
;;;714    	JDEC* jd,	/* Pointer to the decompressor object */
;;;715    	WORD rstn	/* Expected restert sequense number */
;;;716    )
;;;717    {
000b38  4604              MOV      r4,r0
000b3a  4688              MOV      r8,r1
;;;718    	UINT i, dc;
;;;719    	WORD d;
;;;720    	BYTE *dp;
;;;721    
;;;722    
;;;723    	/* Discard padding bits and get two bytes from the input stream */
;;;724    	dp = jd->dptr; dc = jd->dctr;
000b3c  6866              LDR      r6,[r4,#4]
000b3e  6825              LDR      r5,[r4,#0]
;;;725    	d = 0;
000b40  2700              MOVS     r7,#0
;;;726    	for (i = 0; i < 2; i++) {
000b42  46b9              MOV      r9,r7
000b44  e014              B        |L1.2928|
                  |L1.2886|
;;;727    		if (!dc) {	/* No input data is available, re-fill input buffer */
000b46  b95d              CBNZ     r5,|L1.2912|
;;;728    			dp = jd->inbuf;
000b48  68a6              LDR      r6,[r4,#8]
;;;729    			dc = jd->infunc(jd, dp, JD_SZBUF);
000b4a  f44f7200          MOV      r2,#0x200
000b4e  4631              MOV      r1,r6
000b50  4620              MOV      r0,r4
000b52  6f63              LDR      r3,[r4,#0x74]
000b54  4798              BLX      r3
000b56  4605              MOV      r5,r0
;;;730    			if (!dc) return JDR_INP;
000b58  b91d              CBNZ     r5,|L1.2914|
000b5a  2002              MOVS     r0,#2
                  |L1.2908|
;;;731    		} else {
;;;732    			dp++;
;;;733    		}
;;;734    		dc--;
;;;735    		d = (d << 8) | *dp;	/* Get a byte */
;;;736    	}
;;;737    	jd->dptr = dp; jd->dctr = dc; jd->dmsk = 0;
;;;738    
;;;739    	/* Check the marker */
;;;740    	if ((d & 0xFFD8) != 0xFFD0 || (d & 7) != (rstn & 7))
;;;741    		return JDR_FMT1;	/* Err: expected RSTn marker is not detected (may be collapted data) */
;;;742    
;;;743    	/* Reset DC offset */
;;;744    	jd->dcv[2] = jd->dcv[1] = jd->dcv[0] = 0;
;;;745    
;;;746    	return JDR_OK;
;;;747    }
000b5c  e8bd87f0          POP      {r4-r10,pc}
                  |L1.2912|
000b60  1c76              ADDS     r6,r6,#1              ;732
                  |L1.2914|
000b62  1e6d              SUBS     r5,r5,#1              ;734
000b64  7830              LDRB     r0,[r6,#0]            ;735
000b66  ea402007          ORR      r0,r0,r7,LSL #8       ;735
000b6a  b287              UXTH     r7,r0                 ;735
000b6c  f1090901          ADD      r9,r9,#1              ;726
                  |L1.2928|
000b70  f1b90f02          CMP      r9,#2                 ;726
000b74  d3e7              BCC      |L1.2886|
000b76  6066              STR      r6,[r4,#4]            ;737
000b78  6025              STR      r5,[r4,#0]            ;737
000b7a  2000              MOVS     r0,#0                 ;737
000b7c  7320              STRB     r0,[r4,#0xc]          ;737
000b7e  f64f70d8          MOV      r0,#0xffd8            ;740
000b82  4038              ANDS     r0,r0,r7              ;740
000b84  f64f71d0          MOV      r1,#0xffd0            ;740
000b88  4288              CMP      r0,r1                 ;740
000b8a  d103              BNE      |L1.2964|
000b8c  0778              LSLS     r0,r7,#29             ;740
000b8e  ebb07f48          CMP      r0,r8,LSL #29         ;740
000b92  d001              BEQ      |L1.2968|
                  |L1.2964|
000b94  2006              MOVS     r0,#6                 ;741
000b96  e7e1              B        |L1.2908|
                  |L1.2968|
000b98  2100              MOVS     r1,#0                 ;744
000b9a  82a1              STRH     r1,[r4,#0x14]         ;744
000b9c  82e1              STRH     r1,[r4,#0x16]         ;744
000b9e  8321              STRH     r1,[r4,#0x18]         ;744
000ba0  2000              MOVS     r0,#0                 ;746
000ba2  e7db              B        |L1.2908|
;;;748    
                          ENDP

                  jd_prepare PROC
;;;758    
;;;759    JRESULT jd_prepare (
000ba4  e92d4fff          PUSH     {r0-r11,lr}
;;;760    	JDEC* jd,			/* Blank decompressor object */
;;;761    	UINT (*infunc)(JDEC*, BYTE*, UINT),	/* JPEG strem input function */
;;;762    	void* pool,			/* Working buffer for the decompression session */
;;;763    	UINT sz_pool,		/* Size of working buffer */
;;;764    	void* dev			/* I/O device identifier for the session */
;;;765    )
;;;766    {
000ba8  b083              SUB      sp,sp,#0xc
000baa  4604              MOV      r4,r0
;;;767    	BYTE *seg, b;
;;;768    	WORD marker;
;;;769    	DWORD ofs;
;;;770    	UINT n, i, j, len;
;;;771    	JRESULT rc;
;;;772    
;;;773    
;;;774    	if (!pool) return JDR_PAR;
000bac  9805              LDR      r0,[sp,#0x14]
000bae  b918              CBNZ     r0,|L1.3000|
000bb0  2005              MOVS     r0,#5
                  |L1.2994|
;;;775    
;;;776    	jd->pool = pool;		/* Work memroy */
;;;777    	jd->sz_pool = sz_pool;	/* Size of given work memory */
;;;778    	jd->infunc = infunc;	/* Stream input function */
;;;779    	jd->device = dev;		/* I/O device identifier */
;;;780    	jd->nrst = 0;			/* No restart interval (default) */
;;;781    
;;;782    	for (i = 0; i < 2; i++) {	/* Nulls pointers */
;;;783    		for (j = 0; j < 2; j++) {
;;;784    			jd->huffbits[i][j] = 0;
;;;785    			jd->huffcode[i][j] = 0;
;;;786    			jd->huffdata[i][j] = 0;
;;;787    		}
;;;788    	}
;;;789    	for (i = 0; i < 4; i++) jd->qttbl[i] = 0;
;;;790    
;;;791    	jd->inbuf = seg = alloc_pool(jd, JD_SZBUF);		/* Allocate stream input buffer */
;;;792    	if (!seg) return JDR_MEM1;
;;;793    
;;;794    	if (jd->infunc(jd, seg, 2) != 2) return JDR_INP;/* Check SOI marker */
;;;795    	if (LDB_WORD(seg) != 0xFFD8) return JDR_FMT1;	/* Err: SOI is not detected */
;;;796    	ofs = 2;
;;;797    
;;;798    	for (;;) {
;;;799    		/* Get a JPEG marker */
;;;800    		if (jd->infunc(jd, seg, 4) != 4) return JDR_INP;
;;;801    		marker = LDB_WORD(seg);		/* Marker */
;;;802    		len = LDB_WORD(seg + 2);	/* Length field */
;;;803    		if (len <= 2 || (marker >> 8) != 0xFF) return JDR_FMT1;
;;;804    		len -= 2;		/* Content size excluding length field */
;;;805    		ofs += 4 + len;	/* Number of bytes loaded */
;;;806    
;;;807    		switch (marker & 0xFF) {
;;;808    		case 0xC0:	/* SOF0 (baseline JPEG) */
;;;809    			/* Load segment data */
;;;810    			if (len > JD_SZBUF) return JDR_MEM2;
;;;811    			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
;;;812    
;;;813    			jd->width = LDB_WORD(seg+3);		/* Image width in unit of pixel */
;;;814    			jd->height = LDB_WORD(seg+1);		/* Image height in unit of pixel */
;;;815    			if (seg[5] != 3) return JDR_FMT3;	/* Err: Supports only Y/Cb/Cr format */
;;;816    
;;;817    			/* Check three image components */
;;;818    			for (i = 0; i < 3; i++) {	
;;;819    				b = seg[7 + 3 * i];							/* Get sampling factor */
;;;820    				if (!i) {	/* Y component */
;;;821    					if (b != 0x11 && b != 0x22 && b != 0x21)/* Check sampling factor */
;;;822    						return JDR_FMT3;					/* Err: Supports only 4:4:4, 4:2:0 or 4:2:2 */
;;;823    					jd->msx = b >> 4; jd->msy = b & 15;		/* Size of MCU [blocks] */
;;;824    				} else {	/* Cb/Cr component */
;;;825    					if (b != 0x11) return JDR_FMT3;			/* Err: Sampling factor of Cr/Cb must be 1 */
;;;826    				}
;;;827    				b = seg[8 + 3 * i];							/* Get dequantizer table ID for this component */
;;;828    				if (b > 3) return JDR_FMT3;					/* Err: Invalid ID */
;;;829    				jd->qtid[i] = b;
;;;830    			}
;;;831    			break;
;;;832    
;;;833    		case 0xDD:	/* DRI */
;;;834    			/* Load segment data */
;;;835    			if (len > JD_SZBUF) return JDR_MEM2;
;;;836    			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
;;;837    
;;;838    			/* Get restart interval (MCUs) */
;;;839    			jd->nrst = LDB_WORD(seg);
;;;840    			break;
;;;841    
;;;842    		case 0xC4:	/* DHT */
;;;843    			/* Load segment data */
;;;844    			if (len > JD_SZBUF) return JDR_MEM2;
;;;845    			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
;;;846    
;;;847    			/* Create huffman tables */
;;;848    			rc = create_huffman_tbl(jd, seg, len);
;;;849    			if (rc) return rc;
;;;850    			break;
;;;851    
;;;852    		case 0xDB:	/* DQT */
;;;853    			/* Load segment data */
;;;854    			if (len > JD_SZBUF) return JDR_MEM2;
;;;855    			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
;;;856    
;;;857    			/* Create de-quantizer tables */
;;;858    			rc = create_qt_tbl(jd, seg, len);
;;;859    			if (rc) return rc;
;;;860    			break;
;;;861    
;;;862    		case 0xDA:	/* SOS */
;;;863    			/* Load segment data */
;;;864    			if (len > JD_SZBUF) return JDR_MEM2;
;;;865    			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
;;;866    
;;;867    			if (!jd->width || !jd->height) return JDR_FMT1;	/* Err: Invalid image size */
;;;868    
;;;869    			if (seg[0] != 3) return JDR_FMT3;				/* Err: Supports only three color components format */
;;;870    
;;;871    			/* Check if all tables corresponding to each components have been loaded */
;;;872    			for (i = 0; i < 3; i++) {
;;;873    				b = seg[2 + 2 * i];	/* Get huffman table ID */
;;;874    				if (b != 0x00 && b != 0x11)	return JDR_FMT3;	/* Err: Different table number for DC/AC element */
;;;875    				b = i ? 1 : 0;
;;;876    				if (!jd->huffbits[b][0] || !jd->huffbits[b][1])	/* Check huffman table for this component */
;;;877    					return JDR_FMT1;							/* Err: Huffman table not loaded */
;;;878    				if (!jd->qttbl[jd->qtid[i]]) return JDR_FMT1;	/* Err: Dequantizer table not loaded */
;;;879    			}
;;;880    
;;;881    			/* Allocate working buffer for MCU and RGB */
;;;882    			n = jd->msy * jd->msx;						/* Number of Y blocks in the MCU */
;;;883    			if (!n) return JDR_FMT1;					/* Err: SOF0 has not been loaded */
;;;884    			len = n * 64 * 2 + 64;						/* Allocate buffer for IDCT and RGB output */
;;;885    			if (len < 256) len = 256;					/* but at least 256 byte is required for IDCT */
;;;886    			jd->workbuf = alloc_pool(jd, len);			/* and it may occupy a part of following MCU working buffer for RGB output */
;;;887    			if (!jd->workbuf) return JDR_MEM1;			/* Err: not enough memory */
;;;888    			jd->mcubuf = alloc_pool(jd, (n + 2) * 64);	/* Allocate MCU working buffer */
;;;889    			if (!jd->mcubuf) return JDR_MEM1;			/* Err: not enough memory */
;;;890    
;;;891    			/* Pre-load the JPEG data to extract it from the bit stream */
;;;892    			jd->dptr = seg; jd->dctr = 0; jd->dmsk = 0;	/* Prepare to read bit stream */
;;;893    			if (ofs %= JD_SZBUF) {						/* Align read offset to JD_SZBUF */
;;;894    				jd->dctr = jd->infunc(jd, seg + ofs, JD_SZBUF - (UINT)ofs);
;;;895    				jd->dptr = seg + ofs - 1;
;;;896    			}
;;;897    
;;;898    			return JDR_OK;		/* Initialization succeeded. Ready to decompress the JPEG image. */
;;;899    
;;;900    		case 0xC1:	/* SOF1 */
;;;901    		case 0xC2:	/* SOF2 */
;;;902    		case 0xC3:	/* SOF3 */
;;;903    		case 0xC5:	/* SOF5 */
;;;904    		case 0xC6:	/* SOF6 */
;;;905    		case 0xC7:	/* SOF7 */
;;;906    		case 0xC9:	/* SOF9 */
;;;907    		case 0xCA:	/* SOF10 */
;;;908    		case 0xCB:	/* SOF11 */
;;;909    		case 0xCD:	/* SOF13 */
;;;910    		case 0xCE:	/* SOF14 */
;;;911    		case 0xCF:	/* SOF15 */
;;;912    		case 0xD9:	/* EOI */
;;;913    			return JDR_FMT3;	/* Unsuppoted JPEG standard (may be progressive JPEG) */
;;;914    
;;;915    		default:	/* Unknown segment (comment, exif or etc..) */
;;;916    			/* Skip segment data */
;;;917    			if (jd->infunc(jd, 0, len) != len)	/* Null pointer specifies to skip bytes of stream */
;;;918    				return JDR_INP;
;;;919    		}
;;;920    	}
;;;921    }
000bb2  b007              ADD      sp,sp,#0x1c
000bb4  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.3000|
000bb8  9805              LDR      r0,[sp,#0x14]         ;776
000bba  66e0              STR      r0,[r4,#0x6c]         ;776
000bbc  9806              LDR      r0,[sp,#0x18]         ;777
000bbe  6720              STR      r0,[r4,#0x70]         ;777
000bc0  9804              LDR      r0,[sp,#0x10]         ;778
000bc2  6760              STR      r0,[r4,#0x74]         ;778
000bc4  9810              LDR      r0,[sp,#0x40]         ;779
000bc6  67a0              STR      r0,[r4,#0x78]         ;779
000bc8  2000              MOVS     r0,#0                 ;780
000bca  8360              STRH     r0,[r4,#0x1a]         ;780
000bcc  2600              MOVS     r6,#0                 ;782
000bce  e01b              B        |L1.3080|
                  |L1.3024|
000bd0  f04f0a00          MOV      r10,#0                ;783
000bd4  e014              B        |L1.3072|
                  |L1.3030|
000bd6  2100              MOVS     r1,#0                 ;784
000bd8  f1040024          ADD      r0,r4,#0x24           ;784
000bdc  eb0000c6          ADD      r0,r0,r6,LSL #3       ;784
000be0  f840102a          STR      r1,[r0,r10,LSL #2]    ;784
000be4  f1040034          ADD      r0,r4,#0x34           ;785
000be8  eb0000c6          ADD      r0,r0,r6,LSL #3       ;785
000bec  f840102a          STR      r1,[r0,r10,LSL #2]    ;785
000bf0  f1040044          ADD      r0,r4,#0x44           ;786
000bf4  eb0000c6          ADD      r0,r0,r6,LSL #3       ;786
000bf8  f840102a          STR      r1,[r0,r10,LSL #2]    ;786
000bfc  f10a0a01          ADD      r10,r10,#1            ;783
                  |L1.3072|
000c00  f1ba0f02          CMP      r10,#2                ;783
000c04  d3e7              BCC      |L1.3030|
000c06  1c76              ADDS     r6,r6,#1              ;782
                  |L1.3080|
000c08  2e02              CMP      r6,#2                 ;782
000c0a  d3e1              BCC      |L1.3024|
000c0c  2600              MOVS     r6,#0                 ;789
000c0e  e005              B        |L1.3100|
                  |L1.3088|
000c10  2100              MOVS     r1,#0                 ;789
000c12  f1040054          ADD      r0,r4,#0x54           ;789
000c16  f8401026          STR      r1,[r0,r6,LSL #2]     ;789
000c1a  1c76              ADDS     r6,r6,#1              ;789
                  |L1.3100|
000c1c  2e04              CMP      r6,#4                 ;789
000c1e  d3f7              BCC      |L1.3088|
000c20  f44f7100          MOV      r1,#0x200             ;791
000c24  4620              MOV      r0,r4                 ;791
000c26  f7fffffe          BL       alloc_pool
000c2a  4605              MOV      r5,r0                 ;791
000c2c  60a0              STR      r0,[r4,#8]            ;791
000c2e  b90d              CBNZ     r5,|L1.3124|
000c30  2003              MOVS     r0,#3                 ;792
000c32  e7be              B        |L1.2994|
                  |L1.3124|
000c34  2202              MOVS     r2,#2                 ;794
000c36  4629              MOV      r1,r5                 ;794
000c38  4620              MOV      r0,r4                 ;794
000c3a  6f63              LDR      r3,[r4,#0x74]         ;794
000c3c  4798              BLX      r3                    ;794
000c3e  2802              CMP      r0,#2                 ;794
000c40  d001              BEQ      |L1.3142|
000c42  2002              MOVS     r0,#2                 ;794
000c44  e7b5              B        |L1.2994|
                  |L1.3142|
000c46  7868              LDRB     r0,[r5,#1]            ;795
000c48  7829              LDRB     r1,[r5,#0]            ;795
000c4a  ea402001          ORR      r0,r0,r1,LSL #8       ;795
000c4e  f64f71d8          MOV      r1,#0xffd8            ;795
000c52  4288              CMP      r0,r1                 ;795
000c54  d001              BEQ      |L1.3162|
000c56  2006              MOVS     r0,#6                 ;795
000c58  e7ab              B        |L1.2994|
                  |L1.3162|
000c5a  f04f0902          MOV      r9,#2                 ;796
000c5e  bf00              NOP                            ;798
                  |L1.3168|
000c60  2204              MOVS     r2,#4                 ;800
000c62  4629              MOV      r1,r5                 ;800
000c64  4620              MOV      r0,r4                 ;800
000c66  6f63              LDR      r3,[r4,#0x74]         ;800
000c68  4798              BLX      r3                    ;800
000c6a  2804              CMP      r0,#4                 ;800
000c6c  d001              BEQ      |L1.3186|
000c6e  2002              MOVS     r0,#2                 ;800
000c70  e79f              B        |L1.2994|
                  |L1.3186|
000c72  7868              LDRB     r0,[r5,#1]            ;801
000c74  7829              LDRB     r1,[r5,#0]            ;801
000c76  ea402001          ORR      r0,r0,r1,LSL #8       ;801
000c7a  9002              STR      r0,[sp,#8]            ;801
000c7c  78e8              LDRB     r0,[r5,#3]            ;802
000c7e  78a9              LDRB     r1,[r5,#2]            ;802
000c80  ea402701          ORR      r7,r0,r1,LSL #8       ;802
000c84  2f02              CMP      r7,#2                 ;803
000c86  d904              BLS      |L1.3218|
000c88  21ff              MOVS     r1,#0xff              ;803
000c8a  9802              LDR      r0,[sp,#8]            ;803
000c8c  ebb12f20          CMP      r1,r0,ASR #8          ;803
000c90  d001              BEQ      |L1.3222|
                  |L1.3218|
000c92  2006              MOVS     r0,#6                 ;803
000c94  e78d              B        |L1.2994|
                  |L1.3222|
000c96  1ebf              SUBS     r7,r7,#2              ;804
000c98  1d38              ADDS     r0,r7,#4              ;805
000c9a  4481              ADD      r9,r9,r0              ;805
000c9c  9802              LDR      r0,[sp,#8]            ;807
000c9e  b2c0              UXTB     r0,r0                 ;807
000ca0  38c0              SUBS     r0,r0,#0xc0           ;807
000ca2  281e              CMP      r0,#0x1e              ;807
000ca4  d272              BCS      |L1.3468|
000ca6  e8dff000          TBB      [pc,r0]               ;807
000caa  0ff4              DCB      0x0f,0xf4
000cac  f3f272f1          DCB      0xf3,0xf2,0x72,0xf1
000cb0  f0ef71ee          DCB      0xf0,0xef,0x71,0xee
000cb4  edec71eb          DCB      0xed,0xec,0x71,0xeb
000cb8  eae97171          DCB      0xea,0xe9,0x71,0x71
000cbc  71717171          DCB      0x71,0x71,0x71,0x71
000cc0  717171e8          DCB      0x71,0x71,0x71,0xe8
000cc4  a68c715d          DCB      0xa6,0x8c,0x71,0x5d
000cc8  f5b77f00          CMP      r7,#0x200             ;810
000ccc  d901              BLS      |L1.3282|
000cce  2004              MOVS     r0,#4                 ;810
000cd0  e76f              B        |L1.2994|
                  |L1.3282|
000cd2  463a              MOV      r2,r7                 ;811
000cd4  4629              MOV      r1,r5                 ;811
000cd6  4620              MOV      r0,r4                 ;811
000cd8  6f63              LDR      r3,[r4,#0x74]         ;811
000cda  4798              BLX      r3                    ;811
000cdc  42b8              CMP      r0,r7                 ;811
000cde  d001              BEQ      |L1.3300|
000ce0  2002              MOVS     r0,#2                 ;811
000ce2  e766              B        |L1.2994|
                  |L1.3300|
000ce4  7928              LDRB     r0,[r5,#4]            ;813
000ce6  78e9              LDRB     r1,[r5,#3]            ;813
000ce8  ea402001          ORR      r0,r0,r1,LSL #8       ;813
000cec  61e0              STR      r0,[r4,#0x1c]         ;813
000cee  78a8              LDRB     r0,[r5,#2]            ;814
000cf0  7869              LDRB     r1,[r5,#1]            ;814
000cf2  ea402001          ORR      r0,r0,r1,LSL #8       ;814
000cf6  6220              STR      r0,[r4,#0x20]         ;814
000cf8  7968              LDRB     r0,[r5,#5]            ;815
000cfa  2803              CMP      r0,#3                 ;815
000cfc  d001              BEQ      |L1.3330|
000cfe  2008              MOVS     r0,#8                 ;815
000d00  e757              B        |L1.2994|
                  |L1.3330|
000d02  2600              MOVS     r6,#0                 ;818
000d04  e02b              B        |L1.3422|
                  |L1.3334|
000d06  eb060046          ADD      r0,r6,r6,LSL #1       ;819
000d0a  1dc0              ADDS     r0,r0,#7              ;819
000d0c  f8158000          LDRB     r8,[r5,r0]            ;819
000d10  b98e              CBNZ     r6,|L1.3382|
000d12  f1b80f11          CMP      r8,#0x11              ;821
000d16  d007              BEQ      |L1.3368|
000d18  f1b80f22          CMP      r8,#0x22              ;821
000d1c  d004              BEQ      |L1.3368|
000d1e  f1b80f21          CMP      r8,#0x21              ;821
000d22  d001              BEQ      |L1.3368|
000d24  2008              MOVS     r0,#8                 ;822
000d26  e744              B        |L1.2994|
                  |L1.3368|
000d28  ea4f1028          ASR      r0,r8,#4              ;823
000d2c  73a0              STRB     r0,[r4,#0xe]          ;823
000d2e  f008000f          AND      r0,r8,#0xf            ;823
000d32  73e0              STRB     r0,[r4,#0xf]          ;823
000d34  e004              B        |L1.3392|
                  |L1.3382|
000d36  f1b80f11          CMP      r8,#0x11              ;825
000d3a  d001              BEQ      |L1.3392|
000d3c  2008              MOVS     r0,#8                 ;825
000d3e  e738              B        |L1.2994|
                  |L1.3392|
000d40  eb060046          ADD      r0,r6,r6,LSL #1       ;827
000d44  3008              ADDS     r0,r0,#8              ;827
000d46  f8158000          LDRB     r8,[r5,r0]            ;827
000d4a  f1b80f03          CMP      r8,#3                 ;828
000d4e  dd01              BLE      |L1.3412|
000d50  2008              MOVS     r0,#8                 ;828
000d52  e72e              B        |L1.2994|
                  |L1.3412|
000d54  f1040010          ADD      r0,r4,#0x10           ;829
000d58  f8008006          STRB     r8,[r0,r6]            ;829
000d5c  1c76              ADDS     r6,r6,#1              ;818
                  |L1.3422|
000d5e  2e03              CMP      r6,#3                 ;818
000d60  d3d1              BCC      |L1.3334|
000d62  e0ec              B        |L1.3902|
000d64  f5b77f00          CMP      r7,#0x200             ;835
000d68  d901              BLS      |L1.3438|
000d6a  2004              MOVS     r0,#4                 ;835
000d6c  e721              B        |L1.2994|
                  |L1.3438|
000d6e  463a              MOV      r2,r7                 ;836
000d70  4629              MOV      r1,r5                 ;836
000d72  4620              MOV      r0,r4                 ;836
000d74  6f63              LDR      r3,[r4,#0x74]         ;836
000d76  4798              BLX      r3                    ;836
000d78  42b8              CMP      r0,r7                 ;836
000d7a  d001              BEQ      |L1.3456|
000d7c  2002              MOVS     r0,#2                 ;836
000d7e  e718              B        |L1.2994|
                  |L1.3456|
000d80  7868              LDRB     r0,[r5,#1]            ;839
000d82  7829              LDRB     r1,[r5,#0]            ;839
000d84  ea402001          ORR      r0,r0,r1,LSL #8       ;839
000d88  8360              STRH     r0,[r4,#0x1a]         ;839
000d8a  e0d8              B        |L1.3902|
                  |L1.3468|
000d8c  e0cd              B        |L1.3882|
000d8e  f5b77f00          CMP      r7,#0x200             ;844
000d92  d901              BLS      |L1.3480|
000d94  2004              MOVS     r0,#4                 ;844
000d96  e70c              B        |L1.2994|
                  |L1.3480|
000d98  463a              MOV      r2,r7                 ;845
000d9a  4629              MOV      r1,r5                 ;845
000d9c  4620              MOV      r0,r4                 ;845
000d9e  6f63              LDR      r3,[r4,#0x74]         ;845
000da0  4798              BLX      r3                    ;845
000da2  42b8              CMP      r0,r7                 ;845
000da4  d001              BEQ      |L1.3498|
000da6  2002              MOVS     r0,#2                 ;845
000da8  e703              B        |L1.2994|
                  |L1.3498|
000daa  463a              MOV      r2,r7                 ;848
000dac  4629              MOV      r1,r5                 ;848
000dae  4620              MOV      r0,r4                 ;848
000db0  f7fffffe          BL       create_huffman_tbl
000db4  b2c0              UXTB     r0,r0                 ;848
000db6  9001              STR      r0,[sp,#4]            ;848
000db8  9801              LDR      r0,[sp,#4]            ;849
000dba  b108              CBZ      r0,|L1.3520|
000dbc  9801              LDR      r0,[sp,#4]            ;849
000dbe  e6f8              B        |L1.2994|
                  |L1.3520|
000dc0  e0bd              B        |L1.3902|
000dc2  f5b77f00          CMP      r7,#0x200             ;854
000dc6  d901              BLS      |L1.3532|
000dc8  2004              MOVS     r0,#4                 ;854
000dca  e6f2              B        |L1.2994|
                  |L1.3532|
000dcc  463a              MOV      r2,r7                 ;855
000dce  4629              MOV      r1,r5                 ;855
000dd0  4620              MOV      r0,r4                 ;855
000dd2  6f63              LDR      r3,[r4,#0x74]         ;855
000dd4  4798              BLX      r3                    ;855
000dd6  42b8              CMP      r0,r7                 ;855
000dd8  d001              BEQ      |L1.3550|
000dda  2002              MOVS     r0,#2                 ;855
000ddc  e6e9              B        |L1.2994|
                  |L1.3550|
000dde  463a              MOV      r2,r7                 ;858
000de0  4629              MOV      r1,r5                 ;858
000de2  4620              MOV      r0,r4                 ;858
000de4  f7fffffe          BL       create_qt_tbl
000de8  b2c0              UXTB     r0,r0                 ;858
000dea  9001              STR      r0,[sp,#4]            ;858
000dec  9801              LDR      r0,[sp,#4]            ;859
000dee  b108              CBZ      r0,|L1.3572|
000df0  9801              LDR      r0,[sp,#4]            ;859
000df2  e6de              B        |L1.2994|
                  |L1.3572|
000df4  e0a3              B        |L1.3902|
000df6  f5b77f00          CMP      r7,#0x200             ;864
000dfa  d901              BLS      |L1.3584|
000dfc  2004              MOVS     r0,#4                 ;864
000dfe  e6d8              B        |L1.2994|
                  |L1.3584|
000e00  463a              MOV      r2,r7                 ;865
000e02  4629              MOV      r1,r5                 ;865
000e04  4620              MOV      r0,r4                 ;865
000e06  6f63              LDR      r3,[r4,#0x74]         ;865
000e08  4798              BLX      r3                    ;865
000e0a  42b8              CMP      r0,r7                 ;865
000e0c  d001              BEQ      |L1.3602|
000e0e  2002              MOVS     r0,#2                 ;865
000e10  e6cf              B        |L1.2994|
                  |L1.3602|
000e12  69e0              LDR      r0,[r4,#0x1c]         ;867
000e14  b108              CBZ      r0,|L1.3610|
000e16  6a20              LDR      r0,[r4,#0x20]         ;867
000e18  b908              CBNZ     r0,|L1.3614|
                  |L1.3610|
000e1a  2006              MOVS     r0,#6                 ;867
000e1c  e6c9              B        |L1.2994|
                  |L1.3614|
000e1e  7828              LDRB     r0,[r5,#0]            ;869
000e20  2803              CMP      r0,#3                 ;869
000e22  d001              BEQ      |L1.3624|
000e24  2008              MOVS     r0,#8                 ;869
000e26  e6c4              B        |L1.2994|
                  |L1.3624|
000e28  2600              MOVS     r6,#0                 ;872
000e2a  e034              B        |L1.3734|
                  |L1.3628|
000e2c  0070              LSLS     r0,r6,#1              ;873
000e2e  1c80              ADDS     r0,r0,#2              ;873
000e30  f8158000          LDRB     r8,[r5,r0]            ;873
000e34  f1b80f00          CMP      r8,#0                 ;874
000e38  d004              BEQ      |L1.3652|
000e3a  f1b80f11          CMP      r8,#0x11              ;874
000e3e  d001              BEQ      |L1.3652|
000e40  2008              MOVS     r0,#8                 ;874
000e42  e6b6              B        |L1.2994|
                  |L1.3652|
000e44  b10e              CBZ      r6,|L1.3658|
000e46  2001              MOVS     r0,#1                 ;875
000e48  e000              B        |L1.3660|
                  |L1.3658|
000e4a  2000              MOVS     r0,#0                 ;875
                  |L1.3660|
000e4c  4680              MOV      r8,r0                 ;875
000e4e  f1040024          ADD      r0,r4,#0x24           ;876
000e52  f8500038          LDR      r0,[r0,r8,LSL #3]     ;876
000e56  b128              CBZ      r0,|L1.3684|
000e58  f1040024          ADD      r0,r4,#0x24           ;876
000e5c  eb0000c8          ADD      r0,r0,r8,LSL #3       ;876
000e60  6840              LDR      r0,[r0,#4]            ;876
000e62  b908              CBNZ     r0,|L1.3688|
                  |L1.3684|
000e64  2006              MOVS     r0,#6                 ;877
000e66  e6a4              B        |L1.2994|
                  |L1.3688|
000e68  f1040010          ADD      r0,r4,#0x10           ;878
000e6c  5d81              LDRB     r1,[r0,r6]            ;878
000e6e  3044              ADDS     r0,r0,#0x44           ;878
000e70  f8500021          LDR      r0,[r0,r1,LSL #2]     ;878
000e74  b970              CBNZ     r0,|L1.3732|
000e76  2006              MOVS     r0,#6                 ;878
000e78  e69b              B        |L1.2994|
000e7a  e054              B        |L1.3878|
000e7c  e052              B        |L1.3876|
000e7e  e050              B        |L1.3874|
000e80  e04e              B        |L1.3872|
000e82  e04c              B        |L1.3870|
000e84  e04a              B        |L1.3868|
000e86  e048              B        |L1.3866|
000e88  e046              B        |L1.3864|
000e8a  e044              B        |L1.3862|
000e8c  e042              B        |L1.3860|
000e8e  e040              B        |L1.3858|
000e90  e03e              B        |L1.3856|
000e92  e03c              B        |L1.3854|
                  |L1.3732|
000e94  1c76              ADDS     r6,r6,#1              ;872
                  |L1.3734|
000e96  2e03              CMP      r6,#3                 ;872
000e98  d3c8              BCC      |L1.3628|
000e9a  7be0              LDRB     r0,[r4,#0xf]          ;882
000e9c  7ba1              LDRB     r1,[r4,#0xe]          ;882
000e9e  fb00fb01          MUL      r11,r0,r1             ;882
000ea2  f1bb0f00          CMP      r11,#0                ;883
000ea6  d101              BNE      |L1.3756|
000ea8  2006              MOVS     r0,#6                 ;883
000eaa  e682              B        |L1.2994|
                  |L1.3756|
000eac  2140              MOVS     r1,#0x40              ;884
000eae  eb0117cb          ADD      r7,r1,r11,LSL #7      ;884
000eb2  2fff              CMP      r7,#0xff              ;885
000eb4  d800              BHI      |L1.3768|
000eb6  008f              LSLS     r7,r1,#2              ;885
                  |L1.3768|
000eb8  4639              MOV      r1,r7                 ;886
000eba  4620              MOV      r0,r4                 ;886
000ebc  f7fffffe          BL       alloc_pool
000ec0  6660              STR      r0,[r4,#0x64]         ;886
000ec2  6e60              LDR      r0,[r4,#0x64]         ;887
000ec4  b908              CBNZ     r0,|L1.3786|
000ec6  2003              MOVS     r0,#3                 ;887
000ec8  e673              B        |L1.2994|
                  |L1.3786|
000eca  f10b0002          ADD      r0,r11,#2             ;888
000ece  0181              LSLS     r1,r0,#6              ;888
000ed0  4620              MOV      r0,r4                 ;888
000ed2  f7fffffe          BL       alloc_pool
000ed6  66a0              STR      r0,[r4,#0x68]         ;888
000ed8  6ea0              LDR      r0,[r4,#0x68]         ;889
000eda  b908              CBNZ     r0,|L1.3808|
000edc  2003              MOVS     r0,#3                 ;889
000ede  e668              B        |L1.2994|
                  |L1.3808|
000ee0  6065              STR      r5,[r4,#4]            ;892
000ee2  2000              MOVS     r0,#0                 ;892
000ee4  6020              STR      r0,[r4,#0]            ;892
000ee6  7320              STRB     r0,[r4,#0xc]          ;892
000ee8  f3c90008          UBFX     r0,r9,#0,#9           ;893
000eec  ea5f0900          MOVS     r9,r0                 ;893
000ef0  d00b              BEQ      |L1.3850|
000ef2  f5c97200          RSB      r2,r9,#0x200          ;894
000ef6  eb050109          ADD      r1,r5,r9              ;894
000efa  4620              MOV      r0,r4                 ;894
000efc  6f63              LDR      r3,[r4,#0x74]         ;894
000efe  4798              BLX      r3                    ;894
000f00  6020              STR      r0,[r4,#0]            ;894
000f02  eb050009          ADD      r0,r5,r9              ;895
000f06  1e40              SUBS     r0,r0,#1              ;895
000f08  6060              STR      r0,[r4,#4]            ;895
                  |L1.3850|
000f0a  2000              MOVS     r0,#0                 ;898
000f0c  e651              B        |L1.2994|
                  |L1.3854|
000f0e  bf00              NOP                            ;901
                  |L1.3856|
000f10  bf00              NOP                            ;902
                  |L1.3858|
000f12  bf00              NOP                            ;903
                  |L1.3860|
000f14  bf00              NOP                            ;904
                  |L1.3862|
000f16  bf00              NOP                            ;905
                  |L1.3864|
000f18  bf00              NOP                            ;906
                  |L1.3866|
000f1a  bf00              NOP                            ;907
                  |L1.3868|
000f1c  bf00              NOP                            ;908
                  |L1.3870|
000f1e  bf00              NOP                            ;909
                  |L1.3872|
000f20  bf00              NOP                            ;910
                  |L1.3874|
000f22  bf00              NOP                            ;911
                  |L1.3876|
000f24  bf00              NOP                            ;912
                  |L1.3878|
000f26  2008              MOVS     r0,#8                 ;913
000f28  e643              B        |L1.2994|
                  |L1.3882|
000f2a  463a              MOV      r2,r7                 ;917
000f2c  2100              MOVS     r1,#0                 ;917
000f2e  4620              MOV      r0,r4                 ;917
000f30  6f63              LDR      r3,[r4,#0x74]         ;917
000f32  4798              BLX      r3                    ;917
000f34  42b8              CMP      r0,r7                 ;917
000f36  d001              BEQ      |L1.3900|
000f38  2002              MOVS     r0,#2                 ;918
000f3a  e63a              B        |L1.2994|
                  |L1.3900|
000f3c  bf00              NOP                            ;807
                  |L1.3902|
000f3e  e68f              B        |L1.3168|
;;;922    
                          ENDP

                  jd_decomp PROC
;;;929    
;;;930    JRESULT jd_decomp (
000f40  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;931    	JDEC* jd,								/* Initialized decompression object */
;;;932    	UINT (*outfunc)(JDEC*, void*, JRECT*),	/* RGB output function */
;;;933    	BYTE scale								/* Output de-scaling factor (0 to 3) */
;;;934    )
;;;935    {
000f44  b082              SUB      sp,sp,#8
000f46  4604              MOV      r4,r0
000f48  4617              MOV      r7,r2
;;;936    	UINT x, y, mx, my;
;;;937    	WORD rst, rsc;
;;;938    	JRESULT rc;
;;;939    
;;;940    
;;;941    	if (scale > (JD_USE_SCALE ? 3 : 0)) return JDR_PAR;
000f4a  2f03              CMP      r7,#3
000f4c  dd03              BLE      |L1.3926|
000f4e  2005              MOVS     r0,#5
                  |L1.3920|
;;;942    	jd->scale = scale;
;;;943    
;;;944    	mx = jd->msx * 8; my = jd->msy * 8;			/* Size of the MCU (pixel) */
;;;945    
;;;946    	jd->dcv[2] = jd->dcv[1] = jd->dcv[0] = 0;	/* Initialize DC values */
;;;947    	rst = rsc = 0;
;;;948    
;;;949    	rc = JDR_OK;
;;;950    	for (y = 0; y < jd->height; y += my) {		/* Vertical loop of MCUs */
;;;951    		for (x = 0; x < jd->width; x += mx) {	/* Horizontal loop of MCUs */
;;;952    			if (jd->nrst && rst++ == jd->nrst) {	/* Process restart interval if enabled */
;;;953    				rc = restart(jd, rsc++);
;;;954    				if (rc != JDR_OK) return rc;
;;;955    				rst = 1;
;;;956    			}
;;;957    			rc = mcu_load(jd);					/* Load an MCU (decompress huffman coded stream and apply IDCT) */
;;;958    			if (rc != JDR_OK) return rc;
;;;959    			rc = mcu_output(jd, outfunc, x, y);	/* Output the MCU (color space conversion, scaling and output) */
;;;960    			if (rc != JDR_OK) return rc;
;;;961    		}
;;;962    	}
;;;963    
;;;964    	return rc;
;;;965    }
000f50  b005              ADD      sp,sp,#0x14
000f52  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.3926|
000f56  7367              STRB     r7,[r4,#0xd]          ;942
000f58  7ba0              LDRB     r0,[r4,#0xe]          ;944
000f5a  ea4f09c0          LSL      r9,r0,#3              ;944
000f5e  7be0              LDRB     r0,[r4,#0xf]          ;944
000f60  ea4f0ac0          LSL      r10,r0,#3             ;944
000f64  2100              MOVS     r1,#0                 ;946
000f66  82a1              STRH     r1,[r4,#0x14]         ;946
000f68  82e1              STRH     r1,[r4,#0x16]         ;946
000f6a  8321              STRH     r1,[r4,#0x18]         ;946
000f6c  468b              MOV      r11,r1                ;947
000f6e  f8cdb004          STR      r11,[sp,#4]           ;947
000f72  2500              MOVS     r5,#0                 ;949
000f74  2600              MOVS     r6,#0                 ;950
000f76  e02f              B        |L1.4056|
                  |L1.3960|
000f78  f04f0800          MOV      r8,#0                 ;951
000f7c  e028              B        |L1.4048|
                  |L1.3966|
000f7e  8b60              LDRH     r0,[r4,#0x1a]         ;952
000f80  b1a0              CBZ      r0,|L1.4012|
000f82  4658              MOV      r0,r11                ;952
000f84  1c41              ADDS     r1,r0,#1              ;952
000f86  fa1ffb81          UXTH     r11,r1                ;952
000f8a  8b61              LDRH     r1,[r4,#0x1a]         ;952
000f8c  4288              CMP      r0,r1                 ;952
000f8e  d10d              BNE      |L1.4012|
000f90  9801              LDR      r0,[sp,#4]            ;953
000f92  1c42              ADDS     r2,r0,#1              ;953
000f94  b292              UXTH     r2,r2                 ;953
000f96  4601              MOV      r1,r0                 ;953
000f98  4620              MOV      r0,r4                 ;953
000f9a  9201              STR      r2,[sp,#4]            ;953
000f9c  f7fffffe          BL       restart
000fa0  4605              MOV      r5,r0                 ;953
000fa2  b10d              CBZ      r5,|L1.4008|
000fa4  4628              MOV      r0,r5                 ;954
000fa6  e7d3              B        |L1.3920|
                  |L1.4008|
000fa8  f04f0b01          MOV      r11,#1                ;955
                  |L1.4012|
000fac  4620              MOV      r0,r4                 ;957
000fae  f7fffffe          BL       mcu_load
000fb2  4605              MOV      r5,r0                 ;957
000fb4  b10d              CBZ      r5,|L1.4026|
000fb6  4628              MOV      r0,r5                 ;958
000fb8  e7ca              B        |L1.3920|
                  |L1.4026|
000fba  4633              MOV      r3,r6                 ;959
000fbc  4642              MOV      r2,r8                 ;959
000fbe  4620              MOV      r0,r4                 ;959
000fc0  9903              LDR      r1,[sp,#0xc]          ;959
000fc2  f7fffffe          BL       mcu_output
000fc6  4605              MOV      r5,r0                 ;959
000fc8  b10d              CBZ      r5,|L1.4046|
000fca  4628              MOV      r0,r5                 ;960
000fcc  e7c0              B        |L1.3920|
                  |L1.4046|
000fce  44c8              ADD      r8,r8,r9              ;951
                  |L1.4048|
000fd0  69e0              LDR      r0,[r4,#0x1c]         ;951
000fd2  4540              CMP      r0,r8                 ;951
000fd4  d8d3              BHI      |L1.3966|
000fd6  4456              ADD      r6,r6,r10             ;950
                  |L1.4056|
000fd8  6a20              LDR      r0,[r4,#0x20]         ;950
000fda  42b0              CMP      r0,r6                 ;950
000fdc  d8cc              BHI      |L1.3960|
000fde  4628              MOV      r0,r5                 ;964
000fe0  e7b6              B        |L1.3920|
;;;966    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  Zig
000000  00010810          DCB      0x00,0x01,0x08,0x10
000004  0902030a          DCB      0x09,0x02,0x03,0x0a
000008  11182019          DCB      0x11,0x18,0x20,0x19
00000c  120b0405          DCB      0x12,0x0b,0x04,0x05
000010  0c131a21          DCB      0x0c,0x13,0x1a,0x21
000014  28302922          DCB      0x28,0x30,0x29,0x22
000018  1b140d06          DCB      0x1b,0x14,0x0d,0x06
00001c  070e151c          DCB      0x07,0x0e,0x15,0x1c
000020  232a3138          DCB      0x23,0x2a,0x31,0x38
000024  39322b24          DCB      0x39,0x32,0x2b,0x24
000028  1d160f17          DCB      0x1d,0x16,0x0f,0x17
00002c  1e252c33          DCB      0x1e,0x25,0x2c,0x33
000030  3a3b342d          DCB      0x3a,0x3b,0x34,0x2d
000034  261f272e          DCB      0x26,0x1f,0x27,0x2e
000038  353c3d36          DCB      0x35,0x3c,0x3d,0x36
00003c  2f373e3f          DCB      0x2f,0x37,0x3e,0x3f
                  Ipsf
000040  20002c62          DCW      0x2000,0x2c62
000044  29cf25a0          DCW      0x29cf,0x25a0
000048  20001924          DCW      0x2000,0x1924
00004c  115108d4          DCW      0x1151,0x08d4
000050  2c623d90          DCW      0x2c62,0x3d90
000054  39fe3431          DCW      0x39fe,0x3431
000058  2c6222df          DCW      0x2c62,0x22df
00005c  18050c3e          DCW      0x1805,0x0c3e
000060  29cf39fe          DCW      0x29cf,0x39fe
000064  36a03129          DCW      0x36a0,0x3129
000068  29cf20d9          DCW      0x29cf,0x20d9
00006c  16a00b89          DCW      0x16a0,0x0b89
000070  25a03431          DCW      0x25a0,0x3431
000074  31292c3e          DCW      0x3129,0x2c3e
000078  25a01d90          DCW      0x25a0,0x1d90
00007c  145d0a61          DCW      0x145d,0x0a61
000080  20002c62          DCW      0x2000,0x2c62
000084  29cf25a0          DCW      0x29cf,0x25a0
000088  20001924          DCW      0x2000,0x1924
00008c  115108d4          DCW      0x1151,0x08d4
000090  192422df          DCW      0x1924,0x22df
000094  20d91d90          DCW      0x20d9,0x1d90
000098  192413c1          DCW      0x1924,0x13c1
00009c  0d9b06ef          DCW      0x0d9b,0x06ef
0000a0  11511805          DCW      0x1151,0x1805
0000a4  16a0145d          DCW      0x16a0,0x145d
0000a8  11510d9b          DCW      0x1151,0x0d9b
0000ac  095f04c7          DCW      0x095f,0x04c7
0000b0  08d40c3e          DCW      0x08d4,0x0c3e
0000b4  0b890a61          DCW      0x0b89,0x0a61
0000b8  08d406ef          DCW      0x08d4,0x06ef
0000bc  04c7026f          DCW      0x04c7,0x026f
                  Clip8
0000c0  00010203          DCB      0x00,0x01,0x02,0x03
0000c4  04050607          DCB      0x04,0x05,0x06,0x07
0000c8  08090a0b          DCB      0x08,0x09,0x0a,0x0b
0000cc  0c0d0e0f          DCB      0x0c,0x0d,0x0e,0x0f
0000d0  10111213          DCB      0x10,0x11,0x12,0x13
0000d4  14151617          DCB      0x14,0x15,0x16,0x17
0000d8  18191a1b          DCB      0x18,0x19,0x1a,0x1b
0000dc  1c1d1e1f          DCB      0x1c,0x1d,0x1e,0x1f
0000e0  20212223          DCB      0x20,0x21,0x22,0x23
0000e4  24252627          DCB      0x24,0x25,0x26,0x27
0000e8  28292a2b          DCB      0x28,0x29,0x2a,0x2b
0000ec  2c2d2e2f          DCB      0x2c,0x2d,0x2e,0x2f
0000f0  30313233          DCB      0x30,0x31,0x32,0x33
0000f4  34353637          DCB      0x34,0x35,0x36,0x37
0000f8  38393a3b          DCB      0x38,0x39,0x3a,0x3b
0000fc  3c3d3e3f          DCB      0x3c,0x3d,0x3e,0x3f
000100  40414243          DCB      0x40,0x41,0x42,0x43
000104  44454647          DCB      0x44,0x45,0x46,0x47
000108  48494a4b          DCB      0x48,0x49,0x4a,0x4b
00010c  4c4d4e4f          DCB      0x4c,0x4d,0x4e,0x4f
000110  50515253          DCB      0x50,0x51,0x52,0x53
000114  54555657          DCB      0x54,0x55,0x56,0x57
000118  58595a5b          DCB      0x58,0x59,0x5a,0x5b
00011c  5c5d5e5f          DCB      0x5c,0x5d,0x5e,0x5f
000120  60616263          DCB      0x60,0x61,0x62,0x63
000124  64656667          DCB      0x64,0x65,0x66,0x67
000128  68696a6b          DCB      0x68,0x69,0x6a,0x6b
00012c  6c6d6e6f          DCB      0x6c,0x6d,0x6e,0x6f
000130  70717273          DCB      0x70,0x71,0x72,0x73
000134  74757677          DCB      0x74,0x75,0x76,0x77
000138  78797a7b          DCB      0x78,0x79,0x7a,0x7b
00013c  7c7d7e7f          DCB      0x7c,0x7d,0x7e,0x7f
000140  80818283          DCB      0x80,0x81,0x82,0x83
000144  84858687          DCB      0x84,0x85,0x86,0x87
000148  88898a8b          DCB      0x88,0x89,0x8a,0x8b
00014c  8c8d8e8f          DCB      0x8c,0x8d,0x8e,0x8f
000150  90919293          DCB      0x90,0x91,0x92,0x93
000154  94959697          DCB      0x94,0x95,0x96,0x97
000158  98999a9b          DCB      0x98,0x99,0x9a,0x9b
00015c  9c9d9e9f          DCB      0x9c,0x9d,0x9e,0x9f
000160  a0a1a2a3          DCB      0xa0,0xa1,0xa2,0xa3
000164  a4a5a6a7          DCB      0xa4,0xa5,0xa6,0xa7
000168  a8a9aaab          DCB      0xa8,0xa9,0xaa,0xab
00016c  acadaeaf          DCB      0xac,0xad,0xae,0xaf
000170  b0b1b2b3          DCB      0xb0,0xb1,0xb2,0xb3
000174  b4b5b6b7          DCB      0xb4,0xb5,0xb6,0xb7
000178  b8b9babb          DCB      0xb8,0xb9,0xba,0xbb
00017c  bcbdbebf          DCB      0xbc,0xbd,0xbe,0xbf
000180  c0c1c2c3          DCB      0xc0,0xc1,0xc2,0xc3
000184  c4c5c6c7          DCB      0xc4,0xc5,0xc6,0xc7
000188  c8c9cacb          DCB      0xc8,0xc9,0xca,0xcb
00018c  cccdcecf          DCB      0xcc,0xcd,0xce,0xcf
000190  d0d1d2d3          DCB      0xd0,0xd1,0xd2,0xd3
000194  d4d5d6d7          DCB      0xd4,0xd5,0xd6,0xd7
000198  d8d9dadb          DCB      0xd8,0xd9,0xda,0xdb
00019c  dcdddedf          DCB      0xdc,0xdd,0xde,0xdf
0001a0  e0e1e2e3          DCB      0xe0,0xe1,0xe2,0xe3
0001a4  e4e5e6e7          DCB      0xe4,0xe5,0xe6,0xe7
0001a8  e8e9eaeb          DCB      0xe8,0xe9,0xea,0xeb
0001ac  ecedeeef          DCB      0xec,0xed,0xee,0xef
0001b0  f0f1f2f3          DCB      0xf0,0xf1,0xf2,0xf3
0001b4  f4f5f6f7          DCB      0xf4,0xf5,0xf6,0xf7
0001b8  f8f9fafb          DCB      0xf8,0xf9,0xfa,0xfb
0001bc  fcfdfeff          DCB      0xfc,0xfd,0xfe,0xff
0001c0  ffffffff          DCB      0xff,0xff,0xff,0xff
0001c4  ffffffff          DCB      0xff,0xff,0xff,0xff
0001c8  ffffffff          DCB      0xff,0xff,0xff,0xff
0001cc  ffffffff          DCB      0xff,0xff,0xff,0xff
0001d0  ffffffff          DCB      0xff,0xff,0xff,0xff
0001d4  ffffffff          DCB      0xff,0xff,0xff,0xff
0001d8  ffffffff          DCB      0xff,0xff,0xff,0xff
0001dc  ffffffff          DCB      0xff,0xff,0xff,0xff
0001e0  ffffffff          DCB      0xff,0xff,0xff,0xff
0001e4  ffffffff          DCB      0xff,0xff,0xff,0xff
0001e8  ffffffff          DCB      0xff,0xff,0xff,0xff
0001ec  ffffffff          DCB      0xff,0xff,0xff,0xff
0001f0  ffffffff          DCB      0xff,0xff,0xff,0xff
0001f4  ffffffff          DCB      0xff,0xff,0xff,0xff
0001f8  ffffffff          DCB      0xff,0xff,0xff,0xff
0001fc  ffffffff          DCB      0xff,0xff,0xff,0xff
000200  ffffffff          DCB      0xff,0xff,0xff,0xff
000204  ffffffff          DCB      0xff,0xff,0xff,0xff
000208  ffffffff          DCB      0xff,0xff,0xff,0xff
00020c  ffffffff          DCB      0xff,0xff,0xff,0xff
000210  ffffffff          DCB      0xff,0xff,0xff,0xff
000214  ffffffff          DCB      0xff,0xff,0xff,0xff
000218  ffffffff          DCB      0xff,0xff,0xff,0xff
00021c  ffffffff          DCB      0xff,0xff,0xff,0xff
000220  ffffffff          DCB      0xff,0xff,0xff,0xff
000224  ffffffff          DCB      0xff,0xff,0xff,0xff
000228  ffffffff          DCB      0xff,0xff,0xff,0xff
00022c  ffffffff          DCB      0xff,0xff,0xff,0xff
000230  ffffffff          DCB      0xff,0xff,0xff,0xff
000234  ffffffff          DCB      0xff,0xff,0xff,0xff
000238  ffffffff          DCB      0xff,0xff,0xff,0xff
00023c  ffffffff          DCB      0xff,0xff,0xff,0xff
000240  ffffffff          DCB      0xff,0xff,0xff,0xff
000244  ffffffff          DCB      0xff,0xff,0xff,0xff
000248  ffffffff          DCB      0xff,0xff,0xff,0xff
00024c  ffffffff          DCB      0xff,0xff,0xff,0xff
000250  ffffffff          DCB      0xff,0xff,0xff,0xff
000254  ffffffff          DCB      0xff,0xff,0xff,0xff
000258  ffffffff          DCB      0xff,0xff,0xff,0xff
00025c  ffffffff          DCB      0xff,0xff,0xff,0xff
000260  ffffffff          DCB      0xff,0xff,0xff,0xff
000264  ffffffff          DCB      0xff,0xff,0xff,0xff
000268  ffffffff          DCB      0xff,0xff,0xff,0xff
00026c  ffffffff          DCB      0xff,0xff,0xff,0xff
000270  ffffffff          DCB      0xff,0xff,0xff,0xff
000274  ffffffff          DCB      0xff,0xff,0xff,0xff
000278  ffffffff          DCB      0xff,0xff,0xff,0xff
00027c  ffffffff          DCB      0xff,0xff,0xff,0xff
000280  ffffffff          DCB      0xff,0xff,0xff,0xff
000284  ffffffff          DCB      0xff,0xff,0xff,0xff
000288  ffffffff          DCB      0xff,0xff,0xff,0xff
00028c  ffffffff          DCB      0xff,0xff,0xff,0xff
000290  ffffffff          DCB      0xff,0xff,0xff,0xff
000294  ffffffff          DCB      0xff,0xff,0xff,0xff
000298  ffffffff          DCB      0xff,0xff,0xff,0xff
00029c  ffffffff          DCB      0xff,0xff,0xff,0xff
0002a0  ffffffff          DCB      0xff,0xff,0xff,0xff
0002a4  ffffffff          DCB      0xff,0xff,0xff,0xff
0002a8  ffffffff          DCB      0xff,0xff,0xff,0xff
0002ac  ffffffff          DCB      0xff,0xff,0xff,0xff
0002b0  ffffffff          DCB      0xff,0xff,0xff,0xff
0002b4  ffffffff          DCB      0xff,0xff,0xff,0xff
0002b8  ffffffff          DCB      0xff,0xff,0xff,0xff
0002bc  ffffffff          DCB      0xff,0xff,0xff,0xff
0002c0  00000000          DCB      0x00,0x00,0x00,0x00
0002c4  00000000          DCB      0x00,0x00,0x00,0x00
0002c8  00000000          DCB      0x00,0x00,0x00,0x00
0002cc  00000000          DCB      0x00,0x00,0x00,0x00
0002d0  00000000          DCB      0x00,0x00,0x00,0x00
0002d4  00000000          DCB      0x00,0x00,0x00,0x00
0002d8  00000000          DCB      0x00,0x00,0x00,0x00
0002dc  00000000          DCB      0x00,0x00,0x00,0x00
0002e0  00000000          DCB      0x00,0x00,0x00,0x00
0002e4  00000000          DCB      0x00,0x00,0x00,0x00
0002e8  00000000          DCB      0x00,0x00,0x00,0x00
0002ec  00000000          DCB      0x00,0x00,0x00,0x00
0002f0  00000000          DCB      0x00,0x00,0x00,0x00
0002f4  00000000          DCB      0x00,0x00,0x00,0x00
0002f8  00000000          DCB      0x00,0x00,0x00,0x00
0002fc  00000000          DCB      0x00,0x00,0x00,0x00
000300  00000000          DCB      0x00,0x00,0x00,0x00
000304  00000000          DCB      0x00,0x00,0x00,0x00
000308  00000000          DCB      0x00,0x00,0x00,0x00
00030c  00000000          DCB      0x00,0x00,0x00,0x00
000310  00000000          DCB      0x00,0x00,0x00,0x00
000314  00000000          DCB      0x00,0x00,0x00,0x00
000318  00000000          DCB      0x00,0x00,0x00,0x00
00031c  00000000          DCB      0x00,0x00,0x00,0x00
000320  00000000          DCB      0x00,0x00,0x00,0x00
000324  00000000          DCB      0x00,0x00,0x00,0x00
000328  00000000          DCB      0x00,0x00,0x00,0x00
00032c  00000000          DCB      0x00,0x00,0x00,0x00
000330  00000000          DCB      0x00,0x00,0x00,0x00
000334  00000000          DCB      0x00,0x00,0x00,0x00
000338  00000000          DCB      0x00,0x00,0x00,0x00
00033c  00000000          DCB      0x00,0x00,0x00,0x00
000340  00000000          DCB      0x00,0x00,0x00,0x00
000344  00000000          DCB      0x00,0x00,0x00,0x00
000348  00000000          DCB      0x00,0x00,0x00,0x00
00034c  00000000          DCB      0x00,0x00,0x00,0x00
000350  00000000          DCB      0x00,0x00,0x00,0x00
000354  00000000          DCB      0x00,0x00,0x00,0x00
000358  00000000          DCB      0x00,0x00,0x00,0x00
00035c  00000000          DCB      0x00,0x00,0x00,0x00
000360  00000000          DCB      0x00,0x00,0x00,0x00
000364  00000000          DCB      0x00,0x00,0x00,0x00
000368  00000000          DCB      0x00,0x00,0x00,0x00
00036c  00000000          DCB      0x00,0x00,0x00,0x00
000370  00000000          DCB      0x00,0x00,0x00,0x00
000374  00000000          DCB      0x00,0x00,0x00,0x00
000378  00000000          DCB      0x00,0x00,0x00,0x00
00037c  00000000          DCB      0x00,0x00,0x00,0x00
000380  00000000          DCB      0x00,0x00,0x00,0x00
000384  00000000          DCB      0x00,0x00,0x00,0x00
000388  00000000          DCB      0x00,0x00,0x00,0x00
00038c  00000000          DCB      0x00,0x00,0x00,0x00
000390  00000000          DCB      0x00,0x00,0x00,0x00
000394  00000000          DCB      0x00,0x00,0x00,0x00
000398  00000000          DCB      0x00,0x00,0x00,0x00
00039c  00000000          DCB      0x00,0x00,0x00,0x00
0003a0  00000000          DCB      0x00,0x00,0x00,0x00
0003a4  00000000          DCB      0x00,0x00,0x00,0x00
0003a8  00000000          DCB      0x00,0x00,0x00,0x00
0003ac  00000000          DCB      0x00,0x00,0x00,0x00
0003b0  00000000          DCB      0x00,0x00,0x00,0x00
0003b4  00000000          DCB      0x00,0x00,0x00,0x00
0003b8  00000000          DCB      0x00,0x00,0x00,0x00
0003bc  00000000          DCB      0x00,0x00,0x00,0x00
0003c0  00000000          DCB      0x00,0x00,0x00,0x00
0003c4  00000000          DCB      0x00,0x00,0x00,0x00
0003c8  00000000          DCB      0x00,0x00,0x00,0x00
0003cc  00000000          DCB      0x00,0x00,0x00,0x00
0003d0  00000000          DCB      0x00,0x00,0x00,0x00
0003d4  00000000          DCB      0x00,0x00,0x00,0x00
0003d8  00000000          DCB      0x00,0x00,0x00,0x00
0003dc  00000000          DCB      0x00,0x00,0x00,0x00
0003e0  00000000          DCB      0x00,0x00,0x00,0x00
0003e4  00000000          DCB      0x00,0x00,0x00,0x00
0003e8  00000000          DCB      0x00,0x00,0x00,0x00
0003ec  00000000          DCB      0x00,0x00,0x00,0x00
0003f0  00000000          DCB      0x00,0x00,0x00,0x00
0003f4  00000000          DCB      0x00,0x00,0x00,0x00
0003f8  00000000          DCB      0x00,0x00,0x00,0x00
0003fc  00000000          DCB      0x00,0x00,0x00,0x00
000400  00000000          DCB      0x00,0x00,0x00,0x00
000404  00000000          DCB      0x00,0x00,0x00,0x00
000408  00000000          DCB      0x00,0x00,0x00,0x00
00040c  00000000          DCB      0x00,0x00,0x00,0x00
000410  00000000          DCB      0x00,0x00,0x00,0x00
000414  00000000          DCB      0x00,0x00,0x00,0x00
000418  00000000          DCB      0x00,0x00,0x00,0x00
00041c  00000000          DCB      0x00,0x00,0x00,0x00
000420  00000000          DCB      0x00,0x00,0x00,0x00
000424  00000000          DCB      0x00,0x00,0x00,0x00
000428  00000000          DCB      0x00,0x00,0x00,0x00
00042c  00000000          DCB      0x00,0x00,0x00,0x00
000430  00000000          DCB      0x00,0x00,0x00,0x00
000434  00000000          DCB      0x00,0x00,0x00,0x00
000438  00000000          DCB      0x00,0x00,0x00,0x00
00043c  00000000          DCB      0x00,0x00,0x00,0x00
000440  00000000          DCB      0x00,0x00,0x00,0x00
000444  00000000          DCB      0x00,0x00,0x00,0x00
000448  00000000          DCB      0x00,0x00,0x00,0x00
00044c  00000000          DCB      0x00,0x00,0x00,0x00
000450  00000000          DCB      0x00,0x00,0x00,0x00
000454  00000000          DCB      0x00,0x00,0x00,0x00
000458  00000000          DCB      0x00,0x00,0x00,0x00
00045c  00000000          DCB      0x00,0x00,0x00,0x00
000460  00000000          DCB      0x00,0x00,0x00,0x00
000464  00000000          DCB      0x00,0x00,0x00,0x00
000468  00000000          DCB      0x00,0x00,0x00,0x00
00046c  00000000          DCB      0x00,0x00,0x00,0x00
000470  00000000          DCB      0x00,0x00,0x00,0x00
000474  00000000          DCB      0x00,0x00,0x00,0x00
000478  00000000          DCB      0x00,0x00,0x00,0x00
00047c  00000000          DCB      0x00,0x00,0x00,0x00
000480  00000000          DCB      0x00,0x00,0x00,0x00
000484  00000000          DCB      0x00,0x00,0x00,0x00
000488  00000000          DCB      0x00,0x00,0x00,0x00
00048c  00000000          DCB      0x00,0x00,0x00,0x00
000490  00000000          DCB      0x00,0x00,0x00,0x00
000494  00000000          DCB      0x00,0x00,0x00,0x00
000498  00000000          DCB      0x00,0x00,0x00,0x00
00049c  00000000          DCB      0x00,0x00,0x00,0x00
0004a0  00000000          DCB      0x00,0x00,0x00,0x00
0004a4  00000000          DCB      0x00,0x00,0x00,0x00
0004a8  00000000          DCB      0x00,0x00,0x00,0x00
0004ac  00000000          DCB      0x00,0x00,0x00,0x00
0004b0  00000000          DCB      0x00,0x00,0x00,0x00
0004b4  00000000          DCB      0x00,0x00,0x00,0x00
0004b8  00000000          DCB      0x00,0x00,0x00,0x00
0004bc  00000000          DCB      0x00,0x00,0x00,0x00
