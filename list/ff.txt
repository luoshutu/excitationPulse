; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\ff.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\ff.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -IF:\excitationPulse\Ver_F8_·­Ò³\RTE -ID:\Keil_v5\MDK\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\Keil_v5\MDK\ARM\CMSIS\Include -D__UVISION_VERSION=515 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\ff.crf user\ff.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  mem_cpy PROC
;;;529    static
;;;530    void mem_cpy (void* dst, const void* src, UINT cnt) {
000000  b570              PUSH     {r4-r6,lr}
;;;531    	BYTE *d = (BYTE*)dst;
000002  4603              MOV      r3,r0
;;;532    	const BYTE *s = (const BYTE*)src;
000004  460c              MOV      r4,r1
;;;533    
;;;534    #if _WORD_ACCESS == 1
;;;535    	while (cnt >= sizeof (int)) {
;;;536    		*(int*)d = *(int*)s;
;;;537    		d += sizeof (int); s += sizeof (int);
;;;538    		cnt -= sizeof (int);
;;;539    	}
;;;540    #endif
;;;541    	while (cnt--)
000006  e003              B        |L1.16|
                  |L1.8|
;;;542    		*d++ = *s++;
000008  f8145b01          LDRB     r5,[r4],#1
00000c  f8035b01          STRB     r5,[r3],#1
                  |L1.16|
000010  0015              MOVS     r5,r2                 ;541
000012  f1a20201          SUB      r2,r2,#1              ;541
000016  d1f7              BNE      |L1.8|
;;;543    }
000018  bd70              POP      {r4-r6,pc}
;;;544    
                          ENDP

                  mem_set PROC
;;;546    static
;;;547    void mem_set (void* dst, int val, UINT cnt) {
00001a  b530              PUSH     {r4,r5,lr}
;;;548    	BYTE *d = (BYTE*)dst;
00001c  4603              MOV      r3,r0
;;;549    
;;;550    	while (cnt--)
00001e  e001              B        |L1.36|
                  |L1.32|
;;;551    		*d++ = (BYTE)val;
000020  f8031b01          STRB     r1,[r3],#1
                  |L1.36|
000024  0014              MOVS     r4,r2                 ;550
000026  f1a20201          SUB      r2,r2,#1              ;550
00002a  d1f9              BNE      |L1.32|
;;;552    }
00002c  bd30              POP      {r4,r5,pc}
;;;553    
                          ENDP

                  mem_cmp PROC
;;;555    static
;;;556    int mem_cmp (const void* dst, const void* src, UINT cnt) {
00002e  b5f0              PUSH     {r4-r7,lr}
000030  4603              MOV      r3,r0
;;;557    	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
000032  461c              MOV      r4,r3
000034  460d              MOV      r5,r1
;;;558    	int r = 0;
000036  2000              MOVS     r0,#0
;;;559    
;;;560    	while (cnt-- && (r = *d++ - *s++) == 0) ;
000038  bf00              NOP      
                  |L1.58|
00003a  0016              MOVS     r6,r2
00003c  f1a20201          SUB      r2,r2,#1
000040  d007              BEQ      |L1.82|
000042  f8147b01          LDRB     r7,[r4],#1
000046  f815cb01          LDRB     r12,[r5],#1
00004a  eba7060c          SUB      r6,r7,r12
00004e  0030              MOVS     r0,r6
000050  d0f3              BEQ      |L1.58|
                  |L1.82|
;;;561    	return r;
;;;562    }
000052  bdf0              POP      {r4-r7,pc}
;;;563    
                          ENDP

                  chk_chr PROC
;;;565    static
;;;566    int chk_chr (const char* str, int chr) {
000054  4602              MOV      r2,r0
;;;567    	while (*str && *str != chr) str++;
000056  e000              B        |L1.90|
                  |L1.88|
000058  1c52              ADDS     r2,r2,#1
                  |L1.90|
00005a  7810              LDRB     r0,[r2,#0]
00005c  b110              CBZ      r0,|L1.100|
00005e  7810              LDRB     r0,[r2,#0]
000060  4288              CMP      r0,r1
000062  d1f9              BNE      |L1.88|
                  |L1.100|
;;;568    	return *str;
000064  7810              LDRB     r0,[r2,#0]
;;;569    }
000066  4770              BX       lr
;;;570    
                          ENDP

                  move_window PROC
;;;720    static
;;;721    FRESULT move_window (
000068  e92d41f0          PUSH     {r4-r8,lr}
;;;722    	FATFS *fs,		/* File system object */
;;;723    	DWORD sector	/* Sector number to make appearance in the fs->win[] */
;;;724    )					/* Move to zero only writes back dirty window */
;;;725    {
00006c  4604              MOV      r4,r0
00006e  460d              MOV      r5,r1
;;;726    	DWORD wsect;
;;;727    
;;;728    
;;;729    	wsect = fs->winsect;
000070  6ae6              LDR      r6,[r4,#0x2c]
;;;730    	if (wsect != sector) {	/* Changed current window */
000072  42ae              CMP      r6,r5
000074  d02f              BEQ      |L1.214|
;;;731    #if !_FS_READONLY
;;;732    		if (fs->wflag) {	/* Write back dirty window if needed */
000076  7920              LDRB     r0,[r4,#4]
000078  b308              CBZ      r0,|L1.190|
;;;733    			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
00007a  7860              LDRB     r0,[r4,#1]
00007c  2301              MOVS     r3,#1
00007e  4632              MOV      r2,r6
000080  f1040130          ADD      r1,r4,#0x30
000084  f7fffffe          BL       disk_write
000088  b110              CBZ      r0,|L1.144|
;;;734    				return FR_DISK_ERR;
00008a  2001              MOVS     r0,#1
                  |L1.140|
;;;735    			fs->wflag = 0;
;;;736    			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
;;;737    				BYTE nf;
;;;738    				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
;;;739    					wsect += fs->fsize;
;;;740    					disk_write(fs->drv, fs->win, wsect, 1);
;;;741    				}
;;;742    			}
;;;743    		}
;;;744    #endif
;;;745    		if (sector) {
;;;746    			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
;;;747    				return FR_DISK_ERR;
;;;748    			fs->winsect = sector;
;;;749    		}
;;;750    	}
;;;751    
;;;752    	return FR_OK;
;;;753    }
00008c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.144|
000090  2000              MOVS     r0,#0                 ;735
000092  7120              STRB     r0,[r4,#4]            ;735
000094  e9d41007          LDRD     r1,r0,[r4,#0x1c]      ;736
000098  4408              ADD      r0,r0,r1              ;736
00009a  42b0              CMP      r0,r6                 ;736
00009c  d90f              BLS      |L1.190|
00009e  78e7              LDRB     r7,[r4,#3]            ;738
0000a0  e00a              B        |L1.184|
                  |L1.162|
0000a2  69e0              LDR      r0,[r4,#0x1c]         ;739
0000a4  4406              ADD      r6,r6,r0              ;739
0000a6  7860              LDRB     r0,[r4,#1]            ;740
0000a8  2301              MOVS     r3,#1                 ;740
0000aa  4632              MOV      r2,r6                 ;740
0000ac  f1040130          ADD      r1,r4,#0x30           ;740
0000b0  f7fffffe          BL       disk_write
0000b4  1e78              SUBS     r0,r7,#1              ;738
0000b6  b2c7              UXTB     r7,r0                 ;738
                  |L1.184|
0000b8  2f01              CMP      r7,#1                 ;738
0000ba  dcf2              BGT      |L1.162|
0000bc  bf00              NOP                            ;742
                  |L1.190|
0000be  b155              CBZ      r5,|L1.214|
0000c0  7860              LDRB     r0,[r4,#1]            ;746
0000c2  2301              MOVS     r3,#1                 ;746
0000c4  462a              MOV      r2,r5                 ;746
0000c6  f1040130          ADD      r1,r4,#0x30           ;746
0000ca  f7fffffe          BL       disk_read
0000ce  b108              CBZ      r0,|L1.212|
0000d0  2001              MOVS     r0,#1                 ;747
0000d2  e7db              B        |L1.140|
                  |L1.212|
0000d4  62e5              STR      r5,[r4,#0x2c]         ;748
                  |L1.214|
0000d6  2000              MOVS     r0,#0                 ;752
0000d8  e7d8              B        |L1.140|
;;;754    
                          ENDP

                  sync PROC
;;;762    static
;;;763    FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
0000da  b570              PUSH     {r4-r6,lr}
;;;764    	FATFS *fs	/* File system object */
;;;765    )
;;;766    {
0000dc  4604              MOV      r4,r0
;;;767    	FRESULT res;
;;;768    
;;;769    
;;;770    	res = move_window(fs, 0);
0000de  2100              MOVS     r1,#0
0000e0  4620              MOV      r0,r4
0000e2  f7fffffe          BL       move_window
0000e6  4605              MOV      r5,r0
;;;771    	if (res == FR_OK) {
0000e8  2d00              CMP      r5,#0
0000ea  d159              BNE      |L1.416|
;;;772    		/* Update FSInfo sector if needed */
;;;773    		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
0000ec  7820              LDRB     r0,[r4,#0]
0000ee  2803              CMP      r0,#3
0000f0  d14f              BNE      |L1.402|
0000f2  7960              LDRB     r0,[r4,#5]
0000f4  2800              CMP      r0,#0
0000f6  d04c              BEQ      |L1.402|
;;;774    			fs->winsect = 0;
0000f8  2000              MOVS     r0,#0
0000fa  62e0              STR      r0,[r4,#0x2c]
;;;775    			/* Create FSInfo structure */
;;;776    			mem_set(fs->win, 0, 512);
0000fc  f44f7200          MOV      r2,#0x200
000100  2100              MOVS     r1,#0
000102  f1040030          ADD      r0,r4,#0x30
000106  f7fffffe          BL       mem_set
;;;777    			ST_WORD(fs->win+BS_55AA, 0xAA55);
00010a  2155              MOVS     r1,#0x55
00010c  f884122e          STRB     r1,[r4,#0x22e]
000110  21aa              MOVS     r1,#0xaa
000112  f884122f          STRB     r1,[r4,#0x22f]
;;;778    			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
000116  2052              MOVS     r0,#0x52
000118  f8840030          STRB     r0,[r4,#0x30]
00011c  2152              MOVS     r1,#0x52
00011e  2031              MOVS     r0,#0x31
000120  5501              STRB     r1,[r0,r4]
000122  2161              MOVS     r1,#0x61
000124  2032              MOVS     r0,#0x32
000126  5501              STRB     r1,[r0,r4]
000128  2141              MOVS     r1,#0x41
00012a  2033              MOVS     r0,#0x33
00012c  5501              STRB     r1,[r0,r4]
;;;779    			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
00012e  2172              MOVS     r1,#0x72
000130  f8841214          STRB     r1,[r4,#0x214]
000134  f8841215          STRB     r1,[r4,#0x215]
000138  2141              MOVS     r1,#0x41
00013a  f8841216          STRB     r1,[r4,#0x216]
00013e  2161              MOVS     r1,#0x61
000140  f8841217          STRB     r1,[r4,#0x217]
;;;780    			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
000144  7c21              LDRB     r1,[r4,#0x10]
000146  f8841218          STRB     r1,[r4,#0x218]
00014a  8a20              LDRH     r0,[r4,#0x10]
00014c  0a01              LSRS     r1,r0,#8
00014e  f8841219          STRB     r1,[r4,#0x219]
000152  6920              LDR      r0,[r4,#0x10]
000154  0c01              LSRS     r1,r0,#16
000156  f884121a          STRB     r1,[r4,#0x21a]
00015a  6920              LDR      r0,[r4,#0x10]
00015c  0e01              LSRS     r1,r0,#24
00015e  f884121b          STRB     r1,[r4,#0x21b]
;;;781    			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
000162  7b21              LDRB     r1,[r4,#0xc]
000164  f884121c          STRB     r1,[r4,#0x21c]
000168  89a0              LDRH     r0,[r4,#0xc]
00016a  0a01              LSRS     r1,r0,#8
00016c  f884121d          STRB     r1,[r4,#0x21d]
000170  68e0              LDR      r0,[r4,#0xc]
000172  0c01              LSRS     r1,r0,#16
000174  f884121e          STRB     r1,[r4,#0x21e]
000178  68e0              LDR      r0,[r4,#0xc]
00017a  0e01              LSRS     r1,r0,#24
00017c  f884121f          STRB     r1,[r4,#0x21f]
;;;782    			/* Write it into the FSInfo sector */
;;;783    			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
000180  7860              LDRB     r0,[r4,#1]
000182  2301              MOVS     r3,#1
000184  f1040130          ADD      r1,r4,#0x30
000188  6962              LDR      r2,[r4,#0x14]
00018a  f7fffffe          BL       disk_write
;;;784    			fs->fsi_flag = 0;
00018e  2000              MOVS     r0,#0
000190  7160              STRB     r0,[r4,#5]
                  |L1.402|
;;;785    		}
;;;786    		/* Make sure that no pending write process in the physical drive */
;;;787    		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
000192  7860              LDRB     r0,[r4,#1]
000194  2200              MOVS     r2,#0
000196  4611              MOV      r1,r2
000198  f7fffffe          BL       disk_ioctl
00019c  b100              CBZ      r0,|L1.416|
;;;788    			res = FR_DISK_ERR;
00019e  2501              MOVS     r5,#1
                  |L1.416|
;;;789    	}
;;;790    
;;;791    	return res;
0001a0  4628              MOV      r0,r5
;;;792    }
0001a2  bd70              POP      {r4-r6,pc}
;;;793    #endif
                          ENDP

                  clust2sect PROC
;;;802    
;;;803    DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
0001a4  4602              MOV      r2,r0
;;;804    	FATFS *fs,		/* File system object */
;;;805    	DWORD clst		/* Cluster# to be converted */
;;;806    )
;;;807    {
;;;808    	clst -= 2;
0001a6  1e89              SUBS     r1,r1,#2
;;;809    	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
0001a8  6990              LDR      r0,[r2,#0x18]
0001aa  1e80              SUBS     r0,r0,#2
0001ac  4288              CMP      r0,r1
0001ae  d801              BHI      |L1.436|
0001b0  2000              MOVS     r0,#0
                  |L1.434|
;;;810    	return clst * fs->csize + fs->database;
;;;811    }
0001b2  4770              BX       lr
                  |L1.436|
0001b4  7893              LDRB     r3,[r2,#2]            ;810
0001b6  6a90              LDR      r0,[r2,#0x28]         ;810
0001b8  fb010003          MLA      r0,r1,r3,r0           ;810
0001bc  e7f9              B        |L1.434|
;;;812    
                          ENDP

                  get_fat PROC
;;;820    
;;;821    DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
0001be  e92d41f0          PUSH     {r4-r8,lr}
;;;822    	FATFS *fs,	/* File system object */
;;;823    	DWORD clst	/* Cluster# to get the link information */
;;;824    )
;;;825    {
0001c2  4605              MOV      r5,r0
0001c4  460c              MOV      r4,r1
;;;826    	UINT wc, bc;
;;;827    	BYTE *p;
;;;828    
;;;829    
;;;830    	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
0001c6  2c02              CMP      r4,#2
0001c8  d302              BCC      |L1.464|
0001ca  69a8              LDR      r0,[r5,#0x18]
0001cc  42a0              CMP      r0,r4
0001ce  d802              BHI      |L1.470|
                  |L1.464|
;;;831    		return 1;
0001d0  2001              MOVS     r0,#1
                  |L1.466|
;;;832    
;;;833    	switch (fs->fs_type) {
;;;834    	case FS_FAT12 :
;;;835    		bc = (UINT)clst; bc += bc / 2;
;;;836    		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
;;;837    		wc = fs->win[bc % SS(fs)]; bc++;
;;;838    		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
;;;839    		wc |= fs->win[bc % SS(fs)] << 8;
;;;840    		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
;;;841    
;;;842    	case FS_FAT16 :
;;;843    		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
;;;844    		p = &fs->win[clst * 2 % SS(fs)];
;;;845    		return LD_WORD(p);
;;;846    
;;;847    	case FS_FAT32 :
;;;848    		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
;;;849    		p = &fs->win[clst * 4 % SS(fs)];
;;;850    		return LD_DWORD(p) & 0x0FFFFFFF;
;;;851    	}
;;;852    
;;;853    	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
;;;854    }
0001d2  e8bd81f0          POP      {r4-r8,pc}
                  |L1.470|
0001d6  7828              LDRB     r0,[r5,#0]            ;833
0001d8  2801              CMP      r0,#1                 ;833
0001da  d004              BEQ      |L1.486|
0001dc  2802              CMP      r0,#2                 ;833
0001de  d02c              BEQ      |L1.570|
0001e0  2803              CMP      r0,#3                 ;833
0001e2  d15a              BNE      |L1.666|
0001e4  e03d              B        |L1.610|
                  |L1.486|
0001e6  4627              MOV      r7,r4                 ;835
0001e8  eb070757          ADD      r7,r7,r7,LSR #1       ;835
0001ec  6a28              LDR      r0,[r5,#0x20]         ;836
0001ee  eb002157          ADD      r1,r0,r7,LSR #9       ;836
0001f2  4628              MOV      r0,r5                 ;836
0001f4  f7fffffe          BL       move_window
0001f8  b100              CBZ      r0,|L1.508|
0001fa  e04e              B        |L1.666|
                  |L1.508|
0001fc  f3c70108          UBFX     r1,r7,#0,#9           ;837
000200  f1050030          ADD      r0,r5,#0x30           ;837
000204  f8108001          LDRB     r8,[r0,r1]            ;837
000208  1c7f              ADDS     r7,r7,#1              ;837
00020a  6a28              LDR      r0,[r5,#0x20]         ;838
00020c  eb002157          ADD      r1,r0,r7,LSR #9       ;838
000210  4628              MOV      r0,r5                 ;838
000212  f7fffffe          BL       move_window
000216  b100              CBZ      r0,|L1.538|
000218  e03f              B        |L1.666|
                  |L1.538|
00021a  f3c70108          UBFX     r1,r7,#0,#9           ;839
00021e  f1050030          ADD      r0,r5,#0x30           ;839
000222  5c40              LDRB     r0,[r0,r1]            ;839
000224  ea482800          ORR      r8,r8,r0,LSL #8       ;839
000228  f0040001          AND      r0,r4,#1              ;840
00022c  b110              CBZ      r0,|L1.564|
00022e  ea4f1018          LSR      r0,r8,#4              ;840
000232  e7ce              B        |L1.466|
                  |L1.564|
000234  f3c8000b          UBFX     r0,r8,#0,#12          ;840
000238  e7cb              B        |L1.466|
                  |L1.570|
00023a  6a28              LDR      r0,[r5,#0x20]         ;843
00023c  eb002114          ADD      r1,r0,r4,LSR #8       ;843
000240  4628              MOV      r0,r5                 ;843
000242  f7fffffe          BL       move_window
000246  b100              CBZ      r0,|L1.586|
000248  e027              B        |L1.666|
                  |L1.586|
00024a  f24010ff          MOV      r0,#0x1ff             ;844
00024e  ea000144          AND      r1,r0,r4,LSL #1       ;844
000252  f1050030          ADD      r0,r5,#0x30           ;844
000256  180e              ADDS     r6,r1,r0              ;844
000258  7830              LDRB     r0,[r6,#0]            ;845
00025a  7871              LDRB     r1,[r6,#1]            ;845
00025c  ea402001          ORR      r0,r0,r1,LSL #8       ;845
000260  e7b7              B        |L1.466|
                  |L1.610|
000262  6a28              LDR      r0,[r5,#0x20]         ;848
000264  eb0011d4          ADD      r1,r0,r4,LSR #7       ;848
000268  4628              MOV      r0,r5                 ;848
00026a  f7fffffe          BL       move_window
00026e  b100              CBZ      r0,|L1.626|
000270  e013              B        |L1.666|
                  |L1.626|
000272  f24010ff          MOV      r0,#0x1ff             ;849
000276  ea000184          AND      r1,r0,r4,LSL #2       ;849
00027a  f1050030          ADD      r0,r5,#0x30           ;849
00027e  180e              ADDS     r6,r1,r0              ;849
000280  78f0              LDRB     r0,[r6,#3]            ;850
000282  0600              LSLS     r0,r0,#24             ;850
000284  78b1              LDRB     r1,[r6,#2]            ;850
000286  ea404001          ORR      r0,r0,r1,LSL #16      ;850
00028a  7871              LDRB     r1,[r6,#1]            ;850
00028c  ea402001          ORR      r0,r0,r1,LSL #8       ;850
000290  7831              LDRB     r1,[r6,#0]            ;850
000292  4308              ORRS     r0,r0,r1              ;850
000294  f0204070          BIC      r0,r0,#0xf0000000     ;850
000298  e79b              B        |L1.466|
                  |L1.666|
00029a  bf00              NOP                            ;836
00029c  f04f30ff          MOV      r0,#0xffffffff        ;853
0002a0  e797              B        |L1.466|
;;;855    
                          ENDP

                  put_fat PROC
;;;863    
;;;864    FRESULT put_fat (
0002a2  e92d47f0          PUSH     {r4-r10,lr}
;;;865    	FATFS *fs,	/* File system object */
;;;866    	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
;;;867    	DWORD val	/* New value to mark the cluster */
;;;868    )
;;;869    {
0002a6  4605              MOV      r5,r0
0002a8  460e              MOV      r6,r1
0002aa  4617              MOV      r7,r2
;;;870    	UINT bc;
;;;871    	BYTE *p;
;;;872    	FRESULT res;
;;;873    
;;;874    
;;;875    	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
0002ac  2e02              CMP      r6,#2
0002ae  d302              BCC      |L1.694|
0002b0  69a8              LDR      r0,[r5,#0x18]
0002b2  42b0              CMP      r0,r6
0002b4  d802              BHI      |L1.700|
                  |L1.694|
;;;876    		res = FR_INT_ERR;
0002b6  f04f0802          MOV      r8,#2
0002ba  e08a              B        |L1.978|
                  |L1.700|
;;;877    
;;;878    	} else {
;;;879    		switch (fs->fs_type) {
0002bc  7828              LDRB     r0,[r5,#0]
0002be  2801              CMP      r0,#1
0002c0  d004              BEQ      |L1.716|
0002c2  2802              CMP      r0,#2
0002c4  d041              BEQ      |L1.842|
0002c6  2803              CMP      r0,#3
0002c8  d17d              BNE      |L1.966|
0002ca  e054              B        |L1.886|
                  |L1.716|
;;;880    		case FS_FAT12 :
;;;881    			bc = (UINT)clst; bc += bc / 2;
0002cc  46b1              MOV      r9,r6
0002ce  eb090959          ADD      r9,r9,r9,LSR #1
;;;882    			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
0002d2  6a28              LDR      r0,[r5,#0x20]
0002d4  eb002159          ADD      r1,r0,r9,LSR #9
0002d8  4628              MOV      r0,r5
0002da  f7fffffe          BL       move_window
0002de  4680              MOV      r8,r0
;;;883    			if (res != FR_OK) break;
0002e0  f1b80f00          CMP      r8,#0
0002e4  d000              BEQ      |L1.744|
0002e6  e071              B        |L1.972|
                  |L1.744|
;;;884    			p = &fs->win[bc % SS(fs)];
0002e8  f3c90108          UBFX     r1,r9,#0,#9
0002ec  f1050030          ADD      r0,r5,#0x30
0002f0  180c              ADDS     r4,r1,r0
;;;885    			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
0002f2  f0060001          AND      r0,r6,#1
0002f6  b120              CBZ      r0,|L1.770|
0002f8  b2f9              UXTB     r1,r7
0002fa  7820              LDRB     r0,[r4,#0]
0002fc  f361101f          BFI      r0,r1,#4,#28
000300  e000              B        |L1.772|
                  |L1.770|
000302  4638              MOV      r0,r7
                  |L1.772|
000304  7020              STRB     r0,[r4,#0]
;;;886    			bc++;
000306  f1090901          ADD      r9,r9,#1
;;;887    			fs->wflag = 1;
00030a  2001              MOVS     r0,#1
00030c  7128              STRB     r0,[r5,#4]
;;;888    			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
00030e  6a28              LDR      r0,[r5,#0x20]
000310  eb002159          ADD      r1,r0,r9,LSR #9
000314  4628              MOV      r0,r5
000316  f7fffffe          BL       move_window
00031a  4680              MOV      r8,r0
;;;889    			if (res != FR_OK) break;
00031c  f1b80f00          CMP      r8,#0
000320  d000              BEQ      |L1.804|
000322  e053              B        |L1.972|
                  |L1.804|
;;;890    			p = &fs->win[bc % SS(fs)];
000324  f3c90108          UBFX     r1,r9,#0,#9
000328  f1050030          ADD      r0,r5,#0x30
00032c  180c              ADDS     r4,r1,r0
;;;891    			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
00032e  f0060001          AND      r0,r6,#1
000332  b110              CBZ      r0,|L1.826|
000334  f3c71007          UBFX     r0,r7,#4,#8
000338  e005              B        |L1.838|
                  |L1.826|
00033a  7820              LDRB     r0,[r4,#0]
00033c  f00000f0          AND      r0,r0,#0xf0
000340  f3c72103          UBFX     r1,r7,#8,#4
000344  4308              ORRS     r0,r0,r1
                  |L1.838|
000346  7020              STRB     r0,[r4,#0]
;;;892    			break;
000348  e040              B        |L1.972|
                  |L1.842|
;;;893    
;;;894    		case FS_FAT16 :
;;;895    			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
00034a  6a28              LDR      r0,[r5,#0x20]
00034c  eb002116          ADD      r1,r0,r6,LSR #8
000350  4628              MOV      r0,r5
000352  f7fffffe          BL       move_window
000356  4680              MOV      r8,r0
;;;896    			if (res != FR_OK) break;
000358  f1b80f00          CMP      r8,#0
00035c  d000              BEQ      |L1.864|
00035e  e035              B        |L1.972|
                  |L1.864|
;;;897    			p = &fs->win[clst * 2 % SS(fs)];
000360  f24010ff          MOV      r0,#0x1ff
000364  ea000146          AND      r1,r0,r6,LSL #1
000368  f1050030          ADD      r0,r5,#0x30
00036c  180c              ADDS     r4,r1,r0
;;;898    			ST_WORD(p, (WORD)val);
00036e  7027              STRB     r7,[r4,#0]
000370  0a38              LSRS     r0,r7,#8
000372  7060              STRB     r0,[r4,#1]
;;;899    			break;
000374  e02a              B        |L1.972|
                  |L1.886|
;;;900    
;;;901    		case FS_FAT32 :
;;;902    			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
000376  6a28              LDR      r0,[r5,#0x20]
000378  eb0011d6          ADD      r1,r0,r6,LSR #7
00037c  4628              MOV      r0,r5
00037e  f7fffffe          BL       move_window
000382  4680              MOV      r8,r0
;;;903    			if (res != FR_OK) break;
000384  f1b80f00          CMP      r8,#0
000388  d000              BEQ      |L1.908|
00038a  e01f              B        |L1.972|
                  |L1.908|
;;;904    			p = &fs->win[clst * 4 % SS(fs)];
00038c  f24010ff          MOV      r0,#0x1ff
000390  ea000186          AND      r1,r0,r6,LSL #2
000394  f1050030          ADD      r0,r5,#0x30
000398  180c              ADDS     r4,r1,r0
;;;905    			val |= LD_DWORD(p) & 0xF0000000;
00039a  78e0              LDRB     r0,[r4,#3]
00039c  0600              LSLS     r0,r0,#24
00039e  78a1              LDRB     r1,[r4,#2]
0003a0  ea404001          ORR      r0,r0,r1,LSL #16
0003a4  7861              LDRB     r1,[r4,#1]
0003a6  ea402001          ORR      r0,r0,r1,LSL #8
0003aa  7821              LDRB     r1,[r4,#0]
0003ac  4308              ORRS     r0,r0,r1
0003ae  f0004070          AND      r0,r0,#0xf0000000
0003b2  4307              ORRS     r7,r7,r0
;;;906    			ST_DWORD(p, val);
0003b4  7027              STRB     r7,[r4,#0]
0003b6  0a38              LSRS     r0,r7,#8
0003b8  7060              STRB     r0,[r4,#1]
0003ba  0c38              LSRS     r0,r7,#16
0003bc  70a0              STRB     r0,[r4,#2]
0003be  0e38              LSRS     r0,r7,#24
0003c0  70e0              STRB     r0,[r4,#3]
;;;907    			break;
0003c2  e003              B        |L1.972|
0003c4  e7ff              B        |L1.966|
                  |L1.966|
;;;908    
;;;909    		default :
;;;910    			res = FR_INT_ERR;
0003c6  f04f0802          MOV      r8,#2
0003ca  bf00              NOP                            ;879
                  |L1.972|
0003cc  bf00              NOP                            ;883
;;;911    		}
;;;912    		fs->wflag = 1;
0003ce  2001              MOVS     r0,#1
0003d0  7128              STRB     r0,[r5,#4]
                  |L1.978|
;;;913    	}
;;;914    
;;;915    	return res;
0003d2  4640              MOV      r0,r8
;;;916    }
0003d4  e8bd87f0          POP      {r4-r10,pc}
;;;917    #endif /* !_FS_READONLY */
                          ENDP

                  remove_chain PROC
;;;926    static
;;;927    FRESULT remove_chain (
0003d8  e92d41f0          PUSH     {r4-r8,lr}
;;;928    	FATFS *fs,			/* File system object */
;;;929    	DWORD clst			/* Cluster# to remove a chain from */
;;;930    )
;;;931    {
0003dc  4604              MOV      r4,r0
0003de  460e              MOV      r6,r1
;;;932    	FRESULT res;
;;;933    	DWORD nxt;
;;;934    #if _USE_ERASE
;;;935    	DWORD scl = clst, ecl = clst, rt[2];
;;;936    #endif
;;;937    
;;;938    	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
0003e0  2e02              CMP      r6,#2
0003e2  d302              BCC      |L1.1002|
0003e4  69a0              LDR      r0,[r4,#0x18]
0003e6  42b0              CMP      r0,r6
0003e8  d801              BHI      |L1.1006|
                  |L1.1002|
;;;939    		res = FR_INT_ERR;
0003ea  2702              MOVS     r7,#2
0003ec  e025              B        |L1.1082|
                  |L1.1006|
;;;940    
;;;941    	} else {
;;;942    		res = FR_OK;
0003ee  2700              MOVS     r7,#0
;;;943    		while (clst < fs->n_fatent) {			/* Not a last link? */
0003f0  e01f              B        |L1.1074|
                  |L1.1010|
;;;944    			nxt = get_fat(fs, clst);			/* Get cluster status */
0003f2  4631              MOV      r1,r6
0003f4  4620              MOV      r0,r4
0003f6  f7fffffe          BL       get_fat
0003fa  4605              MOV      r5,r0
;;;945    			if (nxt == 0) break;				/* Empty cluster? */
0003fc  b905              CBNZ     r5,|L1.1024|
0003fe  e01b              B        |L1.1080|
                  |L1.1024|
;;;946    			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
000400  2d01              CMP      r5,#1
000402  d101              BNE      |L1.1032|
000404  2702              MOVS     r7,#2
000406  e017              B        |L1.1080|
                  |L1.1032|
;;;947    			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
000408  1c68              ADDS     r0,r5,#1
00040a  b908              CBNZ     r0,|L1.1040|
00040c  2701              MOVS     r7,#1
00040e  e013              B        |L1.1080|
                  |L1.1040|
;;;948    			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
000410  2200              MOVS     r2,#0
000412  4631              MOV      r1,r6
000414  4620              MOV      r0,r4
000416  f7fffffe          BL       put_fat
00041a  4607              MOV      r7,r0
;;;949    			if (res != FR_OK) break;
00041c  b107              CBZ      r7,|L1.1056|
00041e  e00b              B        |L1.1080|
                  |L1.1056|
;;;950    			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
000420  6920              LDR      r0,[r4,#0x10]
000422  1c40              ADDS     r0,r0,#1
000424  b120              CBZ      r0,|L1.1072|
;;;951    				fs->free_clust++;
000426  6920              LDR      r0,[r4,#0x10]
000428  1c40              ADDS     r0,r0,#1
00042a  6120              STR      r0,[r4,#0x10]
;;;952    				fs->fsi_flag = 1;
00042c  2001              MOVS     r0,#1
00042e  7160              STRB     r0,[r4,#5]
                  |L1.1072|
;;;953    			}
;;;954    #if _USE_ERASE
;;;955    			if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
;;;956    				ecl = nxt;
;;;957    			} else {				/* End of contiguous clusters */ 
;;;958    				rt[0] = clust2sect(fs, scl);					/* Start sector */
;;;959    				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
;;;960    				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, rt);		/* Erase the block */
;;;961    				scl = ecl = nxt;
;;;962    			}
;;;963    #endif
;;;964    			clst = nxt;	/* Next cluster */
000430  462e              MOV      r6,r5
                  |L1.1074|
000432  69a0              LDR      r0,[r4,#0x18]         ;943
000434  42b0              CMP      r0,r6                 ;943
000436  d8dc              BHI      |L1.1010|
                  |L1.1080|
000438  bf00              NOP                            ;945
                  |L1.1082|
;;;965    		}
;;;966    	}
;;;967    
;;;968    	return res;
00043a  4638              MOV      r0,r7
;;;969    }
00043c  e8bd81f0          POP      {r4-r8,pc}
;;;970    #endif
                          ENDP

                  create_chain PROC
;;;979    static
;;;980    DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
000440  e92d47f0          PUSH     {r4-r10,lr}
;;;981    	FATFS *fs,			/* File system object */
;;;982    	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
;;;983    )
;;;984    {
000444  4604              MOV      r4,r0
000446  4689              MOV      r9,r1
;;;985    	DWORD cs, ncl, scl;
;;;986    	FRESULT res;
;;;987    
;;;988    
;;;989    	if (clst == 0) {		/* Create a new chain */
000448  f1b90f00          CMP      r9,#0
00044c  d106              BNE      |L1.1116|
;;;990    		scl = fs->last_clust;			/* Get suggested start point */
00044e  68e7              LDR      r7,[r4,#0xc]
;;;991    		if (!scl || scl >= fs->n_fatent) scl = 1;
000450  b117              CBZ      r7,|L1.1112|
000452  69a0              LDR      r0,[r4,#0x18]
000454  42b8              CMP      r0,r7
000456  d811              BHI      |L1.1148|
                  |L1.1112|
000458  2701              MOVS     r7,#1
00045a  e00f              B        |L1.1148|
                  |L1.1116|
;;;992    	}
;;;993    	else {					/* Stretch the current chain */
;;;994    		cs = get_fat(fs, clst);			/* Check the cluster status */
00045c  4649              MOV      r1,r9
00045e  4620              MOV      r0,r4
000460  f7fffffe          BL       get_fat
000464  4606              MOV      r6,r0
;;;995    		if (cs < 2) return 1;			/* It is an invalid cluster */
000466  2e02              CMP      r6,#2
000468  d202              BCS      |L1.1136|
00046a  2001              MOVS     r0,#1
                  |L1.1132|
;;;996    		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
;;;997    		scl = clst;
;;;998    	}
;;;999    
;;;1000   	ncl = scl;				/* Start cluster */
;;;1001   	for (;;) {
;;;1002   		ncl++;							/* Next cluster */
;;;1003   		if (ncl >= fs->n_fatent) {		/* Wrap around */
;;;1004   			ncl = 2;
;;;1005   			if (ncl > scl) return 0;	/* No free cluster */
;;;1006   		}
;;;1007   		cs = get_fat(fs, ncl);			/* Get the cluster status */
;;;1008   		if (cs == 0) break;				/* Found a free cluster */
;;;1009   		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
;;;1010   			return cs;
;;;1011   		if (ncl == scl) return 0;		/* No free cluster */
;;;1012   	}
;;;1013   
;;;1014   	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
;;;1015   	if (res == FR_OK && clst != 0) {
;;;1016   		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
;;;1017   	}
;;;1018   	if (res == FR_OK) {
;;;1019   		fs->last_clust = ncl;			/* Update FSINFO */
;;;1020   		if (fs->free_clust != 0xFFFFFFFF) {
;;;1021   			fs->free_clust--;
;;;1022   			fs->fsi_flag = 1;
;;;1023   		}
;;;1024   	} else {
;;;1025   		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
;;;1026   	}
;;;1027   
;;;1028   	return ncl;		/* Return new cluster number or error code */
;;;1029   }
00046c  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1136|
000470  69a0              LDR      r0,[r4,#0x18]         ;996
000472  42b0              CMP      r0,r6                 ;996
000474  d901              BLS      |L1.1146|
000476  4630              MOV      r0,r6                 ;996
000478  e7f8              B        |L1.1132|
                  |L1.1146|
00047a  464f              MOV      r7,r9                 ;997
                  |L1.1148|
00047c  463d              MOV      r5,r7                 ;1000
00047e  bf00              NOP                            ;1001
                  |L1.1152|
000480  1c6d              ADDS     r5,r5,#1              ;1002
000482  69a0              LDR      r0,[r4,#0x18]         ;1003
000484  42a8              CMP      r0,r5                 ;1003
000486  d804              BHI      |L1.1170|
000488  2502              MOVS     r5,#2                 ;1004
00048a  42bd              CMP      r5,r7                 ;1005
00048c  d901              BLS      |L1.1170|
00048e  2000              MOVS     r0,#0                 ;1005
000490  e7ec              B        |L1.1132|
                  |L1.1170|
000492  4629              MOV      r1,r5                 ;1007
000494  4620              MOV      r0,r4                 ;1007
000496  f7fffffe          BL       get_fat
00049a  4606              MOV      r6,r0                 ;1007
00049c  b906              CBNZ     r6,|L1.1184|
00049e  e009              B        |L1.1204|
                  |L1.1184|
0004a0  1c70              ADDS     r0,r6,#1              ;1009
0004a2  b108              CBZ      r0,|L1.1192|
0004a4  2e01              CMP      r6,#1                 ;1009
0004a6  d101              BNE      |L1.1196|
                  |L1.1192|
0004a8  4630              MOV      r0,r6                 ;1010
0004aa  e7df              B        |L1.1132|
                  |L1.1196|
0004ac  42bd              CMP      r5,r7                 ;1011
0004ae  d1e7              BNE      |L1.1152|
0004b0  2000              MOVS     r0,#0                 ;1011
0004b2  e7db              B        |L1.1132|
                  |L1.1204|
0004b4  bf00              NOP                            ;1008
0004b6  f06f4270          MVN      r2,#0xf0000000        ;1014
0004ba  4629              MOV      r1,r5                 ;1014
0004bc  4620              MOV      r0,r4                 ;1014
0004be  f7fffffe          BL       put_fat
0004c2  4680              MOV      r8,r0                 ;1014
0004c4  f1b80f00          CMP      r8,#0                 ;1015
0004c8  d108              BNE      |L1.1244|
0004ca  f1b90f00          CMP      r9,#0                 ;1015
0004ce  d005              BEQ      |L1.1244|
0004d0  462a              MOV      r2,r5                 ;1016
0004d2  4649              MOV      r1,r9                 ;1016
0004d4  4620              MOV      r0,r4                 ;1016
0004d6  f7fffffe          BL       put_fat
0004da  4680              MOV      r8,r0                 ;1016
                  |L1.1244|
0004dc  f1b80f00          CMP      r8,#0                 ;1018
0004e0  d109              BNE      |L1.1270|
0004e2  60e5              STR      r5,[r4,#0xc]          ;1019
0004e4  6920              LDR      r0,[r4,#0x10]         ;1020
0004e6  1c40              ADDS     r0,r0,#1              ;1020
0004e8  b168              CBZ      r0,|L1.1286|
0004ea  6920              LDR      r0,[r4,#0x10]         ;1021
0004ec  1e40              SUBS     r0,r0,#1              ;1021
0004ee  6120              STR      r0,[r4,#0x10]         ;1021
0004f0  2001              MOVS     r0,#1                 ;1022
0004f2  7160              STRB     r0,[r4,#5]            ;1022
0004f4  e007              B        |L1.1286|
                  |L1.1270|
0004f6  f1b80f01          CMP      r8,#1                 ;1025
0004fa  d102              BNE      |L1.1282|
0004fc  f04f30ff          MOV      r0,#0xffffffff        ;1025
000500  e000              B        |L1.1284|
                  |L1.1282|
000502  2001              MOVS     r0,#1                 ;1025
                  |L1.1284|
000504  4605              MOV      r5,r0                 ;1025
                  |L1.1286|
000506  4628              MOV      r0,r5                 ;1028
000508  e7b0              B        |L1.1132|
;;;1030   #endif /* !_FS_READONLY */
                          ENDP

                  dir_sdi PROC
;;;1066   static
;;;1067   FRESULT dir_sdi (
00050a  e92d41f0          PUSH     {r4-r8,lr}
;;;1068   	DIR *dj,		/* Pointer to directory object */
;;;1069   	WORD idx		/* Index of directory table */
;;;1070   )
;;;1071   {
00050e  4604              MOV      r4,r0
000510  460e              MOV      r6,r1
;;;1072   	DWORD clst;
;;;1073   	WORD ic;
;;;1074   
;;;1075   
;;;1076   	dj->index = idx;
000512  80e6              STRH     r6,[r4,#6]
;;;1077   	clst = dj->sclust;
000514  68a5              LDR      r5,[r4,#8]
;;;1078   	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
000516  2d01              CMP      r5,#1
000518  d003              BEQ      |L1.1314|
00051a  6820              LDR      r0,[r4,#0]
00051c  6980              LDR      r0,[r0,#0x18]
00051e  42a8              CMP      r0,r5
000520  d802              BHI      |L1.1320|
                  |L1.1314|
;;;1079   		return FR_INT_ERR;
000522  2002              MOVS     r0,#2
                  |L1.1316|
;;;1080   	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
;;;1081   		clst = dj->fs->dirbase;
;;;1082   
;;;1083   	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
;;;1084   		dj->clust = clst;
;;;1085   		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
;;;1086   			return FR_INT_ERR;
;;;1087   		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
;;;1088   	}
;;;1089   	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
;;;1090   		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
;;;1091   		while (idx >= ic) {	/* Follow cluster chain */
;;;1092   			clst = get_fat(dj->fs, clst);				/* Get next cluster */
;;;1093   			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
;;;1094   			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
;;;1095   				return FR_INT_ERR;
;;;1096   			idx -= ic;
;;;1097   		}
;;;1098   		dj->clust = clst;
;;;1099   		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
;;;1100   	}
;;;1101   
;;;1102   	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
;;;1103   
;;;1104   	return FR_OK;	/* Seek succeeded */
;;;1105   }
000524  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1320|
000528  b92d              CBNZ     r5,|L1.1334|
00052a  6820              LDR      r0,[r4,#0]            ;1080
00052c  7800              LDRB     r0,[r0,#0]            ;1080
00052e  2803              CMP      r0,#3                 ;1080
000530  d101              BNE      |L1.1334|
000532  6820              LDR      r0,[r4,#0]            ;1081
000534  6a45              LDR      r5,[r0,#0x24]         ;1081
                  |L1.1334|
000536  b965              CBNZ     r5,|L1.1362|
000538  60e5              STR      r5,[r4,#0xc]          ;1084
00053a  6820              LDR      r0,[r4,#0]            ;1085
00053c  8900              LDRH     r0,[r0,#8]            ;1085
00053e  42b0              CMP      r0,r6                 ;1085
000540  dc01              BGT      |L1.1350|
000542  2002              MOVS     r0,#2                 ;1086
000544  e7ee              B        |L1.1316|
                  |L1.1350|
000546  6820              LDR      r0,[r4,#0]            ;1087
000548  6a40              LDR      r0,[r0,#0x24]         ;1087
00054a  eb001016          ADD      r0,r0,r6,LSR #4       ;1087
00054e  6120              STR      r0,[r4,#0x10]         ;1087
000550  e020              B        |L1.1428|
                  |L1.1362|
000552  6820              LDR      r0,[r4,#0]            ;1090
000554  7880              LDRB     r0,[r0,#2]            ;1090
000556  0107              LSLS     r7,r0,#4              ;1090
000558  e012              B        |L1.1408|
                  |L1.1370|
00055a  4629              MOV      r1,r5                 ;1092
00055c  6820              LDR      r0,[r4,#0]            ;1092
00055e  f7fffffe          BL       get_fat
000562  4605              MOV      r5,r0                 ;1092
000564  1c68              ADDS     r0,r5,#1              ;1093
000566  b908              CBNZ     r0,|L1.1388|
000568  2001              MOVS     r0,#1                 ;1093
00056a  e7db              B        |L1.1316|
                  |L1.1388|
00056c  2d02              CMP      r5,#2                 ;1094
00056e  d303              BCC      |L1.1400|
000570  6820              LDR      r0,[r4,#0]            ;1094
000572  6980              LDR      r0,[r0,#0x18]         ;1094
000574  42a8              CMP      r0,r5                 ;1094
000576  d801              BHI      |L1.1404|
                  |L1.1400|
000578  2002              MOVS     r0,#2                 ;1095
00057a  e7d3              B        |L1.1316|
                  |L1.1404|
00057c  1bf0              SUBS     r0,r6,r7              ;1096
00057e  b286              UXTH     r6,r0                 ;1096
                  |L1.1408|
000580  42be              CMP      r6,r7                 ;1091
000582  daea              BGE      |L1.1370|
000584  60e5              STR      r5,[r4,#0xc]          ;1098
000586  4629              MOV      r1,r5                 ;1099
000588  6820              LDR      r0,[r4,#0]            ;1099
00058a  f7fffffe          BL       clust2sect
00058e  eb001016          ADD      r0,r0,r6,LSR #4       ;1099
000592  6120              STR      r0,[r4,#0x10]         ;1099
                  |L1.1428|
000594  6820              LDR      r0,[r4,#0]            ;1102
000596  3030              ADDS     r0,r0,#0x30           ;1102
000598  f006010f          AND      r1,r6,#0xf            ;1102
00059c  eb001041          ADD      r0,r0,r1,LSL #5       ;1102
0005a0  6160              STR      r0,[r4,#0x14]         ;1102
0005a2  2000              MOVS     r0,#0                 ;1104
0005a4  e7be              B        |L1.1316|
;;;1106   
                          ENDP

                  dir_next PROC
;;;1114   static
;;;1115   FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
0005a6  e92d41f0          PUSH     {r4-r8,lr}
;;;1116   	DIR *dj,		/* Pointer to directory object */
;;;1117   	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
;;;1118   )
;;;1119   {
0005aa  4604              MOV      r4,r0
0005ac  4688              MOV      r8,r1
;;;1120   	DWORD clst;
;;;1121   	WORD i;
;;;1122   
;;;1123   
;;;1124   	stretch = stretch;		/* To suppress warning on read-only cfg. */
0005ae  bf00              NOP      
;;;1125   	i = dj->index + 1;
0005b0  88e0              LDRH     r0,[r4,#6]
0005b2  1c40              ADDS     r0,r0,#1
0005b4  b286              UXTH     r6,r0
;;;1126   	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
0005b6  b10e              CBZ      r6,|L1.1468|
0005b8  6920              LDR      r0,[r4,#0x10]
0005ba  b910              CBNZ     r0,|L1.1474|
                  |L1.1468|
;;;1127   		return FR_NO_FILE;
0005bc  2004              MOVS     r0,#4
                  |L1.1470|
;;;1128   
;;;1129   	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
;;;1130   		dj->sect++;					/* Next sector */
;;;1131   
;;;1132   		if (dj->clust == 0) {	/* Static table */
;;;1133   			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
;;;1134   				return FR_NO_FILE;
;;;1135   		}
;;;1136   		else {					/* Dynamic table */
;;;1137   			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
;;;1138   				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
;;;1139   				if (clst <= 1) return FR_INT_ERR;
;;;1140   				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
;;;1141   				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
;;;1142   #if !_FS_READONLY
;;;1143   					BYTE c;
;;;1144   					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
;;;1145   					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
;;;1146   					if (clst == 0) return FR_DENIED;			/* No free cluster */
;;;1147   					if (clst == 1) return FR_INT_ERR;
;;;1148   					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
;;;1149   					/* Clean-up stretched table */
;;;1150   					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
;;;1151   					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
;;;1152   					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
;;;1153   					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
;;;1154   						dj->fs->wflag = 1;
;;;1155   						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
;;;1156   						dj->fs->winsect++;
;;;1157   					}
;;;1158   					dj->fs->winsect -= c;						/* Rewind window address */
;;;1159   #else
;;;1160   					return FR_NO_FILE;			/* Report EOT */
;;;1161   #endif
;;;1162   				}
;;;1163   				dj->clust = clst;				/* Initialize data for new cluster */
;;;1164   				dj->sect = clust2sect(dj->fs, clst);
;;;1165   			}
;;;1166   		}
;;;1167   	}
;;;1168   
;;;1169   	dj->index = i;
;;;1170   	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
;;;1171   
;;;1172   	return FR_OK;
;;;1173   }
0005be  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1474|
0005c2  f006000f          AND      r0,r6,#0xf            ;1129
0005c6  2800              CMP      r0,#0                 ;1129
0005c8  d16f              BNE      |L1.1706|
0005ca  6920              LDR      r0,[r4,#0x10]         ;1130
0005cc  1c40              ADDS     r0,r0,#1              ;1130
0005ce  6120              STR      r0,[r4,#0x10]         ;1130
0005d0  68e0              LDR      r0,[r4,#0xc]          ;1132
0005d2  b928              CBNZ     r0,|L1.1504|
0005d4  6820              LDR      r0,[r4,#0]            ;1133
0005d6  8900              LDRH     r0,[r0,#8]            ;1133
0005d8  42b0              CMP      r0,r6                 ;1133
0005da  dc66              BGT      |L1.1706|
0005dc  2004              MOVS     r0,#4                 ;1134
0005de  e7ee              B        |L1.1470|
                  |L1.1504|
0005e0  6820              LDR      r0,[r4,#0]            ;1137
0005e2  7880              LDRB     r0,[r0,#2]            ;1137
0005e4  1e40              SUBS     r0,r0,#1              ;1137
0005e6  ea001016          AND      r0,r0,r6,LSR #4       ;1137
0005ea  2800              CMP      r0,#0                 ;1137
0005ec  d15d              BNE      |L1.1706|
0005ee  68e1              LDR      r1,[r4,#0xc]          ;1138
0005f0  6820              LDR      r0,[r4,#0]            ;1138
0005f2  f7fffffe          BL       get_fat
0005f6  4605              MOV      r5,r0                 ;1138
0005f8  2d01              CMP      r5,#1                 ;1139
0005fa  d801              BHI      |L1.1536|
0005fc  2002              MOVS     r0,#2                 ;1139
0005fe  e7de              B        |L1.1470|
                  |L1.1536|
000600  1c68              ADDS     r0,r5,#1              ;1140
000602  b908              CBNZ     r0,|L1.1544|
000604  2001              MOVS     r0,#1                 ;1140
000606  e7da              B        |L1.1470|
                  |L1.1544|
000608  6820              LDR      r0,[r4,#0]            ;1141
00060a  6980              LDR      r0,[r0,#0x18]         ;1141
00060c  42a8              CMP      r0,r5                 ;1141
00060e  d846              BHI      |L1.1694|
000610  f1b80f00          CMP      r8,#0                 ;1144
000614  d101              BNE      |L1.1562|
000616  2004              MOVS     r0,#4                 ;1144
000618  e7d1              B        |L1.1470|
                  |L1.1562|
00061a  68e1              LDR      r1,[r4,#0xc]          ;1145
00061c  6820              LDR      r0,[r4,#0]            ;1145
00061e  f7fffffe          BL       create_chain
000622  4605              MOV      r5,r0                 ;1145
000624  b90d              CBNZ     r5,|L1.1578|
000626  2007              MOVS     r0,#7                 ;1146
000628  e7c9              B        |L1.1470|
                  |L1.1578|
00062a  2d01              CMP      r5,#1                 ;1147
00062c  d101              BNE      |L1.1586|
00062e  2002              MOVS     r0,#2                 ;1147
000630  e7c5              B        |L1.1470|
                  |L1.1586|
000632  1c68              ADDS     r0,r5,#1              ;1148
000634  b908              CBNZ     r0,|L1.1594|
000636  2001              MOVS     r0,#1                 ;1148
000638  e7c1              B        |L1.1470|
                  |L1.1594|
00063a  2100              MOVS     r1,#0                 ;1150
00063c  6820              LDR      r0,[r4,#0]            ;1150
00063e  f7fffffe          BL       move_window
000642  b108              CBZ      r0,|L1.1608|
000644  2001              MOVS     r0,#1                 ;1150
000646  e7ba              B        |L1.1470|
                  |L1.1608|
000648  6821              LDR      r1,[r4,#0]            ;1151
00064a  f1010030          ADD      r0,r1,#0x30           ;1151
00064e  f44f7200          MOV      r2,#0x200             ;1151
000652  2100              MOVS     r1,#0                 ;1151
000654  f7fffffe          BL       mem_set
000658  4629              MOV      r1,r5                 ;1152
00065a  6820              LDR      r0,[r4,#0]            ;1152
00065c  f7fffffe          BL       clust2sect
000660  6821              LDR      r1,[r4,#0]            ;1152
000662  62c8              STR      r0,[r1,#0x2c]         ;1152
000664  2700              MOVS     r7,#0                 ;1153
000666  e010              B        |L1.1674|
                  |L1.1640|
000668  2001              MOVS     r0,#1                 ;1154
00066a  6821              LDR      r1,[r4,#0]            ;1154
00066c  7108              STRB     r0,[r1,#4]            ;1154
00066e  2100              MOVS     r1,#0                 ;1155
000670  6820              LDR      r0,[r4,#0]            ;1155
000672  f7fffffe          BL       move_window
000676  b108              CBZ      r0,|L1.1660|
000678  2001              MOVS     r0,#1                 ;1155
00067a  e7a0              B        |L1.1470|
                  |L1.1660|
00067c  6820              LDR      r0,[r4,#0]            ;1156
00067e  6ac0              LDR      r0,[r0,#0x2c]         ;1156
000680  1c40              ADDS     r0,r0,#1              ;1156
000682  6821              LDR      r1,[r4,#0]            ;1156
000684  62c8              STR      r0,[r1,#0x2c]         ;1156
000686  1c78              ADDS     r0,r7,#1              ;1153
000688  b2c7              UXTB     r7,r0                 ;1153
                  |L1.1674|
00068a  6820              LDR      r0,[r4,#0]            ;1153
00068c  7880              LDRB     r0,[r0,#2]            ;1153
00068e  42b8              CMP      r0,r7                 ;1153
000690  dcea              BGT      |L1.1640|
000692  6820              LDR      r0,[r4,#0]            ;1158
000694  6ac0              LDR      r0,[r0,#0x2c]         ;1158
000696  1bc0              SUBS     r0,r0,r7              ;1158
000698  6821              LDR      r1,[r4,#0]            ;1158
00069a  62c8              STR      r0,[r1,#0x2c]         ;1158
00069c  bf00              NOP                            ;1162
                  |L1.1694|
00069e  60e5              STR      r5,[r4,#0xc]          ;1163
0006a0  4629              MOV      r1,r5                 ;1164
0006a2  6820              LDR      r0,[r4,#0]            ;1164
0006a4  f7fffffe          BL       clust2sect
0006a8  6120              STR      r0,[r4,#0x10]         ;1164
                  |L1.1706|
0006aa  80e6              STRH     r6,[r4,#6]            ;1169
0006ac  6820              LDR      r0,[r4,#0]            ;1170
0006ae  3030              ADDS     r0,r0,#0x30           ;1170
0006b0  f006010f          AND      r1,r6,#0xf            ;1170
0006b4  eb001041          ADD      r0,r0,r1,LSL #5       ;1170
0006b8  6160              STR      r0,[r4,#0x14]         ;1170
0006ba  2000              MOVS     r0,#0                 ;1172
0006bc  e77f              B        |L1.1470|
;;;1174   
                          ENDP

                  ld_clust PROC
;;;1182   static
;;;1183   DWORD ld_clust (
0006be  b510              PUSH     {r4,lr}
;;;1184   	FATFS *fs,	/* Pointer to the fs object */
;;;1185   	BYTE *dir	/* Pointer to the directory entry */
;;;1186   )
;;;1187   {
0006c0  4602              MOV      r2,r0
;;;1188   	DWORD cl;
;;;1189   
;;;1190   	cl = LD_WORD(dir+DIR_FstClusLO);
0006c2  7e8c              LDRB     r4,[r1,#0x1a]
0006c4  7ecb              LDRB     r3,[r1,#0x1b]
0006c6  ea442003          ORR      r0,r4,r3,LSL #8
;;;1191   	if (fs->fs_type == FS_FAT32)
0006ca  7813              LDRB     r3,[r2,#0]
0006cc  2b03              CMP      r3,#3
0006ce  d105              BNE      |L1.1756|
;;;1192   		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
0006d0  7d0c              LDRB     r4,[r1,#0x14]
0006d2  7d4b              LDRB     r3,[r1,#0x15]
0006d4  ea442303          ORR      r3,r4,r3,LSL #8
0006d8  ea404003          ORR      r0,r0,r3,LSL #16
                  |L1.1756|
;;;1193   
;;;1194   	return cl;
;;;1195   }
0006dc  bd10              POP      {r4,pc}
;;;1196   
                          ENDP

                  st_clust PROC
;;;1199   static
;;;1200   void st_clust (
0006de  7681              STRB     r1,[r0,#0x1a]
;;;1201   	BYTE *dir,	/* Pointer to the directory entry */
;;;1202   	DWORD cl	/* Value to be set */
;;;1203   )
;;;1204   {
;;;1205   	ST_WORD(dir+DIR_FstClusLO, cl);
0006e0  0a0b              LSRS     r3,r1,#8
0006e2  76c3              STRB     r3,[r0,#0x1b]
;;;1206   	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
0006e4  0c0a              LSRS     r2,r1,#16
0006e6  7502              STRB     r2,[r0,#0x14]
0006e8  0e0b              LSRS     r3,r1,#24
0006ea  7543              STRB     r3,[r0,#0x15]
;;;1207   }
0006ec  4770              BX       lr
;;;1208   #endif
                          ENDP

                  dir_find PROC
;;;1388   static
;;;1389   FRESULT dir_find (
0006ee  e92d41f0          PUSH     {r4-r8,lr}
;;;1390   	DIR *dj			/* Pointer to the directory object linked to the file name */
;;;1391   )
;;;1392   {
0006f2  4604              MOV      r4,r0
;;;1393   	FRESULT res;
;;;1394   	BYTE c, *dir;
;;;1395   #if _USE_LFN
;;;1396   	BYTE a, ord, sum;
;;;1397   #endif
;;;1398   
;;;1399   	res = dir_sdi(dj, 0);			/* Rewind directory object */
0006f4  2100              MOVS     r1,#0
0006f6  4620              MOV      r0,r4
0006f8  f7fffffe          BL       dir_sdi
0006fc  4605              MOV      r5,r0
;;;1400   	if (res != FR_OK) return res;
0006fe  b115              CBZ      r5,|L1.1798|
000700  4628              MOV      r0,r5
                  |L1.1794|
;;;1401   
;;;1402   #if _USE_LFN
;;;1403   	ord = sum = 0xFF;
;;;1404   #endif
;;;1405   	do {
;;;1406   		res = move_window(dj->fs, dj->sect);
;;;1407   		if (res != FR_OK) break;
;;;1408   		dir = dj->dir;					/* Ptr to the directory entry of current index */
;;;1409   		c = dir[DIR_Name];
;;;1410   		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
;;;1411   #if _USE_LFN	/* LFN configuration */
;;;1412   		a = dir[DIR_Attr] & AM_MASK;
;;;1413   		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
;;;1414   			ord = 0xFF;
;;;1415   		} else {
;;;1416   			if (a == AM_LFN) {			/* An LFN entry is found */
;;;1417   				if (dj->lfn) {
;;;1418   					if (c & LLE) {		/* Is it start of LFN sequence? */
;;;1419   						sum = dir[LDIR_Chksum];
;;;1420   						c &= ~LLE; ord = c;	/* LFN start order */
;;;1421   						dj->lfn_idx = dj->index;
;;;1422   					}
;;;1423   					/* Check validity of the LFN entry and compare it with given name */
;;;1424   					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
;;;1425   				}
;;;1426   			} else {					/* An SFN entry is found */
;;;1427   				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
;;;1428   				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
;;;1429   				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
;;;1430   			}
;;;1431   		}
;;;1432   #else		/* Non LFN configuration */
;;;1433   		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
;;;1434   			break;
;;;1435   #endif
;;;1436   		res = dir_next(dj, 0);		/* Next entry */
;;;1437   	} while (res == FR_OK);
;;;1438   
;;;1439   	return res;
;;;1440   }
000702  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1798|
000706  bf00              NOP                            ;1405
                  |L1.1800|
000708  6921              LDR      r1,[r4,#0x10]         ;1406
00070a  6820              LDR      r0,[r4,#0]            ;1406
00070c  f7fffffe          BL       move_window
000710  4605              MOV      r5,r0                 ;1406
000712  b105              CBZ      r5,|L1.1814|
000714  e016              B        |L1.1860|
                  |L1.1814|
000716  6966              LDR      r6,[r4,#0x14]         ;1408
000718  7837              LDRB     r7,[r6,#0]            ;1409
00071a  b90f              CBNZ     r7,|L1.1824|
00071c  2504              MOVS     r5,#4                 ;1410
00071e  e011              B        |L1.1860|
                  |L1.1824|
000720  7af0              LDRB     r0,[r6,#0xb]          ;1433
000722  f0000008          AND      r0,r0,#8              ;1433
000726  b930              CBNZ     r0,|L1.1846|
000728  220b              MOVS     r2,#0xb               ;1433
00072a  4630              MOV      r0,r6                 ;1433
00072c  69a1              LDR      r1,[r4,#0x18]         ;1433
00072e  f7fffffe          BL       mem_cmp
000732  b900              CBNZ     r0,|L1.1846|
000734  e006              B        |L1.1860|
                  |L1.1846|
000736  2100              MOVS     r1,#0                 ;1436
000738  4620              MOV      r0,r4                 ;1436
00073a  f7fffffe          BL       dir_next
00073e  4605              MOV      r5,r0                 ;1436
000740  2d00              CMP      r5,#0                 ;1437
000742  d0e1              BEQ      |L1.1800|
                  |L1.1860|
000744  bf00              NOP                            ;1407
000746  4628              MOV      r0,r5                 ;1439
000748  e7db              B        |L1.1794|
;;;1441   
                          ENDP

                  dir_read PROC
;;;1449   static
;;;1450   FRESULT dir_read (
00074a  e92d41f0          PUSH     {r4-r8,lr}
;;;1451   	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
;;;1452   )
;;;1453   {
00074e  4604              MOV      r4,r0
;;;1454   	FRESULT res;
;;;1455   	BYTE c, *dir;
;;;1456   #if _USE_LFN
;;;1457   	BYTE a, ord = 0xFF, sum = 0xFF;
;;;1458   #endif
;;;1459   
;;;1460   	res = FR_NO_FILE;
000750  2504              MOVS     r5,#4
;;;1461   	while (dj->sect) {
000752  e01b              B        |L1.1932|
                  |L1.1876|
;;;1462   		res = move_window(dj->fs, dj->sect);
000754  6921              LDR      r1,[r4,#0x10]
000756  6820              LDR      r0,[r4,#0]
000758  f7fffffe          BL       move_window
00075c  4605              MOV      r5,r0
;;;1463   		if (res != FR_OK) break;
00075e  b105              CBZ      r5,|L1.1890|
000760  e017              B        |L1.1938|
                  |L1.1890|
;;;1464   		dir = dj->dir;					/* Ptr to the directory entry of current index */
000762  6967              LDR      r7,[r4,#0x14]
;;;1465   		c = dir[DIR_Name];
000764  783e              LDRB     r6,[r7,#0]
;;;1466   		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
000766  b90e              CBNZ     r6,|L1.1900|
000768  2504              MOVS     r5,#4
00076a  e012              B        |L1.1938|
                  |L1.1900|
;;;1467   #if _USE_LFN	/* LFN configuration */
;;;1468   		a = dir[DIR_Attr] & AM_MASK;
;;;1469   		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
;;;1470   			ord = 0xFF;
;;;1471   		} else {
;;;1472   			if (a == AM_LFN) {			/* An LFN entry is found */
;;;1473   				if (c & LLE) {			/* Is it start of LFN sequence? */
;;;1474   					sum = dir[LDIR_Chksum];
;;;1475   					c &= ~LLE; ord = c;
;;;1476   					dj->lfn_idx = dj->index;
;;;1477   				}
;;;1478   				/* Check LFN validity and capture it */
;;;1479   				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
;;;1480   			} else {					/* An SFN entry is found */
;;;1481   				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
;;;1482   					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
;;;1483   				break;
;;;1484   			}
;;;1485   		}
;;;1486   #else		/* Non LFN configuration */
;;;1487   		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
00076c  2ee5              CMP      r6,#0xe5
00076e  d006              BEQ      |L1.1918|
000770  2e2e              CMP      r6,#0x2e
000772  d004              BEQ      |L1.1918|
000774  7af8              LDRB     r0,[r7,#0xb]
000776  f0000008          AND      r0,r0,#8
00077a  b900              CBNZ     r0,|L1.1918|
;;;1488   			break;
00077c  e009              B        |L1.1938|
                  |L1.1918|
;;;1489   #endif
;;;1490   		res = dir_next(dj, 0);				/* Next entry */
00077e  2100              MOVS     r1,#0
000780  4620              MOV      r0,r4
000782  f7fffffe          BL       dir_next
000786  4605              MOV      r5,r0
;;;1491   		if (res != FR_OK) break;
000788  b105              CBZ      r5,|L1.1932|
00078a  e002              B        |L1.1938|
                  |L1.1932|
00078c  6920              LDR      r0,[r4,#0x10]         ;1461
00078e  2800              CMP      r0,#0                 ;1461
000790  d1e0              BNE      |L1.1876|
                  |L1.1938|
000792  bf00              NOP                            ;1463
;;;1492   	}
;;;1493   
;;;1494   	if (res != FR_OK) dj->sect = 0;
000794  b10d              CBZ      r5,|L1.1946|
000796  2000              MOVS     r0,#0
000798  6120              STR      r0,[r4,#0x10]
                  |L1.1946|
;;;1495   
;;;1496   	return res;
00079a  4628              MOV      r0,r5
;;;1497   }
00079c  e8bd81f0          POP      {r4-r8,pc}
;;;1498   #endif
                          ENDP

                  dir_register PROC
;;;1506   static
;;;1507   FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
0007a0  e92d41f0          PUSH     {r4-r8,lr}
;;;1508   	DIR *dj				/* Target directory with object name to be created */
;;;1509   )
;;;1510   {
0007a4  4604              MOV      r4,r0
;;;1511   	FRESULT res;
;;;1512   	BYTE c, *dir;
;;;1513   #if _USE_LFN	/* LFN configuration */
;;;1514   	WORD n, ne, is;
;;;1515   	BYTE sn[12], *fn, sum;
;;;1516   	WCHAR *lfn;
;;;1517   
;;;1518   
;;;1519   	fn = dj->fn; lfn = dj->lfn;
;;;1520   	mem_cpy(sn, fn, 12);
;;;1521   
;;;1522   	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
;;;1523   		return FR_INVALID_NAME;
;;;1524   
;;;1525   	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
;;;1526   		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
;;;1527   		for (n = 1; n < 100; n++) {
;;;1528   			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
;;;1529   			res = dir_find(dj);				/* Check if the name collides with existing SFN */
;;;1530   			if (res != FR_OK) break;
;;;1531   		}
;;;1532   		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
;;;1533   		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
;;;1534   		fn[NS] = sn[NS]; dj->lfn = lfn;
;;;1535   	}
;;;1536   
;;;1537   	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
;;;1538   		for (ne = 0; lfn[ne]; ne++) ;
;;;1539   		ne = (ne + 25) / 13;
;;;1540   	} else {						/* Otherwise reserve only an SFN entry. */
;;;1541   		ne = 1;
;;;1542   	}
;;;1543   
;;;1544   	/* Reserve contiguous entries */
;;;1545   	res = dir_sdi(dj, 0);
;;;1546   	if (res != FR_OK) return res;
;;;1547   	n = is = 0;
;;;1548   	do {
;;;1549   		res = move_window(dj->fs, dj->sect);
;;;1550   		if (res != FR_OK) break;
;;;1551   		c = *dj->dir;				/* Check the entry status */
;;;1552   		if (c == DDE || c == 0) {	/* Is it a blank entry? */
;;;1553   			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
;;;1554   			if (++n == ne) break;	/* A contiguous entry that required count is found */
;;;1555   		} else {
;;;1556   			n = 0;					/* Not a blank entry. Restart to search */
;;;1557   		}
;;;1558   		res = dir_next(dj, 1);		/* Next entry with table stretch */
;;;1559   	} while (res == FR_OK);
;;;1560   
;;;1561   	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
;;;1562   		res = dir_sdi(dj, is);
;;;1563   		if (res == FR_OK) {
;;;1564   			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
;;;1565   			ne--;
;;;1566   			do {					/* Store LFN entries in bottom first */
;;;1567   				res = move_window(dj->fs, dj->sect);
;;;1568   				if (res != FR_OK) break;
;;;1569   				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
;;;1570   				dj->fs->wflag = 1;
;;;1571   				res = dir_next(dj, 0);	/* Next entry */
;;;1572   			} while (res == FR_OK && --ne);
;;;1573   		}
;;;1574   	}
;;;1575   
;;;1576   #else	/* Non LFN configuration */
;;;1577   	res = dir_sdi(dj, 0);
0007a6  2100              MOVS     r1,#0
0007a8  4620              MOV      r0,r4
0007aa  f7fffffe          BL       dir_sdi
0007ae  4605              MOV      r5,r0
;;;1578   	if (res == FR_OK) {
0007b0  b9ad              CBNZ     r5,|L1.2014|
;;;1579   		do {	/* Find a blank entry for the SFN */
0007b2  bf00              NOP      
                  |L1.1972|
;;;1580   			res = move_window(dj->fs, dj->sect);
0007b4  6921              LDR      r1,[r4,#0x10]
0007b6  6820              LDR      r0,[r4,#0]
0007b8  f7fffffe          BL       move_window
0007bc  4605              MOV      r5,r0
;;;1581   			if (res != FR_OK) break;
0007be  b105              CBZ      r5,|L1.1986|
0007c0  e00c              B        |L1.2012|
                  |L1.1986|
;;;1582   			c = *dj->dir;
0007c2  6960              LDR      r0,[r4,#0x14]
0007c4  7806              LDRB     r6,[r0,#0]
;;;1583   			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
0007c6  2ee5              CMP      r6,#0xe5
0007c8  d000              BEQ      |L1.1996|
0007ca  b906              CBNZ     r6,|L1.1998|
                  |L1.1996|
0007cc  e006              B        |L1.2012|
                  |L1.1998|
;;;1584   			res = dir_next(dj, 1);			/* Next entry with table stretch */
0007ce  2101              MOVS     r1,#1
0007d0  4620              MOV      r0,r4
0007d2  f7fffffe          BL       dir_next
0007d6  4605              MOV      r5,r0
;;;1585   		} while (res == FR_OK);
0007d8  2d00              CMP      r5,#0
0007da  d0eb              BEQ      |L1.1972|
                  |L1.2012|
0007dc  bf00              NOP                            ;1581
                  |L1.2014|
;;;1586   	}
;;;1587   #endif
;;;1588   
;;;1589   	if (res == FR_OK) {		/* Initialize the SFN entry */
0007de  b99d              CBNZ     r5,|L1.2056|
;;;1590   		res = move_window(dj->fs, dj->sect);
0007e0  6921              LDR      r1,[r4,#0x10]
0007e2  6820              LDR      r0,[r4,#0]
0007e4  f7fffffe          BL       move_window
0007e8  4605              MOV      r5,r0
;;;1591   		if (res == FR_OK) {
0007ea  b96d              CBNZ     r5,|L1.2056|
;;;1592   			dir = dj->dir;
0007ec  6967              LDR      r7,[r4,#0x14]
;;;1593   			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
0007ee  2220              MOVS     r2,#0x20
0007f0  2100              MOVS     r1,#0
0007f2  4638              MOV      r0,r7
0007f4  f7fffffe          BL       mem_set
;;;1594   			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
0007f8  220b              MOVS     r2,#0xb
0007fa  4638              MOV      r0,r7
0007fc  69a1              LDR      r1,[r4,#0x18]
0007fe  f7fffffe          BL       mem_cpy
;;;1595   #if _USE_LFN
;;;1596   			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
;;;1597   #endif
;;;1598   			dj->fs->wflag = 1;
000802  2001              MOVS     r0,#1
000804  6821              LDR      r1,[r4,#0]
000806  7108              STRB     r0,[r1,#4]
                  |L1.2056|
;;;1599   		}
;;;1600   	}
;;;1601   
;;;1602   	return res;
000808  4628              MOV      r0,r5
;;;1603   }
00080a  e8bd81f0          POP      {r4-r8,pc}
;;;1604   #endif /* !_FS_READONLY */
                          ENDP

                  dir_remove PROC
;;;1613   static
;;;1614   FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
00080e  b570              PUSH     {r4-r6,lr}
;;;1615   	DIR *dj				/* Directory object pointing the entry to be removed */
;;;1616   )
;;;1617   {
000810  4604              MOV      r4,r0
;;;1618   	FRESULT res;
;;;1619   #if _USE_LFN	/* LFN configuration */
;;;1620   	WORD i;
;;;1621   
;;;1622   	i = dj->index;	/* SFN index */
;;;1623   	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
;;;1624   	if (res == FR_OK) {
;;;1625   		do {
;;;1626   			res = move_window(dj->fs, dj->sect);
;;;1627   			if (res != FR_OK) break;
;;;1628   			*dj->dir = DDE;			/* Mark the entry "deleted" */
;;;1629   			dj->fs->wflag = 1;
;;;1630   			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
;;;1631   			res = dir_next(dj, 0);		/* Next entry */
;;;1632   		} while (res == FR_OK);
;;;1633   		if (res == FR_NO_FILE) res = FR_INT_ERR;
;;;1634   	}
;;;1635   
;;;1636   #else			/* Non LFN configuration */
;;;1637   	res = dir_sdi(dj, dj->index);
000812  88e1              LDRH     r1,[r4,#6]
000814  4620              MOV      r0,r4
000816  f7fffffe          BL       dir_sdi
00081a  4605              MOV      r5,r0
;;;1638   	if (res == FR_OK) {
00081c  b95d              CBNZ     r5,|L1.2102|
;;;1639   		res = move_window(dj->fs, dj->sect);
00081e  6921              LDR      r1,[r4,#0x10]
000820  6820              LDR      r0,[r4,#0]
000822  f7fffffe          BL       move_window
000826  4605              MOV      r5,r0
;;;1640   		if (res == FR_OK) {
000828  b92d              CBNZ     r5,|L1.2102|
;;;1641   			*dj->dir = DDE;			/* Mark the entry "deleted" */
00082a  20e5              MOVS     r0,#0xe5
00082c  6961              LDR      r1,[r4,#0x14]
00082e  7008              STRB     r0,[r1,#0]
;;;1642   			dj->fs->wflag = 1;
000830  2001              MOVS     r0,#1
000832  6821              LDR      r1,[r4,#0]
000834  7108              STRB     r0,[r1,#4]
                  |L1.2102|
;;;1643   		}
;;;1644   	}
;;;1645   #endif
;;;1646   
;;;1647   	return res;
000836  4628              MOV      r0,r5
;;;1648   }
000838  bd70              POP      {r4-r6,pc}
;;;1649   #endif /* !_FS_READONLY */
                          ENDP

                  create_name PROC
;;;1658   static
;;;1659   FRESULT create_name (
00083a  e92d5ff3          PUSH     {r0,r1,r4-r12,lr}
;;;1660   	DIR *dj,			/* Pointer to the directory object */
;;;1661   	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
;;;1662   )
;;;1663   {
00083e  468a              MOV      r10,r1
;;;1664   #ifdef _EXCVT
;;;1665   	static const BYTE excvt[] = _EXCVT;	/* Upper conversion table for extended chars */
;;;1666   #endif
;;;1667   
;;;1668   #if _USE_LFN	/* LFN configuration */
;;;1669   	BYTE b, cf;
;;;1670   	WCHAR w, *lfn;
;;;1671   	UINT i, ni, si, di;
;;;1672   	const TCHAR *p;
;;;1673   
;;;1674   	/* Create LFN in Unicode */
;;;1675   	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
;;;1676   	lfn = dj->lfn;
;;;1677   	si = di = 0;
;;;1678   	for (;;) {
;;;1679   		w = p[si++];					/* Get a character */
;;;1680   		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
;;;1681   		if (di >= _MAX_LFN)				/* Reject too long name */
;;;1682   			return FR_INVALID_NAME;
;;;1683   #if !_LFN_UNICODE
;;;1684   		w &= 0xFF;
;;;1685   		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
;;;1686   			b = (BYTE)p[si++];			/* Get 2nd byte */
;;;1687   			if (!IsDBCS2(b))
;;;1688   				return FR_INVALID_NAME;	/* Reject invalid sequence */
;;;1689   			w = (w << 8) + b;			/* Create a DBC */
;;;1690   		}
;;;1691   		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
;;;1692   		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
;;;1693   #endif
;;;1694   		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
;;;1695   			return FR_INVALID_NAME;
;;;1696   		lfn[di++] = w;					/* Store the Unicode char */
;;;1697   	}
;;;1698   	*path = &p[si];						/* Return pointer to the next segment */
;;;1699   	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
;;;1700   #if _FS_RPATH
;;;1701   	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
;;;1702   		(di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
;;;1703   		lfn[di] = 0;
;;;1704   		for (i = 0; i < 11; i++)
;;;1705   			dj->fn[i] = (i < di) ? '.' : ' ';
;;;1706   		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
;;;1707   		return FR_OK;
;;;1708   	}
;;;1709   #endif
;;;1710   	while (di) {						/* Strip trailing spaces and dots */
;;;1711   		w = lfn[di-1];
;;;1712   		if (w != ' ' && w != '.') break;
;;;1713   		di--;
;;;1714   	}
;;;1715   	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
;;;1716   
;;;1717   	lfn[di] = 0;						/* LFN is created */
;;;1718   
;;;1719   	/* Create SFN in directory form */
;;;1720   	mem_set(dj->fn, ' ', 11);
;;;1721   	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
;;;1722   	if (si) cf |= NS_LOSS | NS_LFN;
;;;1723   	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
;;;1724   
;;;1725   	b = i = 0; ni = 8;
;;;1726   	for (;;) {
;;;1727   		w = lfn[si++];					/* Get an LFN char */
;;;1728   		if (!w) break;					/* Break on end of the LFN */
;;;1729   		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
;;;1730   			cf |= NS_LOSS | NS_LFN; continue;
;;;1731   		}
;;;1732   
;;;1733   		if (i >= ni || si == di) {		/* Extension or end of SFN */
;;;1734   			if (ni == 11) {				/* Long extension */
;;;1735   				cf |= NS_LOSS | NS_LFN; break;
;;;1736   			}
;;;1737   			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
;;;1738   			if (si > di) break;			/* No extension */
;;;1739   			si = di; i = 8; ni = 11;	/* Enter extension section */
;;;1740   			b <<= 2; continue;
;;;1741   		}
;;;1742   
;;;1743   		if (w >= 0x80) {				/* Non ASCII char */
;;;1744   #ifdef _EXCVT
;;;1745   			w = ff_convert(w, 0);		/* Unicode -> OEM code */
;;;1746   			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
;;;1747   #else
;;;1748   			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
;;;1749   #endif
;;;1750   			cf |= NS_LFN;				/* Force create LFN entry */
;;;1751   		}
;;;1752   
;;;1753   		if (_DF1S && w >= 0x100) {		/* Double byte char (always false on SBCS cfg) */
;;;1754   			if (i >= ni - 1) {
;;;1755   				cf |= NS_LOSS | NS_LFN; i = ni; continue;
;;;1756   			}
;;;1757   			dj->fn[i++] = (BYTE)(w >> 8);
;;;1758   		} else {						/* Single byte char */
;;;1759   			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
;;;1760   				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
;;;1761   			} else {
;;;1762   				if (IsUpper(w)) {		/* ASCII large capital */
;;;1763   					b |= 2;
;;;1764   				} else {
;;;1765   					if (IsLower(w)) {	/* ASCII small capital */
;;;1766   						b |= 1; w -= 0x20;
;;;1767   					}
;;;1768   				}
;;;1769   			}
;;;1770   		}
;;;1771   		dj->fn[i++] = (BYTE)w;
;;;1772   	}
;;;1773   
;;;1774   	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
;;;1775   
;;;1776   	if (ni == 8) b <<= 2;
;;;1777   	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
;;;1778   		cf |= NS_LFN;
;;;1779   	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
;;;1780   		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
;;;1781   		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
;;;1782   	}
;;;1783   
;;;1784   	dj->fn[NS] = cf;	/* SFN is created */
;;;1785   
;;;1786   	return FR_OK;
;;;1787   
;;;1788   
;;;1789   #else	/* Non-LFN configuration */
;;;1790   	BYTE b, c, d, *sfn;
;;;1791   	UINT ni, si, i;
;;;1792   	const char *p;
;;;1793   
;;;1794   	/* Create file name in directory form */
;;;1795   	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
000840  f8da7000          LDR      r7,[r10,#0]
000844  e000              B        |L1.2120|
                  |L1.2118|
000846  1c7f              ADDS     r7,r7,#1
                  |L1.2120|
000848  7838              LDRB     r0,[r7,#0]
00084a  282f              CMP      r0,#0x2f
00084c  d0fb              BEQ      |L1.2118|
00084e  7838              LDRB     r0,[r7,#0]
000850  285c              CMP      r0,#0x5c
000852  d0f8              BEQ      |L1.2118|
;;;1796   	sfn = dj->fn;
000854  9800              LDR      r0,[sp,#0]
000856  6986              LDR      r6,[r0,#0x18]
;;;1797   	mem_set(sfn, ' ', 11);
000858  220b              MOVS     r2,#0xb
00085a  2120              MOVS     r1,#0x20
00085c  4630              MOV      r0,r6
00085e  f7fffffe          BL       mem_set
;;;1798   	si = i = b = 0; ni = 8;
000862  2500              MOVS     r5,#0
000864  46a9              MOV      r9,r5
000866  46ab              MOV      r11,r5
000868  f04f0808          MOV      r8,#8
;;;1799   #if _FS_RPATH
;;;1800   	if (p[si] == '.') { /* Is this a dot entry? */
;;;1801   		for (;;) {
;;;1802   			c = (BYTE)p[si++];
;;;1803   			if (c != '.' || si >= 3) break;
;;;1804   			sfn[i++] = c;
;;;1805   		}
;;;1806   		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
;;;1807   		*path = &p[si];									/* Return pointer to the next segment */
;;;1808   		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
;;;1809   		return FR_OK;
;;;1810   	}
;;;1811   #endif
;;;1812   	for (;;) {
00086c  bf00              NOP      
                  |L1.2158|
;;;1813   		c = (BYTE)p[si++];
00086e  4658              MOV      r0,r11
000870  f10b0b01          ADD      r11,r11,#1
000874  5c3c              LDRB     r4,[r7,r0]
;;;1814   		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
000876  2c20              CMP      r4,#0x20
000878  dd03              BLE      |L1.2178|
00087a  2c2f              CMP      r4,#0x2f
00087c  d001              BEQ      |L1.2178|
00087e  2c5c              CMP      r4,#0x5c
000880  d100              BNE      |L1.2180|
                  |L1.2178|
000882  e034              B        |L1.2286|
                  |L1.2180|
;;;1815   		if (c == '.' || i >= ni) {
000884  2c2e              CMP      r4,#0x2e
000886  d001              BEQ      |L1.2188|
000888  45c1              CMP      r9,r8
00088a  d30e              BCC      |L1.2218|
                  |L1.2188|
;;;1816   			if (ni != 8 || c != '.') return FR_INVALID_NAME;
00088c  f1b80f08          CMP      r8,#8
000890  d101              BNE      |L1.2198|
000892  2c2e              CMP      r4,#0x2e
000894  d002              BEQ      |L1.2204|
                  |L1.2198|
000896  2006              MOVS     r0,#6
                  |L1.2200|
;;;1817   			i = 8; ni = 11;
;;;1818   			b <<= 2; continue;
;;;1819   		}
;;;1820   		if (c >= 0x80) {				/* Extended char? */
;;;1821   			b |= 3;						/* Eliminate NT flag */
;;;1822   #ifdef _EXCVT
;;;1823   			c = excvt[c - 0x80];		/* Upper conversion (SBCS) */
;;;1824   #else
;;;1825   #if !_DF1S	/* ASCII only cfg */
;;;1826   			return FR_INVALID_NAME;
;;;1827   #endif
;;;1828   #endif
;;;1829   		}
;;;1830   		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
;;;1831   			d = (BYTE)p[si++];			/* Get 2nd byte */
;;;1832   			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
;;;1833   				return FR_INVALID_NAME;
;;;1834   			sfn[i++] = c;
;;;1835   			sfn[i++] = d;
;;;1836   		} else {						/* Single byte code */
;;;1837   			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
;;;1838   				return FR_INVALID_NAME;
;;;1839   			if (IsUpper(c)) {			/* ASCII large capital? */
;;;1840   				b |= 2;
;;;1841   			} else {
;;;1842   				if (IsLower(c)) {		/* ASCII small capital? */
;;;1843   					b |= 1; c -= 0x20;
;;;1844   				}
;;;1845   			}
;;;1846   			sfn[i++] = c;
;;;1847   		}
;;;1848   	}
;;;1849   	*path = &p[si];						/* Return pointer to the next segment */
;;;1850   	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
;;;1851   
;;;1852   	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
;;;1853   	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
;;;1854   
;;;1855   	if (ni == 8) b <<= 2;
;;;1856   	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
;;;1857   	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
;;;1858   
;;;1859   	sfn[NS] = c;		/* Store NT flag, File name is created */
;;;1860   
;;;1861   	return FR_OK;
;;;1862   #endif
;;;1863   }
000898  e8bd9ffc          POP      {r2-r12,pc}
                  |L1.2204|
00089c  f04f0908          MOV      r9,#8                 ;1817
0008a0  f04f080b          MOV      r8,#0xb               ;1817
0008a4  06a8              LSLS     r0,r5,#26             ;1818
0008a6  0e05              LSRS     r5,r0,#24             ;1818
0008a8  e7e1              B        |L1.2158|
                  |L1.2218|
0008aa  2c80              CMP      r4,#0x80              ;1820
0008ac  db03              BLT      |L1.2230|
0008ae  f0450503          ORR      r5,r5,#3              ;1821
0008b2  2006              MOVS     r0,#6                 ;1826
0008b4  e7f0              B        |L1.2200|
                  |L1.2230|
0008b6  4621              MOV      r1,r4                 ;1837
0008b8  a0fe              ADR      r0,|L1.3252|
0008ba  f7fffffe          BL       chk_chr
0008be  b108              CBZ      r0,|L1.2244|
0008c0  2006              MOVS     r0,#6                 ;1838
0008c2  e7e9              B        |L1.2200|
                  |L1.2244|
0008c4  2c41              CMP      r4,#0x41              ;1839
0008c6  db04              BLT      |L1.2258|
0008c8  2c5a              CMP      r4,#0x5a              ;1839
0008ca  dc02              BGT      |L1.2258|
0008cc  f0450502          ORR      r5,r5,#2              ;1840
0008d0  e008              B        |L1.2276|
                  |L1.2258|
0008d2  2c61              CMP      r4,#0x61              ;1842
0008d4  db06              BLT      |L1.2276|
0008d6  2c7a              CMP      r4,#0x7a              ;1842
0008d8  dc04              BGT      |L1.2276|
0008da  f0450501          ORR      r5,r5,#1              ;1843
0008de  f1a40020          SUB      r0,r4,#0x20           ;1843
0008e2  b2c4              UXTB     r4,r0                 ;1843
                  |L1.2276|
0008e4  4648              MOV      r0,r9                 ;1846
0008e6  f1090901          ADD      r9,r9,#1              ;1846
0008ea  5434              STRB     r4,[r6,r0]            ;1846
0008ec  e7bf              B        |L1.2158|
                  |L1.2286|
0008ee  bf00              NOP                            ;1814
0008f0  eb07000b          ADD      r0,r7,r11             ;1849
0008f4  f8ca0000          STR      r0,[r10,#0]           ;1849
0008f8  2c20              CMP      r4,#0x20              ;1850
0008fa  dc01              BGT      |L1.2304|
0008fc  2004              MOVS     r0,#4                 ;1850
0008fe  e000              B        |L1.2306|
                  |L1.2304|
000900  2000              MOVS     r0,#0                 ;1850
                  |L1.2306|
000902  4604              MOV      r4,r0                 ;1850
000904  f1b90f00          CMP      r9,#0                 ;1852
000908  d101              BNE      |L1.2318|
00090a  2006              MOVS     r0,#6                 ;1852
00090c  e7c4              B        |L1.2200|
                  |L1.2318|
00090e  7830              LDRB     r0,[r6,#0]            ;1853
000910  28e5              CMP      r0,#0xe5              ;1853
000912  d101              BNE      |L1.2328|
000914  2005              MOVS     r0,#5                 ;1853
000916  7030              STRB     r0,[r6,#0]            ;1853
                  |L1.2328|
000918  f1b80f08          CMP      r8,#8                 ;1855
00091c  d101              BNE      |L1.2338|
00091e  06a8              LSLS     r0,r5,#26             ;1855
000920  0e05              LSRS     r5,r0,#24             ;1855
                  |L1.2338|
000922  f0050003          AND      r0,r5,#3              ;1856
000926  2801              CMP      r0,#1                 ;1856
000928  d101              BNE      |L1.2350|
00092a  f0440410          ORR      r4,r4,#0x10           ;1856
                  |L1.2350|
00092e  f005000c          AND      r0,r5,#0xc            ;1857
000932  2804              CMP      r0,#4                 ;1857
000934  d101              BNE      |L1.2362|
000936  f0440408          ORR      r4,r4,#8              ;1857
                  |L1.2362|
00093a  72f4              STRB     r4,[r6,#0xb]          ;1859
00093c  2000              MOVS     r0,#0                 ;1861
00093e  e7ab              B        |L1.2200|
;;;1864   
                          ENDP

                  get_fileinfo PROC
;;;1872   static
;;;1873   void get_fileinfo (		/* No return code */
000940  b5f0              PUSH     {r4-r7,lr}
;;;1874   	DIR *dj,			/* Pointer to the directory object */
;;;1875   	FILINFO *fno	 	/* Pointer to the file information to be filled */
;;;1876   )
;;;1877   {
000942  4605              MOV      r5,r0
000944  460b              MOV      r3,r1
;;;1878   	UINT i;
;;;1879   	BYTE nt, *dir;
;;;1880   	TCHAR *p, c;
;;;1881   
;;;1882   
;;;1883   	p = fno->fname;
000946  f1030209          ADD      r2,r3,#9
;;;1884   	if (dj->sect) {
00094a  692f              LDR      r7,[r5,#0x10]
00094c  2f00              CMP      r7,#0
00094e  d040              BEQ      |L1.2514|
;;;1885   		dir = dj->dir;
000950  6968              LDR      r0,[r5,#0x14]
;;;1886   		nt = dir[DIR_NTres];		/* NT flag */
000952  7b06              LDRB     r6,[r0,#0xc]
;;;1887   		for (i = 0; i < 8; i++) {	/* Copy name body */
000954  2100              MOVS     r1,#0
000956  e00a              B        |L1.2414|
                  |L1.2392|
;;;1888   			c = dir[i];
000958  5c44              LDRB     r4,[r0,r1]
;;;1889   			if (c == ' ') break;
00095a  2c20              CMP      r4,#0x20
00095c  d100              BNE      |L1.2400|
00095e  e008              B        |L1.2418|
                  |L1.2400|
;;;1890   			if (c == NDDE) c = (TCHAR)DDE;
000960  2c05              CMP      r4,#5
000962  d100              BNE      |L1.2406|
000964  24e5              MOVS     r4,#0xe5
                  |L1.2406|
;;;1891   			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
000966  bf00              NOP      
;;;1892   #if _LFN_UNICODE
;;;1893   			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
;;;1894   				c = (c << 8) | dir[++i];
;;;1895   			c = ff_convert(c, 1);
;;;1896   			if (!c) c = '?';
;;;1897   #endif
;;;1898   			*p++ = c;
000968  f8024b01          STRB     r4,[r2],#1
00096c  1c49              ADDS     r1,r1,#1              ;1887
                  |L1.2414|
00096e  2908              CMP      r1,#8                 ;1887
000970  d3f2              BCC      |L1.2392|
                  |L1.2418|
000972  bf00              NOP                            ;1889
;;;1899   		}
;;;1900   		if (dir[8] != ' ') {		/* Copy name extension */
000974  7a07              LDRB     r7,[r0,#8]
000976  2f20              CMP      r7,#0x20
000978  d00f              BEQ      |L1.2458|
;;;1901   			*p++ = '.';
00097a  272e              MOVS     r7,#0x2e
00097c  f8027b01          STRB     r7,[r2],#1
;;;1902   			for (i = 8; i < 11; i++) {
000980  2108              MOVS     r1,#8
000982  e007              B        |L1.2452|
                  |L1.2436|
;;;1903   				c = dir[i];
000984  5c44              LDRB     r4,[r0,r1]
;;;1904   				if (c == ' ') break;
000986  2c20              CMP      r4,#0x20
000988  d100              BNE      |L1.2444|
00098a  e005              B        |L1.2456|
                  |L1.2444|
;;;1905   				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
00098c  bf00              NOP      
;;;1906   #if _LFN_UNICODE
;;;1907   				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
;;;1908   					c = (c << 8) | dir[++i];
;;;1909   				c = ff_convert(c, 1);
;;;1910   				if (!c) c = '?';
;;;1911   #endif
;;;1912   				*p++ = c;
00098e  f8024b01          STRB     r4,[r2],#1
000992  1c49              ADDS     r1,r1,#1              ;1902
                  |L1.2452|
000994  290b              CMP      r1,#0xb               ;1902
000996  d3f5              BCC      |L1.2436|
                  |L1.2456|
000998  bf00              NOP                            ;1904
                  |L1.2458|
;;;1913   			}
;;;1914   		}
;;;1915   		fno->fattrib = dir[DIR_Attr];				/* Attribute */
00099a  7ac7              LDRB     r7,[r0,#0xb]
00099c  721f              STRB     r7,[r3,#8]
;;;1916   		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
00099e  7fc7              LDRB     r7,[r0,#0x1f]
0009a0  ea4f6c07          LSL      r12,r7,#24
0009a4  7f87              LDRB     r7,[r0,#0x1e]
0009a6  ea4c4c07          ORR      r12,r12,r7,LSL #16
0009aa  7f47              LDRB     r7,[r0,#0x1d]
0009ac  ea4c2707          ORR      r7,r12,r7,LSL #8
0009b0  f890c01c          LDRB     r12,[r0,#0x1c]
0009b4  ea47070c          ORR      r7,r7,r12
0009b8  601f              STR      r7,[r3,#0]
;;;1917   		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
0009ba  f890c018          LDRB     r12,[r0,#0x18]
0009be  7e47              LDRB     r7,[r0,#0x19]
0009c0  ea4c2707          ORR      r7,r12,r7,LSL #8
0009c4  809f              STRH     r7,[r3,#4]
;;;1918   		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
0009c6  f890c016          LDRB     r12,[r0,#0x16]
0009ca  7dc7              LDRB     r7,[r0,#0x17]
0009cc  ea4c2707          ORR      r7,r12,r7,LSL #8
0009d0  80df              STRH     r7,[r3,#6]
                  |L1.2514|
;;;1919   	}
;;;1920   	*p = 0;		/* Terminate SFN str by a \0 */
0009d2  2700              MOVS     r7,#0
0009d4  7017              STRB     r7,[r2,#0]
;;;1921   
;;;1922   #if _USE_LFN
;;;1923   	if (fno->lfname && fno->lfsize) {
;;;1924   		TCHAR *tp = fno->lfname;
;;;1925   		WCHAR w, *lfn;
;;;1926   
;;;1927   		i = 0;
;;;1928   		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
;;;1929   			lfn = dj->lfn;
;;;1930   			while ((w = *lfn++) != 0) {			/* Get an LFN char */
;;;1931   #if !_LFN_UNICODE
;;;1932   				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
;;;1933   				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
;;;1934   				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
;;;1935   					tp[i++] = (TCHAR)(w >> 8);
;;;1936   #endif
;;;1937   				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
;;;1938   				tp[i++] = (TCHAR)w;
;;;1939   			}
;;;1940   		}
;;;1941   		tp[i] = 0;	/* Terminate the LFN str by a \0 */
;;;1942   	}
;;;1943   #endif
;;;1944   }
0009d6  bdf0              POP      {r4-r7,pc}
;;;1945   #endif /* _FS_MINIMIZE <= 1 */
                          ENDP

                  follow_path PROC
;;;1954   static
;;;1955   FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
0009d8  e92d41f3          PUSH     {r0,r1,r4-r8,lr}
;;;1956   	DIR *dj,			/* Directory object to return last directory and found object */
;;;1957   	const TCHAR *path	/* Full-path string to find a file or directory */
;;;1958   )
;;;1959   {
0009dc  4604              MOV      r4,r0
;;;1960   	FRESULT res;
;;;1961   	BYTE *dir, ns;
;;;1962   
;;;1963   
;;;1964   #if _FS_RPATH
;;;1965   	if (*path == '/' || *path == '\\') { /* There is a heading separator */
;;;1966   		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
;;;1967   	} else {							/* No heading separator */
;;;1968   		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
;;;1969   	}
;;;1970   #else
;;;1971   	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
0009de  9801              LDR      r0,[sp,#4]
0009e0  7800              LDRB     r0,[r0,#0]
0009e2  282f              CMP      r0,#0x2f
0009e4  d003              BEQ      |L1.2542|
0009e6  9801              LDR      r0,[sp,#4]
0009e8  7800              LDRB     r0,[r0,#0]
0009ea  285c              CMP      r0,#0x5c
0009ec  d102              BNE      |L1.2548|
                  |L1.2542|
;;;1972   		path++;
0009ee  9801              LDR      r0,[sp,#4]
0009f0  1c40              ADDS     r0,r0,#1
0009f2  9001              STR      r0,[sp,#4]
                  |L1.2548|
;;;1973   	dj->sclust = 0;						/* Start from the root dir */
0009f4  2000              MOVS     r0,#0
0009f6  60a0              STR      r0,[r4,#8]
;;;1974   #endif
;;;1975   
;;;1976   	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
0009f8  9801              LDR      r0,[sp,#4]
0009fa  7800              LDRB     r0,[r0,#0]
0009fc  2820              CMP      r0,#0x20
0009fe  d207              BCS      |L1.2576|
;;;1977   		res = dir_sdi(dj, 0);
000a00  2100              MOVS     r1,#0
000a02  4620              MOV      r0,r4
000a04  f7fffffe          BL       dir_sdi
000a08  4605              MOV      r5,r0
;;;1978   		dj->dir = 0;
000a0a  2000              MOVS     r0,#0
000a0c  6160              STR      r0,[r4,#0x14]
000a0e  e029              B        |L1.2660|
                  |L1.2576|
;;;1979   	} else {							/* Follow path */
;;;1980   		for (;;) {
000a10  bf00              NOP      
                  |L1.2578|
;;;1981   			res = create_name(dj, &path);	/* Get a segment */
000a12  a901              ADD      r1,sp,#4
000a14  4620              MOV      r0,r4
000a16  f7fffffe          BL       create_name
000a1a  4605              MOV      r5,r0
;;;1982   			if (res != FR_OK) break;
000a1c  b105              CBZ      r5,|L1.2592|
000a1e  e020              B        |L1.2658|
                  |L1.2592|
;;;1983   			res = dir_find(dj);				/* Find it */
000a20  4620              MOV      r0,r4
000a22  f7fffffe          BL       dir_find
000a26  4605              MOV      r5,r0
;;;1984   			ns = *(dj->fn+NS);
000a28  69a0              LDR      r0,[r4,#0x18]
000a2a  7ac6              LDRB     r6,[r0,#0xb]
;;;1985   			if (res != FR_OK) {				/* Failed to find the object */
000a2c  b145              CBZ      r5,|L1.2624|
;;;1986   				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
000a2e  2d04              CMP      r5,#4
000a30  d000              BEQ      |L1.2612|
000a32  e016              B        |L1.2658|
                  |L1.2612|
;;;1987   				/* Object not found */
;;;1988   				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
000a34  bf00              NOP      
;;;1989   					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
;;;1990   					res = FR_OK;
;;;1991   					if (!(ns & NS_LAST)) continue;
;;;1992   				} else {							/* Could not find the object */
;;;1993   					if (!(ns & NS_LAST)) res = FR_NO_PATH;
000a36  f0060004          AND      r0,r6,#4
000a3a  b900              CBNZ     r0,|L1.2622|
000a3c  2505              MOVS     r5,#5
                  |L1.2622|
;;;1994   				}
;;;1995   				break;
000a3e  e010              B        |L1.2658|
                  |L1.2624|
;;;1996   			}
;;;1997   			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
000a40  f0060004          AND      r0,r6,#4
000a44  b100              CBZ      r0,|L1.2632|
000a46  e00c              B        |L1.2658|
                  |L1.2632|
;;;1998   			dir = dj->dir;						/* There is next segment. Follow the sub directory */
000a48  6967              LDR      r7,[r4,#0x14]
;;;1999   			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
000a4a  7af8              LDRB     r0,[r7,#0xb]
000a4c  f0000010          AND      r0,r0,#0x10
000a50  b908              CBNZ     r0,|L1.2646|
;;;2000   				res = FR_NO_PATH; break;
000a52  2505              MOVS     r5,#5
000a54  e005              B        |L1.2658|
                  |L1.2646|
;;;2001   			}
;;;2002   			dj->sclust = ld_clust(dj->fs, dir);
000a56  4639              MOV      r1,r7
000a58  6820              LDR      r0,[r4,#0]
000a5a  f7fffffe          BL       ld_clust
000a5e  60a0              STR      r0,[r4,#8]
000a60  e7d7              B        |L1.2578|
                  |L1.2658|
000a62  bf00              NOP                            ;1982
                  |L1.2660|
;;;2003   		}
;;;2004   	}
;;;2005   
;;;2006   	return res;
000a64  4628              MOV      r0,r5
;;;2007   }
000a66  e8bd81fc          POP      {r2-r8,pc}
;;;2008   
                          ENDP

                  check_fs PROC
;;;2016   static
;;;2017   BYTE check_fs (	/* 0:FAT-VBR, 1:Any BR but not FAT, 2:Not a BR, 3:Disk error */
000a6a  b570              PUSH     {r4-r6,lr}
;;;2018   	FATFS *fs,	/* File system object */
;;;2019   	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
;;;2020   )
;;;2021   {
000a6c  4604              MOV      r4,r0
000a6e  460d              MOV      r5,r1
;;;2022   	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
000a70  7860              LDRB     r0,[r4,#1]
000a72  2301              MOVS     r3,#1
000a74  462a              MOV      r2,r5
000a76  f1040130          ADD      r1,r4,#0x30
000a7a  f7fffffe          BL       disk_read
000a7e  b108              CBZ      r0,|L1.2692|
;;;2023   		return 3;
000a80  2003              MOVS     r0,#3
                  |L1.2690|
;;;2024   	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
;;;2025   		return 2;
;;;2026   
;;;2027   	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
;;;2028   		return 0;
;;;2029   	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
;;;2030   		return 0;
;;;2031   
;;;2032   	return 1;
;;;2033   }
000a82  bd70              POP      {r4-r6,pc}
                  |L1.2692|
000a84  f894122e          LDRB     r1,[r4,#0x22e]        ;2024
000a88  f894022f          LDRB     r0,[r4,#0x22f]        ;2024
000a8c  ea412000          ORR      r0,r1,r0,LSL #8       ;2024
000a90  f64a2155          MOV      r1,#0xaa55            ;2024
000a94  4288              CMP      r0,r1                 ;2024
000a96  d001              BEQ      |L1.2716|
000a98  2002              MOVS     r0,#2                 ;2025
000a9a  e7f2              B        |L1.2690|
                  |L1.2716|
000a9c  f8940069          LDRB     r0,[r4,#0x69]         ;2027
000aa0  0601              LSLS     r1,r0,#24             ;2027
000aa2  f8940068          LDRB     r0,[r4,#0x68]         ;2027
000aa6  ea414100          ORR      r1,r1,r0,LSL #16      ;2027
000aaa  f8940067          LDRB     r0,[r4,#0x67]         ;2027
000aae  ea412000          ORR      r0,r1,r0,LSL #8       ;2027
000ab2  f8941066          LDRB     r1,[r4,#0x66]         ;2027
000ab6  4308              ORRS     r0,r0,r1              ;2027
000ab8  f020407f          BIC      r0,r0,#0xff000000     ;2027
000abc  4981              LDR      r1,|L1.3268|
000abe  4288              CMP      r0,r1                 ;2027
000ac0  d101              BNE      |L1.2758|
000ac2  2000              MOVS     r0,#0                 ;2028
000ac4  e7dd              B        |L1.2690|
                  |L1.2758|
000ac6  f8940085          LDRB     r0,[r4,#0x85]         ;2029
000aca  0601              LSLS     r1,r0,#24             ;2029
000acc  f8940084          LDRB     r0,[r4,#0x84]         ;2029
000ad0  ea414100          ORR      r1,r1,r0,LSL #16      ;2029
000ad4  f8940083          LDRB     r0,[r4,#0x83]         ;2029
000ad8  ea412000          ORR      r0,r1,r0,LSL #8       ;2029
000adc  f8941082          LDRB     r1,[r4,#0x82]         ;2029
000ae0  4308              ORRS     r0,r0,r1              ;2029
000ae2  f020407f          BIC      r0,r0,#0xff000000     ;2029
000ae6  4977              LDR      r1,|L1.3268|
000ae8  4288              CMP      r0,r1                 ;2029
000aea  d101              BNE      |L1.2800|
000aec  2000              MOVS     r0,#0                 ;2030
000aee  e7c8              B        |L1.2690|
                  |L1.2800|
000af0  2001              MOVS     r0,#1                 ;2032
000af2  e7c6              B        |L1.2690|
;;;2034   
                          ENDP

                  chk_mounted PROC
;;;2042   static
;;;2043   FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
000af4  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;2044   	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
;;;2045   	FATFS **rfs,		/* Pointer to pointer to the found file system object */
;;;2046   	BYTE wmode			/* !=0: Check write protection for write access */
;;;2047   )
;;;2048   {
000af8  b088              SUB      sp,sp,#0x20
;;;2049   	BYTE fmt, b, pi, *tbl;
;;;2050   	UINT vol;
;;;2051   	DSTATUS stat;
;;;2052   	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
;;;2053   	WORD nrsv;
;;;2054   	const TCHAR *p = *path;
000afa  9808              LDR      r0,[sp,#0x20]
000afc  6800              LDR      r0,[r0,#0]
000afe  9001              STR      r0,[sp,#4]
;;;2055   	FATFS *fs;
;;;2056   
;;;2057   
;;;2058   	/* Get logical drive number from the path name */
;;;2059   	vol = p[0] - '0';					/* Is there a drive number? */
000b00  9801              LDR      r0,[sp,#4]
000b02  7800              LDRB     r0,[r0,#0]
000b04  3830              SUBS     r0,r0,#0x30
000b06  9007              STR      r0,[sp,#0x1c]
;;;2060   	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
000b08  9807              LDR      r0,[sp,#0x1c]
000b0a  2809              CMP      r0,#9
000b0c  d80a              BHI      |L1.2852|
000b0e  9801              LDR      r0,[sp,#4]
000b10  7840              LDRB     r0,[r0,#1]
000b12  283a              CMP      r0,#0x3a
000b14  d106              BNE      |L1.2852|
;;;2061   		p += 2; *path = p;				/* Return pointer to the path name */
000b16  9801              LDR      r0,[sp,#4]
000b18  1c80              ADDS     r0,r0,#2
000b1a  9001              STR      r0,[sp,#4]
000b1c  9908              LDR      r1,[sp,#0x20]
000b1e  9801              LDR      r0,[sp,#4]
000b20  6008              STR      r0,[r1,#0]
000b22  e001              B        |L1.2856|
                  |L1.2852|
;;;2062   	} else {							/* No drive number is given */
;;;2063   #if _FS_RPATH
;;;2064   		vol = CurrVol;					/* Use current drive */
;;;2065   #else
;;;2066   		vol = 0;						/* Use drive 0 */
000b24  2000              MOVS     r0,#0
000b26  9007              STR      r0,[sp,#0x1c]
                  |L1.2856|
;;;2067   #endif
;;;2068   	}
;;;2069   
;;;2070   	/* Check if the file system object is valid or not */
;;;2071   	*rfs = 0;
000b28  2100              MOVS     r1,#0
000b2a  9809              LDR      r0,[sp,#0x24]
000b2c  6001              STR      r1,[r0,#0]
;;;2072   	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
000b2e  9807              LDR      r0,[sp,#0x1c]
000b30  b118              CBZ      r0,|L1.2874|
;;;2073   		return FR_INVALID_DRIVE;
000b32  200b              MOVS     r0,#0xb
                  |L1.2868|
;;;2074   	fs = FatFs[vol];					/* Get corresponding file system object */
;;;2075   	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
;;;2076   
;;;2077   	ENTER_FF(fs);						/* Lock file system */
;;;2078   
;;;2079   	*rfs = fs;							/* Return pointer to the corresponding file system object */
;;;2080   	if (fs->fs_type) {					/* If the volume has been mounted */
;;;2081   		stat = disk_status(fs->drv);
;;;2082   		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
;;;2083   			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
;;;2084   				return FR_WRITE_PROTECTED;
;;;2085   			return FR_OK;				/* The file system object is valid */
;;;2086   		}
;;;2087   	}
;;;2088   
;;;2089   	/* The file system object is not valid. */
;;;2090   	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */
;;;2091   
;;;2092   	fs->fs_type = 0;					/* Clear the file system object */
;;;2093   	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
;;;2094   	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
;;;2095   	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
;;;2096   		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
;;;2097   	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
;;;2098   		return FR_WRITE_PROTECTED;
;;;2099   #if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
;;;2100   	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
;;;2101   		return FR_DISK_ERR;
;;;2102   #endif
;;;2103   	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
;;;2104   	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
;;;2105   	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
;;;2106   	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
;;;2107   		/* Check the partition listed in the partition table */
;;;2108   		pi = LD2PT(vol);
;;;2109   		if (pi) pi--;
;;;2110   		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
;;;2111   		if (tbl[4]) {						/* Is the partition existing? */
;;;2112   			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
;;;2113   			fmt = check_fs(fs, bsect);		/* Check the partition */
;;;2114   		}
;;;2115   	}
;;;2116   	if (fmt == 3) return FR_DISK_ERR;
;;;2117   	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
;;;2118   
;;;2119   	/* An FAT volume is found. Following code initializes the file system object */
;;;2120   
;;;2121   	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
;;;2122   		return FR_NO_FILESYSTEM;
;;;2123   
;;;2124   	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
;;;2125   	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
;;;2126   	fs->fsize = fasize;
;;;2127   
;;;2128   	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
;;;2129   	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
;;;2130   	fasize *= b;										/* Number of sectors for FAT area */
;;;2131   
;;;2132   	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
;;;2133   	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
;;;2134   
;;;2135   	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
;;;2136   	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
;;;2137   
;;;2138   	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
;;;2139   	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
;;;2140   
;;;2141   	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
;;;2142   	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
;;;2143   
;;;2144   	/* Determine the FAT sub type */
;;;2145   	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
;;;2146   	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
;;;2147   	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
;;;2148   	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
;;;2149   	fmt = FS_FAT12;
;;;2150   	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
;;;2151   	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
;;;2152   
;;;2153   	/* Boundaries and Limits */
;;;2154   	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
;;;2155   	fs->database = bsect + sysect;						/* Data start sector */
;;;2156   	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
;;;2157   	if (fmt == FS_FAT32) {
;;;2158   		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
;;;2159   		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
;;;2160   		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
;;;2161   	} else {
;;;2162   		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
;;;2163   		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
;;;2164   		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
;;;2165   			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
;;;2166   	}
;;;2167   	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
;;;2168   		return FR_NO_FILESYSTEM;
;;;2169   
;;;2170   #if !_FS_READONLY
;;;2171   	/* Initialize cluster allocation information */
;;;2172   	fs->free_clust = 0xFFFFFFFF;
;;;2173   	fs->last_clust = 0;
;;;2174   
;;;2175   	/* Get fsinfo if available */
;;;2176   	if (fmt == FS_FAT32) {
;;;2177   	 	fs->fsi_flag = 0;
;;;2178   		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
;;;2179   		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
;;;2180   			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
;;;2181   			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
;;;2182   			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
;;;2183   				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
;;;2184   				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
;;;2185   		}
;;;2186   	}
;;;2187   #endif
;;;2188   	fs->fs_type = fmt;		/* FAT sub-type */
;;;2189   	fs->id = ++Fsid;		/* File system mount ID */
;;;2190   	fs->winsect = 0;		/* Invalidate sector cache */
;;;2191   	fs->wflag = 0;
;;;2192   #if _FS_RPATH
;;;2193   	fs->cdir = 0;			/* Current directory (root dir) */
;;;2194   #endif
;;;2195   #if _FS_LOCK				/* Clear file lock semaphores */
;;;2196   	clear_lock(fs);
;;;2197   #endif
;;;2198   
;;;2199   	return FR_OK;
;;;2200   }
000b34  b00b              ADD      sp,sp,#0x2c
000b36  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.2874|
000b3a  4963              LDR      r1,|L1.3272|
000b3c  9807              LDR      r0,[sp,#0x1c]         ;2074
000b3e  f8514020          LDR      r4,[r1,r0,LSL #2]     ;2074
000b42  b90c              CBNZ     r4,|L1.2888|
000b44  200c              MOVS     r0,#0xc               ;2075
000b46  e7f5              B        |L1.2868|
                  |L1.2888|
000b48  9809              LDR      r0,[sp,#0x24]         ;2079
000b4a  6004              STR      r4,[r0,#0]            ;2079
000b4c  7820              LDRB     r0,[r4,#0]            ;2080
000b4e  b178              CBZ      r0,|L1.2928|
000b50  7860              LDRB     r0,[r4,#1]            ;2081
000b52  f7fffffe          BL       disk_status
000b56  4680              MOV      r8,r0                 ;2081
000b58  f0080001          AND      r0,r8,#1              ;2082
000b5c  b940              CBNZ     r0,|L1.2928|
000b5e  980a              LDR      r0,[sp,#0x28]         ;2083
000b60  b120              CBZ      r0,|L1.2924|
000b62  f0080004          AND      r0,r8,#4              ;2083
000b66  b108              CBZ      r0,|L1.2924|
000b68  200a              MOVS     r0,#0xa               ;2084
000b6a  e7e3              B        |L1.2868|
                  |L1.2924|
000b6c  2000              MOVS     r0,#0                 ;2085
000b6e  e7e1              B        |L1.2868|
                  |L1.2928|
000b70  2000              MOVS     r0,#0                 ;2092
000b72  7020              STRB     r0,[r4,#0]            ;2092
000b74  9807              LDR      r0,[sp,#0x1c]         ;2093
000b76  7060              STRB     r0,[r4,#1]            ;2093
000b78  7860              LDRB     r0,[r4,#1]            ;2094
000b7a  f7fffffe          BL       disk_initialize
000b7e  4680              MOV      r8,r0                 ;2094
000b80  f0080001          AND      r0,r8,#1              ;2095
000b84  b108              CBZ      r0,|L1.2954|
000b86  2003              MOVS     r0,#3                 ;2096
000b88  e7d4              B        |L1.2868|
                  |L1.2954|
000b8a  980a              LDR      r0,[sp,#0x28]         ;2097
000b8c  b120              CBZ      r0,|L1.2968|
000b8e  f0080004          AND      r0,r8,#4              ;2097
000b92  b108              CBZ      r0,|L1.2968|
000b94  200a              MOVS     r0,#0xa               ;2098
000b96  e7cd              B        |L1.2868|
                  |L1.2968|
000b98  f04f0b00          MOV      r11,#0                ;2104
000b9c  4659              MOV      r1,r11                ;2104
000b9e  4620              MOV      r0,r4                 ;2104
000ba0  f7fffffe          BL       check_fs
000ba4  4605              MOV      r5,r0                 ;2104
000ba6  bf00              NOP                            ;2105
000ba8  2d01              CMP      r5,#1                 ;2106
000baa  d121              BNE      |L1.3056|
000bac  f04f0a00          MOV      r10,#0                ;2108
000bb0  f1ba0f00          CMP      r10,#0                ;2109
000bb4  d003              BEQ      |L1.3006|
000bb6  f1aa0001          SUB      r0,r10,#1             ;2109
000bba  f0000aff          AND      r10,r0,#0xff          ;2109
                  |L1.3006|
000bbe  f44f70df          MOV      r0,#0x1be             ;2110
000bc2  eb00110a          ADD      r1,r0,r10,LSL #4      ;2110
000bc6  f1040030          ADD      r0,r4,#0x30           ;2110
000bca  180f              ADDS     r7,r1,r0              ;2110
000bcc  7938              LDRB     r0,[r7,#4]            ;2111
000bce  b178              CBZ      r0,|L1.3056|
000bd0  7af8              LDRB     r0,[r7,#0xb]          ;2112
000bd2  0601              LSLS     r1,r0,#24             ;2112
000bd4  7ab8              LDRB     r0,[r7,#0xa]          ;2112
000bd6  ea414100          ORR      r1,r1,r0,LSL #16      ;2112
000bda  7a78              LDRB     r0,[r7,#9]            ;2112
000bdc  ea412000          ORR      r0,r1,r0,LSL #8       ;2112
000be0  7a39              LDRB     r1,[r7,#8]            ;2112
000be2  ea400b01          ORR      r11,r0,r1             ;2112
000be6  4659              MOV      r1,r11                ;2113
000be8  4620              MOV      r0,r4                 ;2113
000bea  f7fffffe          BL       check_fs
000bee  4605              MOV      r5,r0                 ;2113
                  |L1.3056|
000bf0  2d03              CMP      r5,#3                 ;2116
000bf2  d101              BNE      |L1.3064|
000bf4  2001              MOVS     r0,#1                 ;2116
000bf6  e79d              B        |L1.2868|
                  |L1.3064|
000bf8  b10d              CBZ      r5,|L1.3070|
000bfa  200d              MOVS     r0,#0xd               ;2117
000bfc  e79a              B        |L1.2868|
                  |L1.3070|
000bfe  203b              MOVS     r0,#0x3b              ;2121
000c00  5d01              LDRB     r1,[r0,r4]            ;2121
000c02  f894003c          LDRB     r0,[r4,#0x3c]         ;2121
000c06  ea412000          ORR      r0,r1,r0,LSL #8       ;2121
000c0a  f5b07f00          CMP      r0,#0x200             ;2121
000c0e  d001              BEQ      |L1.3092|
000c10  200d              MOVS     r0,#0xd               ;2122
000c12  e78f              B        |L1.2868|
                  |L1.3092|
000c14  2046              MOVS     r0,#0x46              ;2124
000c16  5d01              LDRB     r1,[r0,r4]            ;2124
000c18  f8940047          LDRB     r0,[r4,#0x47]         ;2124
000c1c  ea412900          ORR      r9,r1,r0,LSL #8       ;2124
000c20  f1b90f00          CMP      r9,#0                 ;2125
000c24  d10e              BNE      |L1.3140|
000c26  f8940057          LDRB     r0,[r4,#0x57]         ;2125
000c2a  0601              LSLS     r1,r0,#24             ;2125
000c2c  f8940056          LDRB     r0,[r4,#0x56]         ;2125
000c30  ea414100          ORR      r1,r1,r0,LSL #16      ;2125
000c34  f8940055          LDRB     r0,[r4,#0x55]         ;2125
000c38  ea412000          ORR      r0,r1,r0,LSL #8       ;2125
000c3c  f8941054          LDRB     r1,[r4,#0x54]         ;2125
000c40  ea400901          ORR      r9,r0,r1              ;2125
                  |L1.3140|
000c44  f8c4901c          STR      r9,[r4,#0x1c]         ;2126
000c48  2040              MOVS     r0,#0x40              ;2128
000c4a  5d06              LDRB     r6,[r0,r4]            ;2128
000c4c  70e6              STRB     r6,[r4,#3]            ;2128
000c4e  2e01              CMP      r6,#1                 ;2129
000c50  d003              BEQ      |L1.3162|
000c52  2e02              CMP      r6,#2                 ;2129
000c54  d001              BEQ      |L1.3162|
000c56  200d              MOVS     r0,#0xd               ;2129
000c58  e76c              B        |L1.2868|
                  |L1.3162|
000c5a  fb09f906          MUL      r9,r9,r6              ;2130
000c5e  203d              MOVS     r0,#0x3d              ;2132
000c60  5d00              LDRB     r0,[r0,r4]            ;2132
000c62  4606              MOV      r6,r0                 ;2132
000c64  70a0              STRB     r0,[r4,#2]            ;2132
000c66  b116              CBZ      r6,|L1.3182|
000c68  1e70              SUBS     r0,r6,#1              ;2133
000c6a  4030              ANDS     r0,r0,r6              ;2133
000c6c  b108              CBZ      r0,|L1.3186|
                  |L1.3182|
000c6e  200d              MOVS     r0,#0xd               ;2133
000c70  e760              B        |L1.2868|
                  |L1.3186|
000c72  2041              MOVS     r0,#0x41              ;2135
000c74  5d01              LDRB     r1,[r0,r4]            ;2135
000c76  f8940042          LDRB     r0,[r4,#0x42]         ;2135
000c7a  ea412000          ORR      r0,r1,r0,LSL #8       ;2135
000c7e  8120              STRH     r0,[r4,#8]            ;2135
000c80  7a20              LDRB     r0,[r4,#8]            ;2136
000c82  f000000f          AND      r0,r0,#0xf            ;2136
000c86  b108              CBZ      r0,|L1.3212|
000c88  200d              MOVS     r0,#0xd               ;2136
000c8a  e753              B        |L1.2868|
                  |L1.3212|
000c8c  2043              MOVS     r0,#0x43              ;2138
000c8e  5d01              LDRB     r1,[r0,r4]            ;2138
000c90  f8940044          LDRB     r0,[r4,#0x44]         ;2138
000c94  ea412000          ORR      r0,r1,r0,LSL #8       ;2138
000c98  9006              STR      r0,[sp,#0x18]         ;2138
000c9a  9806              LDR      r0,[sp,#0x18]         ;2139
000c9c  b9e0              CBNZ     r0,|L1.3288|
000c9e  f8940053          LDRB     r0,[r4,#0x53]         ;2139
000ca2  0601              LSLS     r1,r0,#24             ;2139
000ca4  f8940052          LDRB     r0,[r4,#0x52]         ;2139
000ca8  ea414100          ORR      r1,r1,r0,LSL #16      ;2139
000cac  f8940051          LDRB     r0,[r4,#0x51]         ;2139
000cb0  e00c              B        |L1.3276|
000cb2  0000              DCW      0x0000
                  |L1.3252|
000cb4  222a2b2c          DCB      """*+,:;<=>?[]|",127,0
000cb8  3a3b3c3d
000cbc  3e3f5b5d
000cc0  7c7f00  
000cc3  00                DCB      0
                  |L1.3268|
                          DCD      0x00544146
                  |L1.3272|
                          DCD      FatFs
                  |L1.3276|
000ccc  ea412000          ORR      r0,r1,r0,LSL #8       ;2139
000cd0  f8941050          LDRB     r1,[r4,#0x50]         ;2139
000cd4  4308              ORRS     r0,r0,r1              ;2139
000cd6  9006              STR      r0,[sp,#0x18]         ;2139
                  |L1.3288|
000cd8  203e              MOVS     r0,#0x3e              ;2141
000cda  5d01              LDRB     r1,[r0,r4]            ;2141
000cdc  f894003f          LDRB     r0,[r4,#0x3f]         ;2141
000ce0  ea412000          ORR      r0,r1,r0,LSL #8       ;2141
000ce4  9002              STR      r0,[sp,#8]            ;2141
000ce6  9802              LDR      r0,[sp,#8]            ;2142
000ce8  b908              CBNZ     r0,|L1.3310|
000cea  200d              MOVS     r0,#0xd               ;2142
000cec  e722              B        |L1.2868|
                  |L1.3310|
000cee  9802              LDR      r0,[sp,#8]            ;2145
000cf0  4448              ADD      r0,r0,r9              ;2145
000cf2  8921              LDRH     r1,[r4,#8]            ;2145
000cf4  eb001011          ADD      r0,r0,r1,LSR #4       ;2145
000cf8  9005              STR      r0,[sp,#0x14]         ;2145
000cfa  e9dd0105          LDRD     r0,r1,[sp,#0x14]      ;2146
000cfe  4281              CMP      r1,r0                 ;2146
000d00  d201              BCS      |L1.3334|
000d02  200d              MOVS     r0,#0xd               ;2146
000d04  e716              B        |L1.2868|
                  |L1.3334|
000d06  e9dd1005          LDRD     r1,r0,[sp,#0x14]      ;2147
000d0a  1a40              SUBS     r0,r0,r1              ;2147
000d0c  78a1              LDRB     r1,[r4,#2]            ;2147
000d0e  fbb0f0f1          UDIV     r0,r0,r1              ;2147
000d12  9004              STR      r0,[sp,#0x10]         ;2147
000d14  9804              LDR      r0,[sp,#0x10]         ;2148
000d16  b908              CBNZ     r0,|L1.3356|
000d18  200d              MOVS     r0,#0xd               ;2148
000d1a  e70b              B        |L1.2868|
                  |L1.3356|
000d1c  2501              MOVS     r5,#1                 ;2149
000d1e  f64071f6          MOV      r1,#0xff6             ;2150
000d22  9804              LDR      r0,[sp,#0x10]         ;2150
000d24  4288              CMP      r0,r1                 ;2150
000d26  d300              BCC      |L1.3370|
000d28  2502              MOVS     r5,#2                 ;2150
                  |L1.3370|
000d2a  f64f71f6          MOV      r1,#0xfff6            ;2151
000d2e  9804              LDR      r0,[sp,#0x10]         ;2151
000d30  4288              CMP      r0,r1                 ;2151
000d32  d300              BCC      |L1.3382|
000d34  2503              MOVS     r5,#3                 ;2151
                  |L1.3382|
000d36  9804              LDR      r0,[sp,#0x10]         ;2154
000d38  1c80              ADDS     r0,r0,#2              ;2154
000d3a  61a0              STR      r0,[r4,#0x18]         ;2154
000d3c  9805              LDR      r0,[sp,#0x14]         ;2155
000d3e  4458              ADD      r0,r0,r11             ;2155
000d40  62a0              STR      r0,[r4,#0x28]         ;2155
000d42  9802              LDR      r0,[sp,#8]            ;2156
000d44  4458              ADD      r0,r0,r11             ;2156
000d46  6220              STR      r0,[r4,#0x20]         ;2156
000d48  2d03              CMP      r5,#3                 ;2157
000d4a  d116              BNE      |L1.3450|
000d4c  8920              LDRH     r0,[r4,#8]            ;2158
000d4e  b108              CBZ      r0,|L1.3412|
000d50  200d              MOVS     r0,#0xd               ;2158
000d52  e6ef              B        |L1.2868|
                  |L1.3412|
000d54  f894005f          LDRB     r0,[r4,#0x5f]         ;2159
000d58  0601              LSLS     r1,r0,#24             ;2159
000d5a  f894005e          LDRB     r0,[r4,#0x5e]         ;2159
000d5e  ea414100          ORR      r1,r1,r0,LSL #16      ;2159
000d62  f894005d          LDRB     r0,[r4,#0x5d]         ;2159
000d66  ea412000          ORR      r0,r1,r0,LSL #8       ;2159
000d6a  f894105c          LDRB     r1,[r4,#0x5c]         ;2159
000d6e  4308              ORRS     r0,r0,r1              ;2159
000d70  6260              STR      r0,[r4,#0x24]         ;2159
000d72  69a0              LDR      r0,[r4,#0x18]         ;2160
000d74  0080              LSLS     r0,r0,#2              ;2160
000d76  9003              STR      r0,[sp,#0xc]          ;2160
000d78  e014              B        |L1.3492|
                  |L1.3450|
000d7a  8920              LDRH     r0,[r4,#8]            ;2162
000d7c  b908              CBNZ     r0,|L1.3458|
000d7e  200d              MOVS     r0,#0xd               ;2162
000d80  e6d8              B        |L1.2868|
                  |L1.3458|
000d82  6a20              LDR      r0,[r4,#0x20]         ;2163
000d84  4448              ADD      r0,r0,r9              ;2163
000d86  6260              STR      r0,[r4,#0x24]         ;2163
000d88  2d02              CMP      r5,#2                 ;2164
000d8a  d102              BNE      |L1.3474|
000d8c  69a0              LDR      r0,[r4,#0x18]         ;2165
000d8e  0040              LSLS     r0,r0,#1              ;2165
000d90  e007              B        |L1.3490|
                  |L1.3474|
000d92  7e20              LDRB     r0,[r4,#0x18]         ;2165
000d94  f0000001          AND      r0,r0,#1              ;2165
000d98  69a1              LDR      r1,[r4,#0x18]         ;2165
000d9a  eb010141          ADD      r1,r1,r1,LSL #1       ;2165
000d9e  eb000051          ADD      r0,r0,r1,LSR #1       ;2165
                  |L1.3490|
000da2  9003              STR      r0,[sp,#0xc]          ;2165
                  |L1.3492|
000da4  69e1              LDR      r1,[r4,#0x1c]         ;2167
000da6  9803              LDR      r0,[sp,#0xc]          ;2167
000da8  f20010ff          ADD      r0,r0,#0x1ff          ;2167
000dac  ebb12f50          CMP      r1,r0,LSR #9          ;2167
000db0  d201              BCS      |L1.3510|
000db2  200d              MOVS     r0,#0xd               ;2168
000db4  e6be              B        |L1.2868|
                  |L1.3510|
000db6  f04f30ff          MOV      r0,#0xffffffff        ;2172
000dba  6120              STR      r0,[r4,#0x10]         ;2172
000dbc  2000              MOVS     r0,#0                 ;2173
000dbe  60e0              STR      r0,[r4,#0xc]          ;2173
000dc0  2d03              CMP      r5,#3                 ;2176
000dc2  d15c              BNE      |L1.3710|
000dc4  7160              STRB     r0,[r4,#5]            ;2177
000dc6  f8941060          LDRB     r1,[r4,#0x60]         ;2178
000dca  f8940061          LDRB     r0,[r4,#0x61]         ;2178
000dce  ea412000          ORR      r0,r1,r0,LSL #8       ;2178
000dd2  4458              ADD      r0,r0,r11             ;2178
000dd4  6160              STR      r0,[r4,#0x14]         ;2178
000dd6  7860              LDRB     r0,[r4,#1]            ;2179
000dd8  2301              MOVS     r3,#1                 ;2179
000dda  f1040130          ADD      r1,r4,#0x30           ;2179
000dde  6962              LDR      r2,[r4,#0x14]         ;2179
000de0  f7fffffe          BL       disk_read
000de4  bbf0              CBNZ     r0,|L1.3684|
000de6  f894122e          LDRB     r1,[r4,#0x22e]        ;2180
000dea  f894022f          LDRB     r0,[r4,#0x22f]        ;2180
000dee  ea412000          ORR      r0,r1,r0,LSL #8       ;2180
000df2  f64a2155          MOV      r1,#0xaa55            ;2180
000df6  4288              CMP      r0,r1                 ;2180
000df8  d141              BNE      |L1.3710|
000dfa  2033              MOVS     r0,#0x33              ;2181
000dfc  5d00              LDRB     r0,[r0,r4]            ;2181
000dfe  0601              LSLS     r1,r0,#24             ;2181
000e00  2032              MOVS     r0,#0x32              ;2181
000e02  5d00              LDRB     r0,[r0,r4]            ;2181
000e04  ea414100          ORR      r1,r1,r0,LSL #16      ;2181
000e08  2031              MOVS     r0,#0x31              ;2181
000e0a  5d00              LDRB     r0,[r0,r4]            ;2181
000e0c  ea412000          ORR      r0,r1,r0,LSL #8       ;2181
000e10  f8941030          LDRB     r1,[r4,#0x30]         ;2181
000e14  4308              ORRS     r0,r0,r1              ;2181
000e16  49fe              LDR      r1,|L1.4624|
000e18  4288              CMP      r0,r1                 ;2181
000e1a  d130              BNE      |L1.3710|
000e1c  f8940217          LDRB     r0,[r4,#0x217]        ;2182
000e20  0601              LSLS     r1,r0,#24             ;2182
000e22  f8940216          LDRB     r0,[r4,#0x216]        ;2182
000e26  ea414100          ORR      r1,r1,r0,LSL #16      ;2182
000e2a  f8940215          LDRB     r0,[r4,#0x215]        ;2182
000e2e  ea412000          ORR      r0,r1,r0,LSL #8       ;2182
000e32  f8941214          LDRB     r1,[r4,#0x214]        ;2182
000e36  4308              ORRS     r0,r0,r1              ;2182
000e38  49f6              LDR      r1,|L1.4628|
000e3a  4288              CMP      r0,r1                 ;2182
000e3c  d11f              BNE      |L1.3710|
000e3e  f894021f          LDRB     r0,[r4,#0x21f]        ;2183
000e42  0601              LSLS     r1,r0,#24             ;2183
000e44  f894021e          LDRB     r0,[r4,#0x21e]        ;2183
000e48  ea414100          ORR      r1,r1,r0,LSL #16      ;2183
000e4c  f894021d          LDRB     r0,[r4,#0x21d]        ;2183
000e50  ea412000          ORR      r0,r1,r0,LSL #8       ;2183
000e54  f894121c          LDRB     r1,[r4,#0x21c]        ;2183
000e58  4308              ORRS     r0,r0,r1              ;2183
000e5a  60e0              STR      r0,[r4,#0xc]          ;2183
000e5c  f894021b          LDRB     r0,[r4,#0x21b]        ;2184
000e60  0601              LSLS     r1,r0,#24             ;2184
000e62  e000              B        |L1.3686|
                  |L1.3684|
000e64  e00b              B        |L1.3710|
                  |L1.3686|
000e66  f894021a          LDRB     r0,[r4,#0x21a]        ;2184
000e6a  ea414100          ORR      r1,r1,r0,LSL #16      ;2184
000e6e  f8940219          LDRB     r0,[r4,#0x219]        ;2184
000e72  ea412000          ORR      r0,r1,r0,LSL #8       ;2184
000e76  f8941218          LDRB     r1,[r4,#0x218]        ;2184
000e7a  4308              ORRS     r0,r0,r1              ;2184
000e7c  6120              STR      r0,[r4,#0x10]         ;2184
                  |L1.3710|
000e7e  7025              STRB     r5,[r4,#0]            ;2188
000e80  48e5              LDR      r0,|L1.4632|
000e82  8800              LDRH     r0,[r0,#0]            ;2189  ; Fsid
000e84  1c40              ADDS     r0,r0,#1              ;2189
000e86  b280              UXTH     r0,r0                 ;2189
000e88  49e3              LDR      r1,|L1.4632|
000e8a  8008              STRH     r0,[r1,#0]            ;2189
000e8c  80e0              STRH     r0,[r4,#6]            ;2189
000e8e  2000              MOVS     r0,#0                 ;2190
000e90  62e0              STR      r0,[r4,#0x2c]         ;2190
000e92  7120              STRB     r0,[r4,#4]            ;2191
000e94  bf00              NOP                            ;2199
000e96  e64d              B        |L1.2868|
;;;2201   
                          ENDP

                  validate PROC
;;;2209   static
;;;2210   FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
000e98  b570              PUSH     {r4-r6,lr}
;;;2211   	void* obj		/* Pointer to the object FIL/DIR to check validity */
;;;2212   )
;;;2213   {
000e9a  4605              MOV      r5,r0
;;;2214   	FIL *fil;
;;;2215   
;;;2216   
;;;2217   	fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
000e9c  462c              MOV      r4,r5
;;;2218   	if (!fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
000e9e  6820              LDR      r0,[r4,#0]
000ea0  b138              CBZ      r0,|L1.3762|
000ea2  6820              LDR      r0,[r4,#0]
000ea4  7800              LDRB     r0,[r0,#0]
000ea6  b120              CBZ      r0,|L1.3762|
000ea8  6820              LDR      r0,[r4,#0]
000eaa  88c0              LDRH     r0,[r0,#6]
000eac  88a1              LDRH     r1,[r4,#4]
000eae  4288              CMP      r0,r1
000eb0  d001              BEQ      |L1.3766|
                  |L1.3762|
;;;2219   		return FR_INVALID_OBJECT;
000eb2  2009              MOVS     r0,#9
                  |L1.3764|
;;;2220   
;;;2221   	ENTER_FF(fil->fs);		/* Lock file system */
;;;2222   
;;;2223   	if (disk_status(fil->fs->drv) & STA_NOINIT)
;;;2224   		return FR_NOT_READY;
;;;2225   
;;;2226   	return FR_OK;
;;;2227   }
000eb4  bd70              POP      {r4-r6,pc}
                  |L1.3766|
000eb6  6821              LDR      r1,[r4,#0]            ;2223
000eb8  7848              LDRB     r0,[r1,#1]            ;2223
000eba  f7fffffe          BL       disk_status
000ebe  f0000001          AND      r0,r0,#1              ;2223
000ec2  b108              CBZ      r0,|L1.3784|
000ec4  2003              MOVS     r0,#3                 ;2224
000ec6  e7f5              B        |L1.3764|
                  |L1.3784|
000ec8  2000              MOVS     r0,#0                 ;2226
000eca  e7f3              B        |L1.3764|
;;;2228   
                          ENDP

                  f_mount PROC
;;;2243   
;;;2244   FRESULT f_mount (
000ecc  4602              MOV      r2,r0
;;;2245   	BYTE vol,		/* Logical drive number to be mounted/unmounted */
;;;2246   	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
;;;2247   )
;;;2248   {
;;;2249   	FATFS *rfs;
;;;2250   
;;;2251   
;;;2252   	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
000ece  2a01              CMP      r2,#1
000ed0  db01              BLT      |L1.3798|
;;;2253   		return FR_INVALID_DRIVE;
000ed2  200b              MOVS     r0,#0xb
                  |L1.3796|
;;;2254   	rfs = FatFs[vol];			/* Get current fs object */
;;;2255   
;;;2256   	if (rfs) {
;;;2257   #if _FS_LOCK
;;;2258   		clear_lock(rfs);
;;;2259   #endif
;;;2260   #if _FS_REENTRANT				/* Discard sync object of the current volume */
;;;2261   		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
;;;2262   #endif
;;;2263   		rfs->fs_type = 0;		/* Clear old fs object */
;;;2264   	}
;;;2265   
;;;2266   	if (fs) {
;;;2267   		fs->fs_type = 0;		/* Clear new fs object */
;;;2268   #if _FS_REENTRANT				/* Create sync object for the new volume */
;;;2269   		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
;;;2270   #endif
;;;2271   	}
;;;2272   	FatFs[vol] = fs;			/* Register new fs object */
;;;2273   
;;;2274   	return FR_OK;
;;;2275   }
000ed4  4770              BX       lr
                  |L1.3798|
000ed6  48d1              LDR      r0,|L1.4636|
000ed8  f8503022          LDR      r3,[r0,r2,LSL #2]     ;2254
000edc  b10b              CBZ      r3,|L1.3810|
000ede  2000              MOVS     r0,#0                 ;2263
000ee0  7018              STRB     r0,[r3,#0]            ;2263
                  |L1.3810|
000ee2  b109              CBZ      r1,|L1.3816|
000ee4  2000              MOVS     r0,#0                 ;2267
000ee6  7008              STRB     r0,[r1,#0]            ;2267
                  |L1.3816|
000ee8  48cc              LDR      r0,|L1.4636|
000eea  f8401022          STR      r1,[r0,r2,LSL #2]     ;2272
000eee  2000              MOVS     r0,#0                 ;2274
000ef0  e7f0              B        |L1.3796|
;;;2276   
                          ENDP

                  f_open PROC
;;;2283   
;;;2284   FRESULT f_open (
000ef2  e92d43f7          PUSH     {r0-r2,r4-r9,lr}
;;;2285   	FIL *fp,			/* Pointer to the blank file object */
;;;2286   	const TCHAR *path,	/* Pointer to the file name */
;;;2287   	BYTE mode			/* Access mode and file open mode flags */
;;;2288   )
;;;2289   {
000ef6  b08a              SUB      sp,sp,#0x28
000ef8  4605              MOV      r5,r0
000efa  4616              MOV      r6,r2
;;;2290   	FRESULT res;
;;;2291   	DIR dj;
;;;2292   	BYTE *dir;
;;;2293   	DEF_NAMEBUF;
;;;2294   
;;;2295   
;;;2296   	if (!fp) return FR_INVALID_OBJECT;
000efc  b91d              CBNZ     r5,|L1.3846|
000efe  2009              MOVS     r0,#9
                  |L1.3840|
;;;2297   	fp->fs = 0;			/* Clear file object */
;;;2298   
;;;2299   #if !_FS_READONLY
;;;2300   	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
;;;2301   	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
;;;2302   #else
;;;2303   	mode &= FA_READ;
;;;2304   	res = chk_mounted(&path, &dj.fs, 0);
;;;2305   #endif
;;;2306   	if (res == FR_OK) {
;;;2307   		INIT_BUF(dj);
;;;2308   		res = follow_path(&dj, path);	/* Follow the file path */
;;;2309   		dir = dj.dir;
;;;2310   #if !_FS_READONLY	/* R/W configuration */
;;;2311   		if (res == FR_OK) {
;;;2312   			if (!dir)	/* Current dir itself */
;;;2313   				res = FR_INVALID_NAME;
;;;2314   #if _FS_LOCK
;;;2315   			else
;;;2316   				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
;;;2317   #endif
;;;2318   		}
;;;2319   		/* Create or Open a file */
;;;2320   		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
;;;2321   			DWORD dw, cl;
;;;2322   
;;;2323   			if (res != FR_OK) {					/* No file, create new */
;;;2324   				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
;;;2325   #if _FS_LOCK
;;;2326   					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
;;;2327   #else
;;;2328   					res = dir_register(&dj);
;;;2329   #endif
;;;2330   				mode |= FA_CREATE_ALWAYS;		/* File is created */
;;;2331   				dir = dj.dir;					/* New entry */
;;;2332   			}
;;;2333   			else {								/* Any object is already existing */
;;;2334   				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
;;;2335   					res = FR_DENIED;
;;;2336   				} else {
;;;2337   					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
;;;2338   						res = FR_EXIST;
;;;2339   				}
;;;2340   			}
;;;2341   			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
;;;2342   				dw = get_fattime();					/* Created time */
;;;2343   				ST_DWORD(dir+DIR_CrtTime, dw);
;;;2344   				dir[DIR_Attr] = 0;					/* Reset attribute */
;;;2345   				ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
;;;2346   				cl = ld_clust(dj.fs, dir);			/* Get start cluster */
;;;2347   				st_clust(dir, 0);					/* cluster = 0 */
;;;2348   				dj.fs->wflag = 1;
;;;2349   				if (cl) {							/* Remove the cluster chain if exist */
;;;2350   					dw = dj.fs->winsect;
;;;2351   					res = remove_chain(dj.fs, cl);
;;;2352   					if (res == FR_OK) {
;;;2353   						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
;;;2354   						res = move_window(dj.fs, dw);
;;;2355   					}
;;;2356   				}
;;;2357   			}
;;;2358   		}
;;;2359   		else {	/* Open an existing file */
;;;2360   			if (res == FR_OK) {						/* Follow succeeded */
;;;2361   				if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
;;;2362   					res = FR_NO_FILE;
;;;2363   				} else {
;;;2364   					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
;;;2365   						res = FR_DENIED;
;;;2366   				}
;;;2367   			}
;;;2368   		}
;;;2369   		if (res == FR_OK) {
;;;2370   			if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
;;;2371   				mode |= FA__WRITTEN;
;;;2372   			fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
;;;2373   			fp->dir_ptr = dir;
;;;2374   #if _FS_LOCK
;;;2375   			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
;;;2376   			if (!fp->lockid) res = FR_INT_ERR;
;;;2377   #endif
;;;2378   		}
;;;2379   
;;;2380   #else				/* R/O configuration */
;;;2381   		if (res == FR_OK) {					/* Follow succeeded */
;;;2382   			dir = dj.dir;
;;;2383   			if (!dir) {						/* Current dir itself */
;;;2384   				res = FR_INVALID_NAME;
;;;2385   			} else {
;;;2386   				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
;;;2387   					res = FR_NO_FILE;
;;;2388   			}
;;;2389   		}
;;;2390   #endif
;;;2391   		FREE_BUF();
;;;2392   
;;;2393   		if (res == FR_OK) {
;;;2394   			fp->flag = mode;					/* File access mode */
;;;2395   			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
;;;2396   			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
;;;2397   			fp->fptr = 0;						/* File pointer */
;;;2398   			fp->dsect = 0;
;;;2399   #if _USE_FASTSEEK
;;;2400   			fp->cltbl = 0;						/* Normal seek mode */
;;;2401   #endif
;;;2402   			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
;;;2403   		}
;;;2404   	}
;;;2405   
;;;2406   	LEAVE_FF(dj.fs, res);
;;;2407   }
000f00  b00d              ADD      sp,sp,#0x34
000f02  e8bd83f0          POP      {r4-r9,pc}
                  |L1.3846|
000f06  2000              MOVS     r0,#0                 ;2297
000f08  6028              STR      r0,[r5,#0]            ;2297
000f0a  f006061f          AND      r6,r6,#0x1f           ;2300
000f0e  f0260201          BIC      r2,r6,#1              ;2301
000f12  a903              ADD      r1,sp,#0xc            ;2301
000f14  a80b              ADD      r0,sp,#0x2c           ;2301
000f16  f7fffffe          BL       chk_mounted
000f1a  4607              MOV      r7,r0                 ;2301
000f1c  2f00              CMP      r7,#0                 ;2306
000f1e  d17d              BNE      |L1.4124|
000f20  f8cdd024          STR      sp,[sp,#0x24]         ;2307
000f24  a803              ADD      r0,sp,#0xc            ;2308
000f26  990b              LDR      r1,[sp,#0x2c]         ;2308
000f28  f7fffffe          BL       follow_path
000f2c  4607              MOV      r7,r0                 ;2308
000f2e  9c08              LDR      r4,[sp,#0x20]         ;2309
000f30  b90f              CBNZ     r7,|L1.3894|
000f32  b904              CBNZ     r4,|L1.3894|
000f34  2706              MOVS     r7,#6                 ;2313
                  |L1.3894|
000f36  f006001c          AND      r0,r6,#0x1c           ;2320
000f3a  2800              CMP      r0,#0                 ;2320
000f3c  d051              BEQ      |L1.4066|
000f3e  b14f              CBZ      r7,|L1.3924|
000f40  2f04              CMP      r7,#4                 ;2324
000f42  d103              BNE      |L1.3916|
000f44  a803              ADD      r0,sp,#0xc            ;2328
000f46  f7fffffe          BL       dir_register
000f4a  4607              MOV      r7,r0                 ;2328
                  |L1.3916|
000f4c  f0460608          ORR      r6,r6,#8              ;2330
000f50  9c08              LDR      r4,[sp,#0x20]         ;2331
000f52  e009              B        |L1.3944|
                  |L1.3924|
000f54  7ae0              LDRB     r0,[r4,#0xb]          ;2334
000f56  f0000011          AND      r0,r0,#0x11           ;2334
000f5a  b108              CBZ      r0,|L1.3936|
000f5c  2707              MOVS     r7,#7                 ;2335
000f5e  e003              B        |L1.3944|
                  |L1.3936|
000f60  f0060004          AND      r0,r6,#4              ;2337
000f64  b100              CBZ      r0,|L1.3944|
000f66  2708              MOVS     r7,#8                 ;2338
                  |L1.3944|
000f68  2f00              CMP      r7,#0                 ;2341
000f6a  d139              BNE      |L1.4064|
000f6c  f0060008          AND      r0,r6,#8              ;2341
000f70  2800              CMP      r0,#0                 ;2341
000f72  d035              BEQ      |L1.4064|
000f74  f7fffffe          BL       get_fattime
000f78  4680              MOV      r8,r0                 ;2342
000f7a  f884800e          STRB     r8,[r4,#0xe]          ;2343
000f7e  ea4f2118          LSR      r1,r8,#8              ;2343
000f82  73e1              STRB     r1,[r4,#0xf]          ;2343
000f84  ea4f4118          LSR      r1,r8,#16             ;2343
000f88  7421              STRB     r1,[r4,#0x10]         ;2343
000f8a  ea4f6118          LSR      r1,r8,#24             ;2343
000f8e  7461              STRB     r1,[r4,#0x11]         ;2343
000f90  2000              MOVS     r0,#0                 ;2344
000f92  72e0              STRB     r0,[r4,#0xb]          ;2344
000f94  7720              STRB     r0,[r4,#0x1c]         ;2345
000f96  2100              MOVS     r1,#0                 ;2345
000f98  7761              STRB     r1,[r4,#0x1d]         ;2345
000f9a  77a1              STRB     r1,[r4,#0x1e]         ;2345
000f9c  77e1              STRB     r1,[r4,#0x1f]         ;2345
000f9e  4621              MOV      r1,r4                 ;2346
000fa0  9803              LDR      r0,[sp,#0xc]          ;2346
000fa2  f7fffffe          BL       ld_clust
000fa6  4681              MOV      r9,r0                 ;2346
000fa8  2100              MOVS     r1,#0                 ;2347
000faa  4620              MOV      r0,r4                 ;2347
000fac  f7fffffe          BL       st_clust
000fb0  2001              MOVS     r0,#1                 ;2348
000fb2  9903              LDR      r1,[sp,#0xc]          ;2348
000fb4  7108              STRB     r0,[r1,#4]            ;2348
000fb6  f1b90f00          CMP      r9,#0                 ;2349
000fba  d011              BEQ      |L1.4064|
000fbc  9803              LDR      r0,[sp,#0xc]          ;2350
000fbe  f8d0802c          LDR      r8,[r0,#0x2c]         ;2350
000fc2  4649              MOV      r1,r9                 ;2351
000fc4  9803              LDR      r0,[sp,#0xc]          ;2351
000fc6  f7fffffe          BL       remove_chain
000fca  4607              MOV      r7,r0                 ;2351
000fcc  b947              CBNZ     r7,|L1.4064|
000fce  f1a90001          SUB      r0,r9,#1              ;2353
000fd2  9903              LDR      r1,[sp,#0xc]          ;2353
000fd4  60c8              STR      r0,[r1,#0xc]          ;2353
000fd6  4641              MOV      r1,r8                 ;2354
000fd8  9803              LDR      r0,[sp,#0xc]          ;2354
000fda  f7fffffe          BL       move_window
000fde  4607              MOV      r7,r0                 ;2354
                  |L1.4064|
000fe0  e00e              B        |L1.4096|
                  |L1.4066|
000fe2  b96f              CBNZ     r7,|L1.4096|
000fe4  7ae0              LDRB     r0,[r4,#0xb]          ;2361
000fe6  f0000010          AND      r0,r0,#0x10           ;2361
000fea  b108              CBZ      r0,|L1.4080|
000fec  2704              MOVS     r7,#4                 ;2362
000fee  e007              B        |L1.4096|
                  |L1.4080|
000ff0  f0060002          AND      r0,r6,#2              ;2364
000ff4  b120              CBZ      r0,|L1.4096|
000ff6  7ae0              LDRB     r0,[r4,#0xb]          ;2364
000ff8  f0000001          AND      r0,r0,#1              ;2364
000ffc  b100              CBZ      r0,|L1.4096|
000ffe  2707              MOVS     r7,#7                 ;2365
                  |L1.4096|
001000  b947              CBNZ     r7,|L1.4116|
001002  f0060008          AND      r0,r6,#8              ;2370
001006  b108              CBZ      r0,|L1.4108|
001008  f0460620          ORR      r6,r6,#0x20           ;2371
                  |L1.4108|
00100c  9803              LDR      r0,[sp,#0xc]          ;2372
00100e  6ac0              LDR      r0,[r0,#0x2c]         ;2372
001010  61e8              STR      r0,[r5,#0x1c]         ;2372
001012  622c              STR      r4,[r5,#0x20]         ;2373
                  |L1.4116|
001014  b917              CBNZ     r7,|L1.4124|
001016  71ae              STRB     r6,[r5,#6]            ;2394
001018  4621              MOV      r1,r4                 ;2395
00101a  e000              B        |L1.4126|
                  |L1.4124|
00101c  e016              B        |L1.4172|
                  |L1.4126|
00101e  9803              LDR      r0,[sp,#0xc]          ;2395
001020  f7fffffe          BL       ld_clust
001024  6128              STR      r0,[r5,#0x10]         ;2395
001026  7fe0              LDRB     r0,[r4,#0x1f]         ;2396
001028  0601              LSLS     r1,r0,#24             ;2396
00102a  7fa0              LDRB     r0,[r4,#0x1e]         ;2396
00102c  ea414100          ORR      r1,r1,r0,LSL #16      ;2396
001030  7f60              LDRB     r0,[r4,#0x1d]         ;2396
001032  ea412000          ORR      r0,r1,r0,LSL #8       ;2396
001036  7f21              LDRB     r1,[r4,#0x1c]         ;2396
001038  4308              ORRS     r0,r0,r1              ;2396
00103a  60e8              STR      r0,[r5,#0xc]          ;2396
00103c  2000              MOVS     r0,#0                 ;2397
00103e  60a8              STR      r0,[r5,#8]            ;2397
001040  61a8              STR      r0,[r5,#0x18]         ;2398
001042  9803              LDR      r0,[sp,#0xc]          ;2402
001044  6028              STR      r0,[r5,#0]            ;2402
001046  9803              LDR      r0,[sp,#0xc]          ;2402
001048  88c0              LDRH     r0,[r0,#6]            ;2402
00104a  80a8              STRH     r0,[r5,#4]            ;2402
                  |L1.4172|
00104c  4638              MOV      r0,r7                 ;2406
00104e  e757              B        |L1.3840|
;;;2408   
                          ENDP

                  f_read PROC
;;;2415   
;;;2416   FRESULT f_read (
001050  e92d4fff          PUSH     {r0-r11,lr}
;;;2417   	FIL *fp, 		/* Pointer to the file object */
;;;2418   	void *buff,		/* Pointer to data buffer */
;;;2419   	UINT btr,		/* Number of bytes to read */
;;;2420   	UINT *br		/* Pointer to number of bytes read */
;;;2421   )
;;;2422   {
001054  b083              SUB      sp,sp,#0xc
001056  4604              MOV      r4,r0
001058  4615              MOV      r5,r2
00105a  469a              MOV      r10,r3
;;;2423   	FRESULT res;
;;;2424   	DWORD clst, sect, remain;
;;;2425   	UINT rcnt, cc;
;;;2426   	BYTE csect, *rbuff = buff;
00105c  f8ddb010          LDR      r11,[sp,#0x10]
;;;2427   
;;;2428   
;;;2429   	*br = 0;	/* Clear read byte counter */
001060  2000              MOVS     r0,#0
001062  f8ca0000          STR      r0,[r10,#0]
;;;2430   
;;;2431   	res = validate(fp);							/* Check validity */
001066  4620              MOV      r0,r4
001068  f7fffffe          BL       validate
00106c  9002              STR      r0,[sp,#8]
;;;2432   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
00106e  9802              LDR      r0,[sp,#8]
001070  b118              CBZ      r0,|L1.4218|
001072  9802              LDR      r0,[sp,#8]
                  |L1.4212|
;;;2433   	if (fp->flag & FA__ERROR)					/* Aborted file? */
;;;2434   		LEAVE_FF(fp->fs, FR_INT_ERR);
;;;2435   	if (!(fp->flag & FA_READ)) 					/* Check access mode */
;;;2436   		LEAVE_FF(fp->fs, FR_DENIED);
;;;2437   	remain = fp->fsize - fp->fptr;
;;;2438   	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
;;;2439   
;;;2440   	for ( ;  btr;								/* Repeat until all data read */
;;;2441   		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
;;;2442   		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
;;;2443   			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
;;;2444   			if (!csect) {						/* On the cluster boundary? */
;;;2445   				if (fp->fptr == 0) {			/* On the top of the file? */
;;;2446   					clst = fp->sclust;			/* Follow from the origin */
;;;2447   				} else {						/* Middle or end of the file */
;;;2448   #if _USE_FASTSEEK
;;;2449   					if (fp->cltbl)
;;;2450   						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
;;;2451   					else
;;;2452   #endif
;;;2453   						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
;;;2454   				}
;;;2455   				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
;;;2456   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2457   				fp->clust = clst;				/* Update current cluster */
;;;2458   			}
;;;2459   			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
;;;2460   			if (!sect) ABORT(fp->fs, FR_INT_ERR);
;;;2461   			sect += csect;
;;;2462   			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
;;;2463   			if (cc) {							/* Read maximum contiguous sectors directly */
;;;2464   				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
;;;2465   					cc = fp->fs->csize - csect;
;;;2466   				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
;;;2467   					ABORT(fp->fs, FR_DISK_ERR);
;;;2468   #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
;;;2469   #if _FS_TINY
;;;2470   				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
;;;2471   					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
;;;2472   #else
;;;2473   				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
;;;2474   					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
;;;2475   #endif
;;;2476   #endif
;;;2477   				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
;;;2478   				continue;
;;;2479   			}
;;;2480   #if !_FS_TINY
;;;2481   			if (fp->dsect != sect) {			/* Load data sector if not in cache */
;;;2482   #if !_FS_READONLY
;;;2483   				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
;;;2484   					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;2485   						ABORT(fp->fs, FR_DISK_ERR);
;;;2486   					fp->flag &= ~FA__DIRTY;
;;;2487   				}
;;;2488   #endif
;;;2489   				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
;;;2490   					ABORT(fp->fs, FR_DISK_ERR);
;;;2491   			}
;;;2492   #endif
;;;2493   			fp->dsect = sect;
;;;2494   		}
;;;2495   		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
;;;2496   		if (rcnt > btr) rcnt = btr;
;;;2497   #if _FS_TINY
;;;2498   		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
;;;2499   			ABORT(fp->fs, FR_DISK_ERR);
;;;2500   		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
;;;2501   #else
;;;2502   		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
;;;2503   #endif
;;;2504   	}
;;;2505   
;;;2506   	LEAVE_FF(fp->fs, FR_OK);
;;;2507   }
001074  b007              ADD      sp,sp,#0x1c
001076  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.4218|
00107a  79a0              LDRB     r0,[r4,#6]            ;2433
00107c  f0000080          AND      r0,r0,#0x80           ;2433
001080  b108              CBZ      r0,|L1.4230|
001082  2002              MOVS     r0,#2                 ;2434
001084  e7f6              B        |L1.4212|
                  |L1.4230|
001086  79a0              LDRB     r0,[r4,#6]            ;2435
001088  f0000001          AND      r0,r0,#1              ;2435
00108c  b908              CBNZ     r0,|L1.4242|
00108e  2007              MOVS     r0,#7                 ;2436
001090  e7f0              B        |L1.4212|
                  |L1.4242|
001092  e9d41002          LDRD     r1,r0,[r4,#8]         ;2437
001096  1a40              SUBS     r0,r0,r1              ;2437
001098  9000              STR      r0,[sp,#0]            ;2437
00109a  9800              LDR      r0,[sp,#0]            ;2438
00109c  4285              CMP      r5,r0                 ;2438
00109e  d900              BLS      |L1.4258|
0010a0  9d00              LDR      r5,[sp,#0]            ;2438
                  |L1.4258|
0010a2  e0be              B        |L1.4642|
                  |L1.4260|
0010a4  8920              LDRH     r0,[r4,#8]            ;2442
0010a6  f3c00008          UBFX     r0,r0,#0,#9           ;2442
0010aa  2800              CMP      r0,#0                 ;2442
0010ac  d17e              BNE      |L1.4524|
0010ae  6820              LDR      r0,[r4,#0]            ;2443
0010b0  7880              LDRB     r0,[r0,#2]            ;2443
0010b2  1e40              SUBS     r0,r0,#1              ;2443
0010b4  68a1              LDR      r1,[r4,#8]            ;2443
0010b6  ea002051          AND      r0,r0,r1,LSR #9       ;2443
0010ba  f00009ff          AND      r9,r0,#0xff           ;2443
0010be  f1b90f00          CMP      r9,#0                 ;2444
0010c2  d11d              BNE      |L1.4352|
0010c4  68a0              LDR      r0,[r4,#8]            ;2445
0010c6  b910              CBNZ     r0,|L1.4302|
0010c8  6920              LDR      r0,[r4,#0x10]         ;2446
0010ca  9001              STR      r0,[sp,#4]            ;2446
0010cc  e004              B        |L1.4312|
                  |L1.4302|
0010ce  6961              LDR      r1,[r4,#0x14]         ;2453
0010d0  6820              LDR      r0,[r4,#0]            ;2453
0010d2  f7fffffe          BL       get_fat
0010d6  9001              STR      r0,[sp,#4]            ;2453
                  |L1.4312|
0010d8  9801              LDR      r0,[sp,#4]            ;2455
0010da  2802              CMP      r0,#2                 ;2455
0010dc  d205              BCS      |L1.4330|
0010de  79a0              LDRB     r0,[r4,#6]            ;2455
0010e0  f0400080          ORR      r0,r0,#0x80           ;2455
0010e4  71a0              STRB     r0,[r4,#6]            ;2455
0010e6  2002              MOVS     r0,#2                 ;2455
0010e8  e7c4              B        |L1.4212|
                  |L1.4330|
0010ea  9801              LDR      r0,[sp,#4]            ;2456
0010ec  1c40              ADDS     r0,r0,#1              ;2456
0010ee  b928              CBNZ     r0,|L1.4348|
0010f0  79a0              LDRB     r0,[r4,#6]            ;2456
0010f2  f0400080          ORR      r0,r0,#0x80           ;2456
0010f6  71a0              STRB     r0,[r4,#6]            ;2456
0010f8  2001              MOVS     r0,#1                 ;2456
0010fa  e7bb              B        |L1.4212|
                  |L1.4348|
0010fc  9801              LDR      r0,[sp,#4]            ;2457
0010fe  6160              STR      r0,[r4,#0x14]         ;2457
                  |L1.4352|
001100  6961              LDR      r1,[r4,#0x14]         ;2459
001102  6820              LDR      r0,[r4,#0]            ;2459
001104  f7fffffe          BL       clust2sect
001108  4606              MOV      r6,r0                 ;2459
00110a  b92e              CBNZ     r6,|L1.4376|
00110c  79a0              LDRB     r0,[r4,#6]            ;2460
00110e  f0400080          ORR      r0,r0,#0x80           ;2460
001112  71a0              STRB     r0,[r4,#6]            ;2460
001114  2002              MOVS     r0,#2                 ;2460
001116  e7ad              B        |L1.4212|
                  |L1.4376|
001118  444e              ADD      r6,r6,r9              ;2461
00111a  ea4f2855          LSR      r8,r5,#9              ;2462
00111e  f1b80f00          CMP      r8,#0                 ;2463
001122  d02d              BEQ      |L1.4480|
001124  eb090008          ADD      r0,r9,r8              ;2464
001128  6821              LDR      r1,[r4,#0]            ;2464
00112a  7889              LDRB     r1,[r1,#2]            ;2464
00112c  4288              CMP      r0,r1                 ;2464
00112e  d903              BLS      |L1.4408|
001130  6820              LDR      r0,[r4,#0]            ;2465
001132  7880              LDRB     r0,[r0,#2]            ;2465
001134  eba00809          SUB      r8,r0,r9              ;2465
                  |L1.4408|
001138  f00803ff          AND      r3,r8,#0xff           ;2466
00113c  6821              LDR      r1,[r4,#0]            ;2466
00113e  7848              LDRB     r0,[r1,#1]            ;2466
001140  4632              MOV      r2,r6                 ;2466
001142  4659              MOV      r1,r11                ;2466
001144  f7fffffe          BL       disk_read
001148  b128              CBZ      r0,|L1.4438|
00114a  79a0              LDRB     r0,[r4,#6]            ;2467
00114c  f0400080          ORR      r0,r0,#0x80           ;2467
001150  71a0              STRB     r0,[r4,#6]            ;2467
001152  2001              MOVS     r0,#1                 ;2467
001154  e78e              B        |L1.4212|
                  |L1.4438|
001156  79a0              LDRB     r0,[r4,#6]            ;2473
001158  f0000040          AND      r0,r0,#0x40           ;2473
00115c  b168              CBZ      r0,|L1.4474|
00115e  69a0              LDR      r0,[r4,#0x18]         ;2473
001160  1b80              SUBS     r0,r0,r6              ;2473
001162  4540              CMP      r0,r8                 ;2473
001164  d209              BCS      |L1.4474|
001166  69a1              LDR      r1,[r4,#0x18]         ;2474
001168  1b89              SUBS     r1,r1,r6              ;2474
00116a  eb0b2041          ADD      r0,r11,r1,LSL #9      ;2474
00116e  f44f7200          MOV      r2,#0x200             ;2474
001172  f1040124          ADD      r1,r4,#0x24           ;2474
001176  f7fffffe          BL       mem_cpy
                  |L1.4474|
00117a  ea4f2748          LSL      r7,r8,#9              ;2477
00117e  e03d              B        |L1.4604|
                  |L1.4480|
001180  69a0              LDR      r0,[r4,#0x18]         ;2481
001182  42b0              CMP      r0,r6                 ;2481
001184  d026              BEQ      |L1.4564|
001186  79a0              LDRB     r0,[r4,#6]            ;2483
001188  f0000040          AND      r0,r0,#0x40           ;2483
00118c  b198              CBZ      r0,|L1.4534|
00118e  6821              LDR      r1,[r4,#0]            ;2484
001190  7848              LDRB     r0,[r1,#1]            ;2484
001192  2301              MOVS     r3,#1                 ;2484
001194  f1040124          ADD      r1,r4,#0x24           ;2484
001198  69a2              LDR      r2,[r4,#0x18]         ;2484
00119a  f7fffffe          BL       disk_write
00119e  b130              CBZ      r0,|L1.4526|
0011a0  79a0              LDRB     r0,[r4,#6]            ;2485
0011a2  f0400080          ORR      r0,r0,#0x80           ;2485
0011a6  71a0              STRB     r0,[r4,#6]            ;2485
0011a8  2001              MOVS     r0,#1                 ;2485
0011aa  e763              B        |L1.4212|
                  |L1.4524|
0011ac  e013              B        |L1.4566|
                  |L1.4526|
0011ae  79a0              LDRB     r0,[r4,#6]            ;2486
0011b0  f0200040          BIC      r0,r0,#0x40           ;2486
0011b4  71a0              STRB     r0,[r4,#6]            ;2486
                  |L1.4534|
0011b6  6821              LDR      r1,[r4,#0]            ;2489
0011b8  7848              LDRB     r0,[r1,#1]            ;2489
0011ba  2301              MOVS     r3,#1                 ;2489
0011bc  4632              MOV      r2,r6                 ;2489
0011be  f1040124          ADD      r1,r4,#0x24           ;2489
0011c2  f7fffffe          BL       disk_read
0011c6  b128              CBZ      r0,|L1.4564|
0011c8  79a0              LDRB     r0,[r4,#6]            ;2490
0011ca  f0400080          ORR      r0,r0,#0x80           ;2490
0011ce  71a0              STRB     r0,[r4,#6]            ;2490
0011d0  2001              MOVS     r0,#1                 ;2490
0011d2  e74f              B        |L1.4212|
                  |L1.4564|
0011d4  61a6              STR      r6,[r4,#0x18]         ;2493
                  |L1.4566|
0011d6  8920              LDRH     r0,[r4,#8]            ;2495
0011d8  f3c00008          UBFX     r0,r0,#0,#9           ;2495
0011dc  f5c07700          RSB      r7,r0,#0x200          ;2495
0011e0  42af              CMP      r7,r5                 ;2496
0011e2  d900              BLS      |L1.4582|
0011e4  462f              MOV      r7,r5                 ;2496
                  |L1.4582|
0011e6  8920              LDRH     r0,[r4,#8]            ;2502
0011e8  f3c00208          UBFX     r2,r0,#0,#9           ;2502
0011ec  f1040024          ADD      r0,r4,#0x24           ;2502
0011f0  1811              ADDS     r1,r2,r0              ;2502
0011f2  463a              MOV      r2,r7                 ;2502
0011f4  4658              MOV      r0,r11                ;2502
0011f6  f7fffffe          BL       mem_cpy
0011fa  bf00              NOP                            ;2478
                  |L1.4604|
0011fc  44bb              ADD      r11,r11,r7            ;2441
0011fe  68a0              LDR      r0,[r4,#8]            ;2441
001200  4438              ADD      r0,r0,r7              ;2441
001202  60a0              STR      r0,[r4,#8]            ;2441
001204  f8da0000          LDR      r0,[r10,#0]           ;2441
001208  4438              ADD      r0,r0,r7              ;2441
00120a  f8ca0000          STR      r0,[r10,#0]           ;2441
00120e  e007              B        |L1.4640|
                  |L1.4624|
                          DCD      0x41615252
                  |L1.4628|
                          DCD      0x61417272
                  |L1.4632|
                          DCD      Fsid
                  |L1.4636|
                          DCD      FatFs
                  |L1.4640|
001220  1bed              SUBS     r5,r5,r7              ;2441
                  |L1.4642|
001222  2d00              CMP      r5,#0                 ;2440
001224  f47faf3e          BNE      |L1.4260|
001228  2000              MOVS     r0,#0                 ;2506
00122a  e723              B        |L1.4212|
;;;2508   
                          ENDP

                  f_write PROC
;;;2516   
;;;2517   FRESULT f_write (
00122c  e92d4fff          PUSH     {r0-r11,lr}
;;;2518   	FIL *fp,			/* Pointer to the file object */
;;;2519   	const void *buff,	/* Pointer to the data to be written */
;;;2520   	UINT btw,			/* Number of bytes to write */
;;;2521   	UINT *bw			/* Pointer to number of bytes written */
;;;2522   )
;;;2523   {
001230  b083              SUB      sp,sp,#0xc
001232  4604              MOV      r4,r0
001234  4615              MOV      r5,r2
001236  469b              MOV      r11,r3
;;;2524   	FRESULT res;
;;;2525   	DWORD clst, sect;
;;;2526   	UINT wcnt, cc;
;;;2527   	const BYTE *wbuff = buff;
001238  9804              LDR      r0,[sp,#0x10]
00123a  9001              STR      r0,[sp,#4]
;;;2528   	BYTE csect;
;;;2529   
;;;2530   
;;;2531   	*bw = 0;	/* Clear write byte counter */
00123c  2000              MOVS     r0,#0
00123e  f8cb0000          STR      r0,[r11,#0]
;;;2532   
;;;2533   	res = validate(fp);						/* Check validity */
001242  4620              MOV      r0,r4
001244  f7fffffe          BL       validate
001248  9002              STR      r0,[sp,#8]
;;;2534   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
00124a  9802              LDR      r0,[sp,#8]
00124c  b118              CBZ      r0,|L1.4694|
00124e  9802              LDR      r0,[sp,#8]
                  |L1.4688|
;;;2535   	if (fp->flag & FA__ERROR)				/* Aborted file? */
;;;2536   		LEAVE_FF(fp->fs, FR_INT_ERR);
;;;2537   	if (!(fp->flag & FA_WRITE))				/* Check access mode */
;;;2538   		LEAVE_FF(fp->fs, FR_DENIED);
;;;2539   	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
;;;2540   
;;;2541   	for ( ;  btw;							/* Repeat until all data written */
;;;2542   		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
;;;2543   		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
;;;2544   			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
;;;2545   			if (!csect) {					/* On the cluster boundary? */
;;;2546   				if (fp->fptr == 0) {		/* On the top of the file? */
;;;2547   					clst = fp->sclust;		/* Follow from the origin */
;;;2548   					if (clst == 0)			/* When no cluster is allocated, */
;;;2549   						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
;;;2550   				} else {					/* Middle or end of the file */
;;;2551   #if _USE_FASTSEEK
;;;2552   					if (fp->cltbl)
;;;2553   						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
;;;2554   					else
;;;2555   #endif
;;;2556   						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
;;;2557   				}
;;;2558   				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
;;;2559   				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
;;;2560   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2561   				fp->clust = clst;			/* Update current cluster */
;;;2562   			}
;;;2563   #if _FS_TINY
;;;2564   			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
;;;2565   				ABORT(fp->fs, FR_DISK_ERR);
;;;2566   #else
;;;2567   			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
;;;2568   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;2569   					ABORT(fp->fs, FR_DISK_ERR);
;;;2570   				fp->flag &= ~FA__DIRTY;
;;;2571   			}
;;;2572   #endif
;;;2573   			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
;;;2574   			if (!sect) ABORT(fp->fs, FR_INT_ERR);
;;;2575   			sect += csect;
;;;2576   			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
;;;2577   			if (cc) {						/* Write maximum contiguous sectors directly */
;;;2578   				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
;;;2579   					cc = fp->fs->csize - csect;
;;;2580   				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
;;;2581   					ABORT(fp->fs, FR_DISK_ERR);
;;;2582   #if _FS_TINY
;;;2583   				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
;;;2584   					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
;;;2585   					fp->fs->wflag = 0;
;;;2586   				}
;;;2587   #else
;;;2588   				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
;;;2589   					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
;;;2590   					fp->flag &= ~FA__DIRTY;
;;;2591   				}
;;;2592   #endif
;;;2593   				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
;;;2594   				continue;
;;;2595   			}
;;;2596   #if _FS_TINY
;;;2597   			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
;;;2598   				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
;;;2599   				fp->fs->winsect = sect;
;;;2600   			}
;;;2601   #else
;;;2602   			if (fp->dsect != sect) {		/* Fill sector cache with file data */
;;;2603   				if (fp->fptr < fp->fsize &&
;;;2604   					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
;;;2605   						ABORT(fp->fs, FR_DISK_ERR);
;;;2606   			}
;;;2607   #endif
;;;2608   			fp->dsect = sect;
;;;2609   		}
;;;2610   		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
;;;2611   		if (wcnt > btw) wcnt = btw;
;;;2612   #if _FS_TINY
;;;2613   		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
;;;2614   			ABORT(fp->fs, FR_DISK_ERR);
;;;2615   		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
;;;2616   		fp->fs->wflag = 1;
;;;2617   #else
;;;2618   		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
;;;2619   		fp->flag |= FA__DIRTY;
;;;2620   #endif
;;;2621   	}
;;;2622   
;;;2623   	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
;;;2624   	fp->flag |= FA__WRITTEN;						/* Set file change flag */
;;;2625   
;;;2626   	LEAVE_FF(fp->fs, FR_OK);
;;;2627   }
001250  b007              ADD      sp,sp,#0x1c
001252  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.4694|
001256  79a0              LDRB     r0,[r4,#6]            ;2535
001258  f0000080          AND      r0,r0,#0x80           ;2535
00125c  b108              CBZ      r0,|L1.4706|
00125e  2002              MOVS     r0,#2                 ;2536
001260  e7f6              B        |L1.4688|
                  |L1.4706|
001262  79a0              LDRB     r0,[r4,#6]            ;2537
001264  f0000002          AND      r0,r0,#2              ;2537
001268  b908              CBNZ     r0,|L1.4718|
00126a  2007              MOVS     r0,#7                 ;2538
00126c  e7f0              B        |L1.4688|
                  |L1.4718|
00126e  68e0              LDR      r0,[r4,#0xc]          ;2539
001270  4428              ADD      r0,r0,r5              ;2539
001272  68e1              LDR      r1,[r4,#0xc]          ;2539
001274  4288              CMP      r0,r1                 ;2539
001276  d200              BCS      |L1.4730|
001278  2500              MOVS     r5,#0                 ;2539
                  |L1.4730|
00127a  e0cd              B        |L1.5144|
                  |L1.4732|
00127c  8920              LDRH     r0,[r4,#8]            ;2543
00127e  f3c00008          UBFX     r0,r0,#0,#9           ;2543
001282  2800              CMP      r0,#0                 ;2543
001284  d177              BNE      |L1.4982|
001286  6820              LDR      r0,[r4,#0]            ;2544
001288  7880              LDRB     r0,[r0,#2]            ;2544
00128a  1e40              SUBS     r0,r0,#1              ;2544
00128c  68a1              LDR      r1,[r4,#8]            ;2544
00128e  ea002051          AND      r0,r0,r1,LSR #9       ;2544
001292  f0000aff          AND      r10,r0,#0xff          ;2544
001296  f1ba0f00          CMP      r10,#0                ;2545
00129a  d12a              BNE      |L1.4850|
00129c  68a0              LDR      r0,[r4,#8]            ;2546
00129e  b958              CBNZ     r0,|L1.4792|
0012a0  f8d48010          LDR      r8,[r4,#0x10]         ;2547
0012a4  f1b80f00          CMP      r8,#0                 ;2548
0012a8  d10b              BNE      |L1.4802|
0012aa  2100              MOVS     r1,#0                 ;2549
0012ac  6820              LDR      r0,[r4,#0]            ;2549
0012ae  f7fffffe          BL       create_chain
0012b2  4680              MOV      r8,r0                 ;2549
0012b4  6120              STR      r0,[r4,#0x10]         ;2549
0012b6  e004              B        |L1.4802|
                  |L1.4792|
0012b8  6961              LDR      r1,[r4,#0x14]         ;2556
0012ba  6820              LDR      r0,[r4,#0]            ;2556
0012bc  f7fffffe          BL       create_chain
0012c0  4680              MOV      r8,r0                 ;2556
                  |L1.4802|
0012c2  f1b80f00          CMP      r8,#0                 ;2558
0012c6  d100              BNE      |L1.4810|
0012c8  e0a9              B        |L1.5150|
                  |L1.4810|
0012ca  f1b80f01          CMP      r8,#1                 ;2559
0012ce  d105              BNE      |L1.4828|
0012d0  79a0              LDRB     r0,[r4,#6]            ;2559
0012d2  f0400080          ORR      r0,r0,#0x80           ;2559
0012d6  71a0              STRB     r0,[r4,#6]            ;2559
0012d8  2002              MOVS     r0,#2                 ;2559
0012da  e7b9              B        |L1.4688|
                  |L1.4828|
0012dc  f1080001          ADD      r0,r8,#1              ;2560
0012e0  b928              CBNZ     r0,|L1.4846|
0012e2  79a0              LDRB     r0,[r4,#6]            ;2560
0012e4  f0400080          ORR      r0,r0,#0x80           ;2560
0012e8  71a0              STRB     r0,[r4,#6]            ;2560
0012ea  2001              MOVS     r0,#1                 ;2560
0012ec  e7b0              B        |L1.4688|
                  |L1.4846|
0012ee  f8c48014          STR      r8,[r4,#0x14]         ;2561
                  |L1.4850|
0012f2  79a0              LDRB     r0,[r4,#6]            ;2567
0012f4  f0000040          AND      r0,r0,#0x40           ;2567
0012f8  b190              CBZ      r0,|L1.4896|
0012fa  6821              LDR      r1,[r4,#0]            ;2568
0012fc  7848              LDRB     r0,[r1,#1]            ;2568
0012fe  2301              MOVS     r3,#1                 ;2568
001300  f1040124          ADD      r1,r4,#0x24           ;2568
001304  69a2              LDR      r2,[r4,#0x18]         ;2568
001306  f7fffffe          BL       disk_write
00130a  b128              CBZ      r0,|L1.4888|
00130c  79a0              LDRB     r0,[r4,#6]            ;2569
00130e  f0400080          ORR      r0,r0,#0x80           ;2569
001312  71a0              STRB     r0,[r4,#6]            ;2569
001314  2001              MOVS     r0,#1                 ;2569
001316  e79b              B        |L1.4688|
                  |L1.4888|
001318  79a0              LDRB     r0,[r4,#6]            ;2570
00131a  f0200040          BIC      r0,r0,#0x40           ;2570
00131e  71a0              STRB     r0,[r4,#6]            ;2570
                  |L1.4896|
001320  6961              LDR      r1,[r4,#0x14]         ;2573
001322  6820              LDR      r0,[r4,#0]            ;2573
001324  f7fffffe          BL       clust2sect
001328  4606              MOV      r6,r0                 ;2573
00132a  b92e              CBNZ     r6,|L1.4920|
00132c  79a0              LDRB     r0,[r4,#6]            ;2574
00132e  f0400080          ORR      r0,r0,#0x80           ;2574
001332  71a0              STRB     r0,[r4,#6]            ;2574
001334  2002              MOVS     r0,#2                 ;2574
001336  e78b              B        |L1.4688|
                  |L1.4920|
001338  4456              ADD      r6,r6,r10             ;2575
00133a  ea4f2955          LSR      r9,r5,#9              ;2576
00133e  f1b90f00          CMP      r9,#0                 ;2577
001342  d02f              BEQ      |L1.5028|
001344  eb0a0009          ADD      r0,r10,r9             ;2578
001348  6821              LDR      r1,[r4,#0]            ;2578
00134a  7889              LDRB     r1,[r1,#2]            ;2578
00134c  4288              CMP      r0,r1                 ;2578
00134e  d903              BLS      |L1.4952|
001350  6820              LDR      r0,[r4,#0]            ;2579
001352  7880              LDRB     r0,[r0,#2]            ;2579
001354  eba0090a          SUB      r9,r0,r10             ;2579
                  |L1.4952|
001358  f00903ff          AND      r3,r9,#0xff           ;2580
00135c  6821              LDR      r1,[r4,#0]            ;2580
00135e  7848              LDRB     r0,[r1,#1]            ;2580
001360  4632              MOV      r2,r6                 ;2580
001362  9901              LDR      r1,[sp,#4]            ;2580
001364  f7fffffe          BL       disk_write
001368  b130              CBZ      r0,|L1.4984|
00136a  79a0              LDRB     r0,[r4,#6]            ;2581
00136c  f0400080          ORR      r0,r0,#0x80           ;2581
001370  71a0              STRB     r0,[r4,#6]            ;2581
001372  2001              MOVS     r0,#1                 ;2581
001374  e76c              B        |L1.4688|
                  |L1.4982|
001376  e02c              B        |L1.5074|
                  |L1.4984|
001378  69a0              LDR      r0,[r4,#0x18]         ;2588
00137a  1b80              SUBS     r0,r0,r6              ;2588
00137c  4548              CMP      r0,r9                 ;2588
00137e  d20e              BCS      |L1.5022|
001380  69a0              LDR      r0,[r4,#0x18]         ;2589
001382  1b80              SUBS     r0,r0,r6              ;2589
001384  9a01              LDR      r2,[sp,#4]            ;2589
001386  eb022140          ADD      r1,r2,r0,LSL #9       ;2589
00138a  f44f7200          MOV      r2,#0x200             ;2589
00138e  f1040024          ADD      r0,r4,#0x24           ;2589
001392  f7fffffe          BL       mem_cpy
001396  79a0              LDRB     r0,[r4,#6]            ;2590
001398  f0200040          BIC      r0,r0,#0x40           ;2590
00139c  71a0              STRB     r0,[r4,#6]            ;2590
                  |L1.5022|
00139e  ea4f2749          LSL      r7,r9,#9              ;2593
0013a2  e02d              B        |L1.5120|
                  |L1.5028|
0013a4  69a0              LDR      r0,[r4,#0x18]         ;2602
0013a6  42b0              CMP      r0,r6                 ;2602
0013a8  d012              BEQ      |L1.5072|
0013aa  e9d40102          LDRD     r0,r1,[r4,#8]         ;2603
0013ae  4288              CMP      r0,r1                 ;2603
0013b0  d20e              BCS      |L1.5072|
0013b2  6821              LDR      r1,[r4,#0]            ;2604
0013b4  7848              LDRB     r0,[r1,#1]            ;2604
0013b6  2301              MOVS     r3,#1                 ;2604
0013b8  4632              MOV      r2,r6                 ;2604
0013ba  f1040124          ADD      r1,r4,#0x24           ;2604
0013be  f7fffffe          BL       disk_read
0013c2  b128              CBZ      r0,|L1.5072|
0013c4  79a0              LDRB     r0,[r4,#6]            ;2605
0013c6  f0400080          ORR      r0,r0,#0x80           ;2605
0013ca  71a0              STRB     r0,[r4,#6]            ;2605
0013cc  2001              MOVS     r0,#1                 ;2605
0013ce  e73f              B        |L1.4688|
                  |L1.5072|
0013d0  61a6              STR      r6,[r4,#0x18]         ;2608
                  |L1.5074|
0013d2  8920              LDRH     r0,[r4,#8]            ;2610
0013d4  f3c00008          UBFX     r0,r0,#0,#9           ;2610
0013d8  f5c07700          RSB      r7,r0,#0x200          ;2610
0013dc  42af              CMP      r7,r5                 ;2611
0013de  d900              BLS      |L1.5090|
0013e0  462f              MOV      r7,r5                 ;2611
                  |L1.5090|
0013e2  8921              LDRH     r1,[r4,#8]            ;2618
0013e4  f3c10208          UBFX     r2,r1,#0,#9           ;2618
0013e8  f1040124          ADD      r1,r4,#0x24           ;2618
0013ec  1850              ADDS     r0,r2,r1              ;2618
0013ee  463a              MOV      r2,r7                 ;2618
0013f0  9901              LDR      r1,[sp,#4]            ;2618
0013f2  f7fffffe          BL       mem_cpy
0013f6  79a0              LDRB     r0,[r4,#6]            ;2619
0013f8  f0400040          ORR      r0,r0,#0x40           ;2619
0013fc  71a0              STRB     r0,[r4,#6]            ;2619
0013fe  bf00              NOP                            ;2594
                  |L1.5120|
001400  9801              LDR      r0,[sp,#4]            ;2542
001402  4438              ADD      r0,r0,r7              ;2542
001404  9001              STR      r0,[sp,#4]            ;2542
001406  68a0              LDR      r0,[r4,#8]            ;2542
001408  4438              ADD      r0,r0,r7              ;2542
00140a  60a0              STR      r0,[r4,#8]            ;2542
00140c  f8db0000          LDR      r0,[r11,#0]           ;2542
001410  4438              ADD      r0,r0,r7              ;2542
001412  f8cb0000          STR      r0,[r11,#0]           ;2542
001416  1bed              SUBS     r5,r5,r7              ;2542
                  |L1.5144|
001418  2d00              CMP      r5,#0                 ;2541
00141a  f47faf2f          BNE      |L1.4732|
                  |L1.5150|
00141e  bf00              NOP                            ;2558
001420  e9d40102          LDRD     r0,r1,[r4,#8]         ;2623
001424  4288              CMP      r0,r1                 ;2623
001426  d901              BLS      |L1.5164|
001428  68a0              LDR      r0,[r4,#8]            ;2623
00142a  60e0              STR      r0,[r4,#0xc]          ;2623
                  |L1.5164|
00142c  79a0              LDRB     r0,[r4,#6]            ;2624
00142e  f0400020          ORR      r0,r0,#0x20           ;2624
001432  71a0              STRB     r0,[r4,#6]            ;2624
001434  2000              MOVS     r0,#0                 ;2626
001436  e70b              B        |L1.4688|
;;;2628   
                          ENDP

                  f_sync PROC
;;;2635   
;;;2636   FRESULT f_sync (
001438  e92d41f0          PUSH     {r4-r8,lr}
;;;2637   	FIL *fp		/* Pointer to the file object */
;;;2638   )
;;;2639   {
00143c  4604              MOV      r4,r0
;;;2640   	FRESULT res;
;;;2641   	DWORD tim;
;;;2642   	BYTE *dir;
;;;2643   
;;;2644   
;;;2645   	res = validate(fp);					/* Check validity of the object */
00143e  4620              MOV      r0,r4
001440  f7fffffe          BL       validate
001444  4607              MOV      r7,r0
;;;2646   	if (res == FR_OK) {
001446  2f00              CMP      r7,#0
001448  d14c              BNE      |L1.5348|
;;;2647   		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
00144a  79a0              LDRB     r0,[r4,#6]
00144c  f0000020          AND      r0,r0,#0x20
001450  2800              CMP      r0,#0
001452  d047              BEQ      |L1.5348|
;;;2648   #if !_FS_TINY	/* Write-back dirty buffer */
;;;2649   			if (fp->flag & FA__DIRTY) {
001454  79a0              LDRB     r0,[r4,#6]
001456  f0000040          AND      r0,r0,#0x40
00145a  b178              CBZ      r0,|L1.5244|
;;;2650   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
00145c  6821              LDR      r1,[r4,#0]
00145e  7848              LDRB     r0,[r1,#1]
001460  2301              MOVS     r3,#1
001462  f1040124          ADD      r1,r4,#0x24
001466  69a2              LDR      r2,[r4,#0x18]
001468  f7fffffe          BL       disk_write
00146c  b110              CBZ      r0,|L1.5236|
;;;2651   					LEAVE_FF(fp->fs, FR_DISK_ERR);
00146e  2001              MOVS     r0,#1
                  |L1.5232|
;;;2652   				fp->flag &= ~FA__DIRTY;
;;;2653   			}
;;;2654   #endif
;;;2655   			/* Update the directory entry */
;;;2656   			res = move_window(fp->fs, fp->dir_sect);
;;;2657   			if (res == FR_OK) {
;;;2658   				dir = fp->dir_ptr;
;;;2659   				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
;;;2660   				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
;;;2661   				st_clust(dir, fp->sclust);					/* Update start cluster */
;;;2662   				tim = get_fattime();						/* Update updated time */
;;;2663   				ST_DWORD(dir+DIR_WrtTime, tim);
;;;2664   				ST_WORD(dir+DIR_LstAccDate, 0);
;;;2665   				fp->flag &= ~FA__WRITTEN;
;;;2666   				fp->fs->wflag = 1;
;;;2667   				res = sync(fp->fs);
;;;2668   			}
;;;2669   		}
;;;2670   	}
;;;2671   
;;;2672   	LEAVE_FF(fp->fs, res);
;;;2673   }
001470  e8bd81f0          POP      {r4-r8,pc}
                  |L1.5236|
001474  79a0              LDRB     r0,[r4,#6]            ;2652
001476  f0200040          BIC      r0,r0,#0x40           ;2652
00147a  71a0              STRB     r0,[r4,#6]            ;2652
                  |L1.5244|
00147c  69e1              LDR      r1,[r4,#0x1c]         ;2656
00147e  6820              LDR      r0,[r4,#0]            ;2656
001480  f7fffffe          BL       move_window
001484  4607              MOV      r7,r0                 ;2656
001486  2f00              CMP      r7,#0                 ;2657
001488  d12c              BNE      |L1.5348|
00148a  6a25              LDR      r5,[r4,#0x20]         ;2658
00148c  7ae8              LDRB     r0,[r5,#0xb]          ;2659
00148e  f0400020          ORR      r0,r0,#0x20           ;2659
001492  72e8              STRB     r0,[r5,#0xb]          ;2659
001494  7b20              LDRB     r0,[r4,#0xc]          ;2660
001496  7728              STRB     r0,[r5,#0x1c]         ;2660
001498  89a0              LDRH     r0,[r4,#0xc]          ;2660
00149a  0a01              LSRS     r1,r0,#8              ;2660
00149c  7769              STRB     r1,[r5,#0x1d]         ;2660
00149e  68e0              LDR      r0,[r4,#0xc]          ;2660
0014a0  0c01              LSRS     r1,r0,#16             ;2660
0014a2  77a9              STRB     r1,[r5,#0x1e]         ;2660
0014a4  68e0              LDR      r0,[r4,#0xc]          ;2660
0014a6  0e01              LSRS     r1,r0,#24             ;2660
0014a8  77e9              STRB     r1,[r5,#0x1f]         ;2660
0014aa  4628              MOV      r0,r5                 ;2661
0014ac  6921              LDR      r1,[r4,#0x10]         ;2661
0014ae  f7fffffe          BL       st_clust
0014b2  f7fffffe          BL       get_fattime
0014b6  4606              MOV      r6,r0                 ;2662
0014b8  75ae              STRB     r6,[r5,#0x16]         ;2663
0014ba  0a31              LSRS     r1,r6,#8              ;2663
0014bc  75e9              STRB     r1,[r5,#0x17]         ;2663
0014be  0c31              LSRS     r1,r6,#16             ;2663
0014c0  7629              STRB     r1,[r5,#0x18]         ;2663
0014c2  0e31              LSRS     r1,r6,#24             ;2663
0014c4  7669              STRB     r1,[r5,#0x19]         ;2663
0014c6  2000              MOVS     r0,#0                 ;2664
0014c8  74a8              STRB     r0,[r5,#0x12]         ;2664
0014ca  2100              MOVS     r1,#0                 ;2664
0014cc  74e9              STRB     r1,[r5,#0x13]         ;2664
0014ce  79a0              LDRB     r0,[r4,#6]            ;2665
0014d0  f0200020          BIC      r0,r0,#0x20           ;2665
0014d4  71a0              STRB     r0,[r4,#6]            ;2665
0014d6  2001              MOVS     r0,#1                 ;2666
0014d8  6821              LDR      r1,[r4,#0]            ;2666
0014da  7108              STRB     r0,[r1,#4]            ;2666
0014dc  6820              LDR      r0,[r4,#0]            ;2667
0014de  f7fffffe          BL       sync
0014e2  4607              MOV      r7,r0                 ;2667
                  |L1.5348|
0014e4  4638              MOV      r0,r7                 ;2672
0014e6  e7c3              B        |L1.5232|
;;;2674   
                          ENDP

                  f_close PROC
;;;2683   
;;;2684   FRESULT f_close (
0014e8  b570              PUSH     {r4-r6,lr}
;;;2685   	FIL *fp		/* Pointer to the file object to be closed */
;;;2686   )
;;;2687   {
0014ea  4604              MOV      r4,r0
;;;2688   	FRESULT res;
;;;2689   
;;;2690   
;;;2691   #if _FS_READONLY
;;;2692   	res = validate(fp);
;;;2693   	{
;;;2694   #if _FS_REENTRANT
;;;2695   		FATFS *fs = fp->fs;
;;;2696   #endif
;;;2697   		if (res == FR_OK) fp->fs = 0;	/* Discard file object */
;;;2698   		LEAVE_FF(fs, res);
;;;2699   	}
;;;2700   #else
;;;2701   	res = f_sync(fp);		/* Flush cached data */
0014ec  4620              MOV      r0,r4
0014ee  f7fffffe          BL       f_sync
0014f2  4605              MOV      r5,r0
;;;2702   #if _FS_LOCK
;;;2703   	if (res == FR_OK) {		/* Decrement open counter */
;;;2704   #if _FS_REENTRANT
;;;2705   		FATFS *fs = fp->fs;;
;;;2706   		res = validate(fp);
;;;2707   		if (res == FR_OK) {
;;;2708   			res = dec_lock(fp->lockid);	
;;;2709   			unlock_fs(fs, FR_OK);
;;;2710   		}
;;;2711   #else
;;;2712   		res = dec_lock(fp->lockid);
;;;2713   #endif
;;;2714   	}
;;;2715   #endif
;;;2716   	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
0014f4  b90d              CBNZ     r5,|L1.5370|
0014f6  2000              MOVS     r0,#0
0014f8  6020              STR      r0,[r4,#0]
                  |L1.5370|
;;;2717   	return res;
0014fa  4628              MOV      r0,r5
;;;2718   #endif
;;;2719   }
0014fc  bd70              POP      {r4-r6,pc}
;;;2720   
                          ENDP

                  f_lseek PROC
;;;2852   
;;;2853   FRESULT f_lseek (
0014fe  e92d47f0          PUSH     {r4-r10,lr}
;;;2854   	FIL *fp,		/* Pointer to the file object */
;;;2855   	DWORD ofs		/* File pointer from top of file */
;;;2856   )
;;;2857   {
001502  4604              MOV      r4,r0
001504  460e              MOV      r6,r1
;;;2858   	FRESULT res;
;;;2859   
;;;2860   
;;;2861   	res = validate(fp);					/* Check validity of the object */
001506  4620              MOV      r0,r4
001508  f7fffffe          BL       validate
00150c  4682              MOV      r10,r0
;;;2862   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
00150e  f1ba0f00          CMP      r10,#0
001512  d002              BEQ      |L1.5402|
001514  4650              MOV      r0,r10
                  |L1.5398|
;;;2863   	if (fp->flag & FA__ERROR)			/* Check abort flag */
;;;2864   		LEAVE_FF(fp->fs, FR_INT_ERR);
;;;2865   
;;;2866   #if _USE_FASTSEEK
;;;2867   	if (fp->cltbl) {	/* Fast seek */
;;;2868   		DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
;;;2869   
;;;2870   		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
;;;2871   			tbl = fp->cltbl;
;;;2872   			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
;;;2873   			cl = fp->sclust;			/* Top of the chain */
;;;2874   			if (cl) {
;;;2875   				do {
;;;2876   					/* Get a fragment */
;;;2877   					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
;;;2878   					do {
;;;2879   						pcl = cl; ncl++;
;;;2880   						cl = get_fat(fp->fs, cl);
;;;2881   						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
;;;2882   						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2883   					} while (cl == pcl + 1);
;;;2884   					if (ulen <= tlen) {		/* Store the length and top of the fragment */
;;;2885   						*tbl++ = ncl; *tbl++ = tcl;
;;;2886   					}
;;;2887   				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
;;;2888   			}
;;;2889   			*fp->cltbl = ulen;	/* Number of items used */
;;;2890   			if (ulen <= tlen)
;;;2891   				*tbl = 0;		/* Terminate table */
;;;2892   			else
;;;2893   				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
;;;2894   
;;;2895   		} else {						/* Fast seek */
;;;2896   			if (ofs > fp->fsize)		/* Clip offset at the file size */
;;;2897   				ofs = fp->fsize;
;;;2898   			fp->fptr = ofs;				/* Set file pointer */
;;;2899   			if (ofs) {
;;;2900   				fp->clust = clmt_clust(fp, ofs - 1);
;;;2901   				dsc = clust2sect(fp->fs, fp->clust);
;;;2902   				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
;;;2903   				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
;;;2904   				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
;;;2905   #if !_FS_TINY
;;;2906   #if !_FS_READONLY
;;;2907   					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
;;;2908   						if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;2909   							ABORT(fp->fs, FR_DISK_ERR);
;;;2910   						fp->flag &= ~FA__DIRTY;
;;;2911   					}
;;;2912   #endif
;;;2913   					if (disk_read(fp->fs->drv, fp->buf, dsc, 1) != RES_OK)	/* Load current sector */
;;;2914   						ABORT(fp->fs, FR_DISK_ERR);
;;;2915   #endif
;;;2916   					fp->dsect = dsc;
;;;2917   				}
;;;2918   			}
;;;2919   		}
;;;2920   	} else
;;;2921   #endif
;;;2922   
;;;2923   	/* Normal Seek */
;;;2924   	{
;;;2925   		DWORD clst, bcs, nsect, ifptr;
;;;2926   
;;;2927   		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
;;;2928   #if !_FS_READONLY
;;;2929   			 && !(fp->flag & FA_WRITE)
;;;2930   #endif
;;;2931   			) ofs = fp->fsize;
;;;2932   
;;;2933   		ifptr = fp->fptr;
;;;2934   		fp->fptr = nsect = 0;
;;;2935   		if (ofs) {
;;;2936   			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
;;;2937   			if (ifptr > 0 &&
;;;2938   				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
;;;2939   				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
;;;2940   				ofs -= fp->fptr;
;;;2941   				clst = fp->clust;
;;;2942   			} else {									/* When seek to back cluster, */
;;;2943   				clst = fp->sclust;						/* start from the first cluster */
;;;2944   #if !_FS_READONLY
;;;2945   				if (clst == 0) {						/* If no cluster chain, create a new chain */
;;;2946   					clst = create_chain(fp->fs, 0);
;;;2947   					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
;;;2948   					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2949   					fp->sclust = clst;
;;;2950   				}
;;;2951   #endif
;;;2952   				fp->clust = clst;
;;;2953   			}
;;;2954   			if (clst != 0) {
;;;2955   				while (ofs > bcs) {						/* Cluster following loop */
;;;2956   #if !_FS_READONLY
;;;2957   					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
;;;2958   						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
;;;2959   						if (clst == 0) {				/* When disk gets full, clip file size */
;;;2960   							ofs = bcs; break;
;;;2961   						}
;;;2962   					} else
;;;2963   #endif
;;;2964   						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
;;;2965   					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2966   					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
;;;2967   					fp->clust = clst;
;;;2968   					fp->fptr += bcs;
;;;2969   					ofs -= bcs;
;;;2970   				}
;;;2971   				fp->fptr += ofs;
;;;2972   				if (ofs % SS(fp->fs)) {
;;;2973   					nsect = clust2sect(fp->fs, clst);	/* Current sector */
;;;2974   					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
;;;2975   					nsect += ofs / SS(fp->fs);
;;;2976   				}
;;;2977   			}
;;;2978   		}
;;;2979   		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
;;;2980   #if !_FS_TINY
;;;2981   #if !_FS_READONLY
;;;2982   			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
;;;2983   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;2984   					ABORT(fp->fs, FR_DISK_ERR);
;;;2985   				fp->flag &= ~FA__DIRTY;
;;;2986   			}
;;;2987   #endif
;;;2988   			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
;;;2989   				ABORT(fp->fs, FR_DISK_ERR);
;;;2990   #endif
;;;2991   			fp->dsect = nsect;
;;;2992   		}
;;;2993   #if !_FS_READONLY
;;;2994   		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
;;;2995   			fp->fsize = fp->fptr;
;;;2996   			fp->flag |= FA__WRITTEN;
;;;2997   		}
;;;2998   #endif
;;;2999   	}
;;;3000   
;;;3001   	LEAVE_FF(fp->fs, res);
;;;3002   }
001516  e8bd87f0          POP      {r4-r10,pc}
                  |L1.5402|
00151a  79a0              LDRB     r0,[r4,#6]            ;2863
00151c  f0000080          AND      r0,r0,#0x80           ;2863
001520  b108              CBZ      r0,|L1.5414|
001522  2002              MOVS     r0,#2                 ;2864
001524  e7f7              B        |L1.5398|
                  |L1.5414|
001526  68e0              LDR      r0,[r4,#0xc]          ;2927
001528  42b0              CMP      r0,r6                 ;2927
00152a  d204              BCS      |L1.5430|
00152c  79a0              LDRB     r0,[r4,#6]            ;2929
00152e  f0000002          AND      r0,r0,#2              ;2929
001532  b900              CBNZ     r0,|L1.5430|
001534  68e6              LDR      r6,[r4,#0xc]          ;2931
                  |L1.5430|
001536  f8d49008          LDR      r9,[r4,#8]            ;2933
00153a  f04f0800          MOV      r8,#0                 ;2934
00153e  f8c48008          STR      r8,[r4,#8]            ;2934
001542  2e00              CMP      r6,#0                 ;2935
001544  d077              BEQ      |L1.5686|
001546  6820              LDR      r0,[r4,#0]            ;2936
001548  7880              LDRB     r0,[r0,#2]            ;2936
00154a  0247              LSLS     r7,r0,#9              ;2936
00154c  f1b90f00          CMP      r9,#0                 ;2937
001550  d011              BEQ      |L1.5494|
001552  1e70              SUBS     r0,r6,#1              ;2938
001554  fbb0f1f7          UDIV     r1,r0,r7              ;2938
001558  f1a90001          SUB      r0,r9,#1              ;2938
00155c  fbb0f0f7          UDIV     r0,r0,r7              ;2938
001560  4281              CMP      r1,r0                 ;2938
001562  d308              BCC      |L1.5494|
001564  f1a90001          SUB      r0,r9,#1              ;2939
001568  1e79              SUBS     r1,r7,#1              ;2939
00156a  4388              BICS     r0,r0,r1              ;2939
00156c  60a0              STR      r0,[r4,#8]            ;2939
00156e  68a0              LDR      r0,[r4,#8]            ;2940
001570  1a36              SUBS     r6,r6,r0              ;2940
001572  6965              LDR      r5,[r4,#0x14]         ;2941
001574  e018              B        |L1.5544|
                  |L1.5494|
001576  6925              LDR      r5,[r4,#0x10]         ;2943
001578  b9ad              CBNZ     r5,|L1.5542|
00157a  2100              MOVS     r1,#0                 ;2946
00157c  6820              LDR      r0,[r4,#0]            ;2946
00157e  f7fffffe          BL       create_chain
001582  4605              MOV      r5,r0                 ;2946
001584  2d01              CMP      r5,#1                 ;2947
001586  d105              BNE      |L1.5524|
001588  79a0              LDRB     r0,[r4,#6]            ;2947
00158a  f0400080          ORR      r0,r0,#0x80           ;2947
00158e  71a0              STRB     r0,[r4,#6]            ;2947
001590  2002              MOVS     r0,#2                 ;2947
001592  e7c0              B        |L1.5398|
                  |L1.5524|
001594  1c68              ADDS     r0,r5,#1              ;2948
001596  b928              CBNZ     r0,|L1.5540|
001598  79a0              LDRB     r0,[r4,#6]            ;2948
00159a  f0400080          ORR      r0,r0,#0x80           ;2948
00159e  71a0              STRB     r0,[r4,#6]            ;2948
0015a0  2001              MOVS     r0,#1                 ;2948
0015a2  e7b8              B        |L1.5398|
                  |L1.5540|
0015a4  6125              STR      r5,[r4,#0x10]         ;2949
                  |L1.5542|
0015a6  6165              STR      r5,[r4,#0x14]         ;2952
                  |L1.5544|
0015a8  2d00              CMP      r5,#0                 ;2954
0015aa  d044              BEQ      |L1.5686|
0015ac  e029              B        |L1.5634|
                  |L1.5550|
0015ae  79a0              LDRB     r0,[r4,#6]            ;2957
0015b0  f0000002          AND      r0,r0,#2              ;2957
0015b4  b138              CBZ      r0,|L1.5574|
0015b6  4629              MOV      r1,r5                 ;2958
0015b8  6820              LDR      r0,[r4,#0]            ;2958
0015ba  f7fffffe          BL       create_chain
0015be  4605              MOV      r5,r0                 ;2958
0015c0  b935              CBNZ     r5,|L1.5584|
0015c2  463e              MOV      r6,r7                 ;2960
0015c4  e01f              B        |L1.5638|
                  |L1.5574|
0015c6  4629              MOV      r1,r5                 ;2964
0015c8  6820              LDR      r0,[r4,#0]            ;2964
0015ca  f7fffffe          BL       get_fat
0015ce  4605              MOV      r5,r0                 ;2964
                  |L1.5584|
0015d0  1c68              ADDS     r0,r5,#1              ;2965
0015d2  b928              CBNZ     r0,|L1.5600|
0015d4  79a0              LDRB     r0,[r4,#6]            ;2965
0015d6  f0400080          ORR      r0,r0,#0x80           ;2965
0015da  71a0              STRB     r0,[r4,#6]            ;2965
0015dc  2001              MOVS     r0,#1                 ;2965
0015de  e79a              B        |L1.5398|
                  |L1.5600|
0015e0  2d01              CMP      r5,#1                 ;2966
0015e2  d903              BLS      |L1.5612|
0015e4  6820              LDR      r0,[r4,#0]            ;2966
0015e6  6980              LDR      r0,[r0,#0x18]         ;2966
0015e8  42a8              CMP      r0,r5                 ;2966
0015ea  d805              BHI      |L1.5624|
                  |L1.5612|
0015ec  79a0              LDRB     r0,[r4,#6]            ;2966
0015ee  f0400080          ORR      r0,r0,#0x80           ;2966
0015f2  71a0              STRB     r0,[r4,#6]            ;2966
0015f4  2002              MOVS     r0,#2                 ;2966
0015f6  e78e              B        |L1.5398|
                  |L1.5624|
0015f8  6165              STR      r5,[r4,#0x14]         ;2967
0015fa  68a0              LDR      r0,[r4,#8]            ;2968
0015fc  4438              ADD      r0,r0,r7              ;2968
0015fe  60a0              STR      r0,[r4,#8]            ;2968
001600  1bf6              SUBS     r6,r6,r7              ;2969
                  |L1.5634|
001602  42be              CMP      r6,r7                 ;2955
001604  d8d3              BHI      |L1.5550|
                  |L1.5638|
001606  bf00              NOP                            ;2960
001608  68a0              LDR      r0,[r4,#8]            ;2971
00160a  4430              ADD      r0,r0,r6              ;2971
00160c  60a0              STR      r0,[r4,#8]            ;2971
00160e  f3c60008          UBFX     r0,r6,#0,#9           ;2972
001612  b168              CBZ      r0,|L1.5680|
001614  4629              MOV      r1,r5                 ;2973
001616  6820              LDR      r0,[r4,#0]            ;2973
001618  f7fffffe          BL       clust2sect
00161c  4680              MOV      r8,r0                 ;2973
00161e  f1b80f00          CMP      r8,#0                 ;2974
001622  d106              BNE      |L1.5682|
001624  79a0              LDRB     r0,[r4,#6]            ;2974
001626  f0400080          ORR      r0,r0,#0x80           ;2974
00162a  71a0              STRB     r0,[r4,#6]            ;2974
00162c  2002              MOVS     r0,#2                 ;2974
00162e  e772              B        |L1.5398|
                  |L1.5680|
001630  e001              B        |L1.5686|
                  |L1.5682|
001632  eb082856          ADD      r8,r8,r6,LSR #9       ;2975
                  |L1.5686|
001636  8920              LDRH     r0,[r4,#8]            ;2979
001638  f3c00008          UBFX     r0,r0,#0,#9           ;2979
00163c  b350              CBZ      r0,|L1.5780|
00163e  69a0              LDR      r0,[r4,#0x18]         ;2979
001640  4540              CMP      r0,r8                 ;2979
001642  d027              BEQ      |L1.5780|
001644  79a0              LDRB     r0,[r4,#6]            ;2982
001646  f0000040          AND      r0,r0,#0x40           ;2982
00164a  b190              CBZ      r0,|L1.5746|
00164c  6821              LDR      r1,[r4,#0]            ;2983
00164e  7848              LDRB     r0,[r1,#1]            ;2983
001650  2301              MOVS     r3,#1                 ;2983
001652  f1040124          ADD      r1,r4,#0x24           ;2983
001656  69a2              LDR      r2,[r4,#0x18]         ;2983
001658  f7fffffe          BL       disk_write
00165c  b128              CBZ      r0,|L1.5738|
00165e  79a0              LDRB     r0,[r4,#6]            ;2984
001660  f0400080          ORR      r0,r0,#0x80           ;2984
001664  71a0              STRB     r0,[r4,#6]            ;2984
001666  2001              MOVS     r0,#1                 ;2984
001668  e755              B        |L1.5398|
                  |L1.5738|
00166a  79a0              LDRB     r0,[r4,#6]            ;2985
00166c  f0200040          BIC      r0,r0,#0x40           ;2985
001670  71a0              STRB     r0,[r4,#6]            ;2985
                  |L1.5746|
001672  6821              LDR      r1,[r4,#0]            ;2988
001674  7848              LDRB     r0,[r1,#1]            ;2988
001676  2301              MOVS     r3,#1                 ;2988
001678  4642              MOV      r2,r8                 ;2988
00167a  f1040124          ADD      r1,r4,#0x24           ;2988
00167e  f7fffffe          BL       disk_read
001682  b128              CBZ      r0,|L1.5776|
001684  79a0              LDRB     r0,[r4,#6]            ;2989
001686  f0400080          ORR      r0,r0,#0x80           ;2989
00168a  71a0              STRB     r0,[r4,#6]            ;2989
00168c  2001              MOVS     r0,#1                 ;2989
00168e  e742              B        |L1.5398|
                  |L1.5776|
001690  f8c48018          STR      r8,[r4,#0x18]         ;2991
                  |L1.5780|
001694  e9d40102          LDRD     r0,r1,[r4,#8]         ;2994
001698  4288              CMP      r0,r1                 ;2994
00169a  d905              BLS      |L1.5800|
00169c  68a0              LDR      r0,[r4,#8]            ;2995
00169e  60e0              STR      r0,[r4,#0xc]          ;2995
0016a0  79a0              LDRB     r0,[r4,#6]            ;2996
0016a2  f0400020          ORR      r0,r0,#0x20           ;2996
0016a6  71a0              STRB     r0,[r4,#6]            ;2996
                  |L1.5800|
0016a8  4650              MOV      r0,r10                ;3001
0016aa  e734              B        |L1.5398|
;;;3003   
                          ENDP

                  f_opendir PROC
;;;3010   
;;;3011   FRESULT f_opendir (
0016ac  b573              PUSH     {r0,r1,r4-r6,lr}
;;;3012   	DIR *dj,			/* Pointer to directory object to create */
;;;3013   	const TCHAR *path	/* Pointer to the directory path */
;;;3014   )
;;;3015   {
0016ae  b084              SUB      sp,sp,#0x10
0016b0  4604              MOV      r4,r0
;;;3016   	FRESULT res;
;;;3017   	FATFS *fs;
;;;3018   	DEF_NAMEBUF;
;;;3019   
;;;3020   
;;;3021   	if (!dj) return FR_INVALID_OBJECT;
0016b2  b914              CBNZ     r4,|L1.5818|
0016b4  2009              MOVS     r0,#9
                  |L1.5814|
;;;3022   
;;;3023   	res = chk_mounted(&path, &dj->fs, 0);
;;;3024   	fs = dj->fs;
;;;3025   	if (res == FR_OK) {
;;;3026   		INIT_BUF(*dj);
;;;3027   		res = follow_path(dj, path);			/* Follow the path to the directory */
;;;3028   		FREE_BUF();
;;;3029   		if (res == FR_OK) {						/* Follow completed */
;;;3030   			if (dj->dir) {						/* It is not the root dir */
;;;3031   				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
;;;3032   					dj->sclust = ld_clust(fs, dj->dir);
;;;3033   				} else {						/* The object is not a directory */
;;;3034   					res = FR_NO_PATH;
;;;3035   				}
;;;3036   			}
;;;3037   			if (res == FR_OK) {
;;;3038   				dj->id = fs->id;
;;;3039   				res = dir_sdi(dj, 0);			/* Rewind dir */
;;;3040   			}
;;;3041   		}
;;;3042   		if (res == FR_NO_FILE) res = FR_NO_PATH;
;;;3043   		if (res != FR_OK) dj->fs = 0;			/* Invalidate the dir object if function faild */
;;;3044   	} else {
;;;3045   		dj->fs = 0;
;;;3046   	}
;;;3047   
;;;3048   	LEAVE_FF(fs, res);
;;;3049   }
0016b6  b006              ADD      sp,sp,#0x18
0016b8  bd70              POP      {r4-r6,pc}
                  |L1.5818|
0016ba  2200              MOVS     r2,#0                 ;3023
0016bc  4621              MOV      r1,r4                 ;3023
0016be  a805              ADD      r0,sp,#0x14           ;3023
0016c0  f7fffffe          BL       chk_mounted
0016c4  4605              MOV      r5,r0                 ;3023
0016c6  6826              LDR      r6,[r4,#0]            ;3024
0016c8  bb25              CBNZ     r5,|L1.5908|
0016ca  a801              ADD      r0,sp,#4              ;3026
0016cc  61a0              STR      r0,[r4,#0x18]         ;3026
0016ce  4620              MOV      r0,r4                 ;3027
0016d0  9905              LDR      r1,[sp,#0x14]         ;3027
0016d2  f7fffffe          BL       follow_path
0016d6  4605              MOV      r5,r0                 ;3027
0016d8  b9ad              CBNZ     r5,|L1.5894|
0016da  6960              LDR      r0,[r4,#0x14]         ;3030
0016dc  b158              CBZ      r0,|L1.5878|
0016de  6960              LDR      r0,[r4,#0x14]         ;3031
0016e0  7ac0              LDRB     r0,[r0,#0xb]          ;3031
0016e2  f0000010          AND      r0,r0,#0x10           ;3031
0016e6  b128              CBZ      r0,|L1.5876|
0016e8  4630              MOV      r0,r6                 ;3032
0016ea  6961              LDR      r1,[r4,#0x14]         ;3032
0016ec  f7fffffe          BL       ld_clust
0016f0  60a0              STR      r0,[r4,#8]            ;3032
0016f2  e000              B        |L1.5878|
                  |L1.5876|
0016f4  2505              MOVS     r5,#5                 ;3034
                  |L1.5878|
0016f6  b935              CBNZ     r5,|L1.5894|
0016f8  88f0              LDRH     r0,[r6,#6]            ;3038
0016fa  80a0              STRH     r0,[r4,#4]            ;3038
0016fc  2100              MOVS     r1,#0                 ;3039
0016fe  4620              MOV      r0,r4                 ;3039
001700  f7fffffe          BL       dir_sdi
001704  4605              MOV      r5,r0                 ;3039
                  |L1.5894|
001706  2d04              CMP      r5,#4                 ;3042
001708  d100              BNE      |L1.5900|
00170a  2505              MOVS     r5,#5                 ;3042
                  |L1.5900|
00170c  b125              CBZ      r5,|L1.5912|
00170e  2000              MOVS     r0,#0                 ;3043
001710  6020              STR      r0,[r4,#0]            ;3043
001712  e001              B        |L1.5912|
                  |L1.5908|
001714  2000              MOVS     r0,#0                 ;3045
001716  6020              STR      r0,[r4,#0]            ;3045
                  |L1.5912|
001718  4628              MOV      r0,r5                 ;3048
00171a  e7cc              B        |L1.5814|
;;;3050   
                          ENDP

                  f_readdir PROC
;;;3057   
;;;3058   FRESULT f_readdir (
00171c  b5fe              PUSH     {r1-r7,lr}
;;;3059   	DIR *dj,			/* Pointer to the open directory object */
;;;3060   	FILINFO *fno		/* Pointer to file information to return */
;;;3061   )
;;;3062   {
00171e  4605              MOV      r5,r0
001720  460e              MOV      r6,r1
;;;3063   	FRESULT res;
;;;3064   	DEF_NAMEBUF;
;;;3065   
;;;3066   
;;;3067   	res = validate(dj);						/* Check validity of the object */
001722  4628              MOV      r0,r5
001724  f7fffffe          BL       validate
001728  4604              MOV      r4,r0
;;;3068   	if (res == FR_OK) {
00172a  bb04              CBNZ     r4,|L1.5998|
;;;3069   		if (!fno) {
00172c  b92e              CBNZ     r6,|L1.5946|
;;;3070   			res = dir_sdi(dj, 0);			/* Rewind the directory object */
00172e  2100              MOVS     r1,#0
001730  4628              MOV      r0,r5
001732  f7fffffe          BL       dir_sdi
001736  4604              MOV      r4,r0
001738  e019              B        |L1.5998|
                  |L1.5946|
;;;3071   		} else {
;;;3072   			INIT_BUF(*dj);
00173a  f8c5d018          STR      sp,[r5,#0x18]
;;;3073   			res = dir_read(dj);				/* Read an directory item */
00173e  4628              MOV      r0,r5
001740  f7fffffe          BL       dir_read
001744  4604              MOV      r4,r0
;;;3074   			if (res == FR_NO_FILE) {		/* Reached end of dir */
001746  2c04              CMP      r4,#4
001748  d102              BNE      |L1.5968|
;;;3075   				dj->sect = 0;
00174a  2000              MOVS     r0,#0
00174c  6128              STR      r0,[r5,#0x10]
;;;3076   				res = FR_OK;
00174e  2400              MOVS     r4,#0
                  |L1.5968|
;;;3077   			}
;;;3078   			if (res == FR_OK) {				/* A valid entry is found */
001750  b96c              CBNZ     r4,|L1.5998|
;;;3079   				get_fileinfo(dj, fno);		/* Get the object information */
001752  4631              MOV      r1,r6
001754  4628              MOV      r0,r5
001756  f7fffffe          BL       get_fileinfo
;;;3080   				res = dir_next(dj, 0);		/* Increment index for next */
00175a  2100              MOVS     r1,#0
00175c  4628              MOV      r0,r5
00175e  f7fffffe          BL       dir_next
001762  4604              MOV      r4,r0
;;;3081   				if (res == FR_NO_FILE) {
001764  2c04              CMP      r4,#4
001766  d102              BNE      |L1.5998|
;;;3082   					dj->sect = 0;
001768  2000              MOVS     r0,#0
00176a  6128              STR      r0,[r5,#0x10]
;;;3083   					res = FR_OK;
00176c  2400              MOVS     r4,#0
                  |L1.5998|
;;;3084   				}
;;;3085   			}
;;;3086   			FREE_BUF();
;;;3087   		}
;;;3088   	}
;;;3089   
;;;3090   	LEAVE_FF(dj->fs, res);
00176e  4620              MOV      r0,r4
;;;3091   }
001770  bdfe              POP      {r1-r7,pc}
;;;3092   
                          ENDP

                  f_stat PROC
;;;3099   
;;;3100   FRESULT f_stat (
001772  b533              PUSH     {r0,r1,r4,r5,lr}
;;;3101   	const TCHAR *path,	/* Pointer to the file path */
;;;3102   	FILINFO *fno		/* Pointer to file information to return */
;;;3103   )
;;;3104   {
001774  b08b              SUB      sp,sp,#0x2c
001776  460d              MOV      r5,r1
;;;3105   	FRESULT res;
;;;3106   	DIR dj;
;;;3107   	DEF_NAMEBUF;
;;;3108   
;;;3109   
;;;3110   	res = chk_mounted(&path, &dj.fs, 0);
001778  2200              MOVS     r2,#0
00177a  a904              ADD      r1,sp,#0x10
00177c  a80b              ADD      r0,sp,#0x2c
00177e  f7fffffe          BL       chk_mounted
001782  4604              MOV      r4,r0
;;;3111   	if (res == FR_OK) {
001784  b97c              CBNZ     r4,|L1.6054|
;;;3112   		INIT_BUF(dj);
001786  a801              ADD      r0,sp,#4
001788  900a              STR      r0,[sp,#0x28]
;;;3113   		res = follow_path(&dj, path);	/* Follow the file path */
00178a  a804              ADD      r0,sp,#0x10
00178c  990b              LDR      r1,[sp,#0x2c]
00178e  f7fffffe          BL       follow_path
001792  4604              MOV      r4,r0
;;;3114   		if (res == FR_OK) {				/* Follow completed */
001794  b93c              CBNZ     r4,|L1.6054|
;;;3115   			if (dj.dir)		/* Found an object */
001796  9809              LDR      r0,[sp,#0x24]
001798  b120              CBZ      r0,|L1.6052|
;;;3116   				get_fileinfo(&dj, fno);
00179a  4629              MOV      r1,r5
00179c  a804              ADD      r0,sp,#0x10
00179e  f7fffffe          BL       get_fileinfo
0017a2  e000              B        |L1.6054|
                  |L1.6052|
;;;3117   			else			/* It is root dir */
;;;3118   				res = FR_INVALID_NAME;
0017a4  2406              MOVS     r4,#6
                  |L1.6054|
;;;3119   		}
;;;3120   		FREE_BUF();
;;;3121   	}
;;;3122   
;;;3123   	LEAVE_FF(dj.fs, res);
0017a6  4620              MOV      r0,r4
;;;3124   }
0017a8  b00d              ADD      sp,sp,#0x34
0017aa  bd30              POP      {r4,r5,pc}
;;;3125   
                          ENDP

                  f_getfree PROC
;;;3132   
;;;3133   FRESULT f_getfree (
0017ac  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;3134   	const TCHAR *path,	/* Pointer to the logical drive number (root dir) */
;;;3135   	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
;;;3136   	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
;;;3137   )
;;;3138   {
0017b0  b082              SUB      sp,sp,#8
0017b2  468b              MOV      r11,r1
;;;3139   	FRESULT res;
;;;3140   	FATFS *fs;
;;;3141   	DWORD n, clst, sect, stat;
;;;3142   	UINT i;
;;;3143   	BYTE fat, *p;
;;;3144   
;;;3145   
;;;3146   	/* Get drive number */
;;;3147   	res = chk_mounted(&path, fatfs, 0);
0017b4  2200              MOVS     r2,#0
0017b6  a802              ADD      r0,sp,#8
0017b8  9904              LDR      r1,[sp,#0x10]
0017ba  f7fffffe          BL       chk_mounted
0017be  9001              STR      r0,[sp,#4]
;;;3148   	fs = *fatfs;
0017c0  9804              LDR      r0,[sp,#0x10]
0017c2  6804              LDR      r4,[r0,#0]
;;;3149   	if (res == FR_OK) {
0017c4  9801              LDR      r0,[sp,#4]
0017c6  2800              CMP      r0,#0
0017c8  d16e              BNE      |L1.6312|
;;;3150   		/* If free_clust is valid, return it without full cluster scan */
;;;3151   		if (fs->free_clust <= fs->n_fatent - 2) {
0017ca  69a0              LDR      r0,[r4,#0x18]
0017cc  1e80              SUBS     r0,r0,#2
0017ce  6921              LDR      r1,[r4,#0x10]
0017d0  4281              CMP      r1,r0
0017d2  d803              BHI      |L1.6108|
;;;3152   			*nclst = fs->free_clust;
0017d4  6920              LDR      r0,[r4,#0x10]
0017d6  f8cb0000          STR      r0,[r11,#0]
0017da  e065              B        |L1.6312|
                  |L1.6108|
;;;3153   		} else {
;;;3154   			/* Get number of free clusters */
;;;3155   			fat = fs->fs_type;
0017dc  f894a000          LDRB     r10,[r4,#0]
;;;3156   			n = 0;
0017e0  2600              MOVS     r6,#0
;;;3157   			if (fat == FS_FAT12) {
0017e2  f1ba0f01          CMP      r10,#1
0017e6  d11c              BNE      |L1.6178|
;;;3158   				clst = 2;
0017e8  2702              MOVS     r7,#2
;;;3159   				do {
0017ea  bf00              NOP      
                  |L1.6124|
;;;3160   					stat = get_fat(fs, clst);
0017ec  4639              MOV      r1,r7
0017ee  4620              MOV      r0,r4
0017f0  f7fffffe          BL       get_fat
0017f4  4680              MOV      r8,r0
;;;3161   					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
0017f6  f1080001          ADD      r0,r8,#1
0017fa  b910              CBNZ     r0,|L1.6146|
0017fc  2001              MOVS     r0,#1
0017fe  9001              STR      r0,[sp,#4]
001800  e00e              B        |L1.6176|
                  |L1.6146|
;;;3162   					if (stat == 1) { res = FR_INT_ERR; break; }
001802  f1b80f01          CMP      r8,#1
001806  d102              BNE      |L1.6158|
001808  2002              MOVS     r0,#2
00180a  9001              STR      r0,[sp,#4]
00180c  e008              B        |L1.6176|
                  |L1.6158|
;;;3163   					if (stat == 0) n++;
00180e  f1b80f00          CMP      r8,#0
001812  d100              BNE      |L1.6166|
001814  1c76              ADDS     r6,r6,#1
                  |L1.6166|
;;;3164   				} while (++clst < fs->n_fatent);
001816  1c78              ADDS     r0,r7,#1
001818  4607              MOV      r7,r0
00181a  69a1              LDR      r1,[r4,#0x18]
00181c  4288              CMP      r0,r1
00181e  d3e5              BCC      |L1.6124|
                  |L1.6176|
001820  e03a              B        |L1.6296|
                  |L1.6178|
;;;3165   			} else {
;;;3166   				clst = fs->n_fatent;
001822  69a7              LDR      r7,[r4,#0x18]
;;;3167   				sect = fs->fatbase;
001824  6a20              LDR      r0,[r4,#0x20]
001826  9000              STR      r0,[sp,#0]
;;;3168   				i = 0; p = 0;
001828  f04f0900          MOV      r9,#0
00182c  2500              MOVS     r5,#0
;;;3169   				do {
00182e  bf00              NOP      
                  |L1.6192|
;;;3170   					if (!i) {
001830  f1b90f00          CMP      r9,#0
001834  d10e              BNE      |L1.6228|
;;;3171   						res = move_window(fs, sect++);
001836  9800              LDR      r0,[sp,#0]
001838  1c42              ADDS     r2,r0,#1
00183a  4601              MOV      r1,r0
00183c  4620              MOV      r0,r4
00183e  9200              STR      r2,[sp,#0]
001840  f7fffffe          BL       move_window
001844  9001              STR      r0,[sp,#4]
;;;3172   						if (res != FR_OK) break;
001846  9801              LDR      r0,[sp,#4]
001848  b100              CBZ      r0,|L1.6220|
00184a  e024              B        |L1.6294|
                  |L1.6220|
;;;3173   						p = fs->win;
00184c  f1040530          ADD      r5,r4,#0x30
;;;3174   						i = SS(fs);
001850  f44f7900          MOV      r9,#0x200
                  |L1.6228|
;;;3175   					}
;;;3176   					if (fat == FS_FAT16) {
001854  f1ba0f02          CMP      r10,#2
001858  d109              BNE      |L1.6254|
;;;3177   						if (LD_WORD(p) == 0) n++;
00185a  7828              LDRB     r0,[r5,#0]
00185c  7869              LDRB     r1,[r5,#1]
00185e  ea402001          ORR      r0,r0,r1,LSL #8
001862  b900              CBNZ     r0,|L1.6246|
001864  1c76              ADDS     r6,r6,#1
                  |L1.6246|
;;;3178   						p += 2; i -= 2;
001866  1cad              ADDS     r5,r5,#2
001868  f1a90902          SUB      r9,r9,#2
00186c  e010              B        |L1.6288|
                  |L1.6254|
;;;3179   					} else {
;;;3180   						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
00186e  78e8              LDRB     r0,[r5,#3]
001870  0600              LSLS     r0,r0,#24
001872  78a9              LDRB     r1,[r5,#2]
001874  ea404001          ORR      r0,r0,r1,LSL #16
001878  7869              LDRB     r1,[r5,#1]
00187a  ea402001          ORR      r0,r0,r1,LSL #8
00187e  7829              LDRB     r1,[r5,#0]
001880  4308              ORRS     r0,r0,r1
001882  f0204070          BIC      r0,r0,#0xf0000000
001886  b900              CBNZ     r0,|L1.6282|
001888  1c76              ADDS     r6,r6,#1
                  |L1.6282|
;;;3181   						p += 4; i -= 4;
00188a  1d2d              ADDS     r5,r5,#4
00188c  f1a90904          SUB      r9,r9,#4
                  |L1.6288|
;;;3182   					}
;;;3183   				} while (--clst);
001890  1e78              SUBS     r0,r7,#1
001892  0007              MOVS     r7,r0
001894  d1cc              BNE      |L1.6192|
                  |L1.6294|
001896  bf00              NOP                            ;3172
                  |L1.6296|
;;;3184   			}
;;;3185   			fs->free_clust = n;
001898  6126              STR      r6,[r4,#0x10]
;;;3186   			if (fat == FS_FAT32) fs->fsi_flag = 1;
00189a  f1ba0f03          CMP      r10,#3
00189e  d101              BNE      |L1.6308|
0018a0  2001              MOVS     r0,#1
0018a2  7160              STRB     r0,[r4,#5]
                  |L1.6308|
;;;3187   			*nclst = n;
0018a4  f8cb6000          STR      r6,[r11,#0]
                  |L1.6312|
;;;3188   		}
;;;3189   	}
;;;3190   	LEAVE_FF(fs, res);
0018a8  9801              LDR      r0,[sp,#4]
;;;3191   }
0018aa  b005              ADD      sp,sp,#0x14
0018ac  e8bd8ff0          POP      {r4-r11,pc}
;;;3192   
                          ENDP

                  f_truncate PROC
;;;3199   
;;;3200   FRESULT f_truncate (
0018b0  b570              PUSH     {r4-r6,lr}
;;;3201   	FIL *fp		/* Pointer to the file object */
;;;3202   )
;;;3203   {
0018b2  4604              MOV      r4,r0
;;;3204   	FRESULT res;
;;;3205   	DWORD ncl;
;;;3206   
;;;3207   
;;;3208   	if (!fp) return FR_INVALID_OBJECT;
0018b4  b90c              CBNZ     r4,|L1.6330|
0018b6  2009              MOVS     r0,#9
                  |L1.6328|
;;;3209   
;;;3210   	res = validate(fp);						/* Check validity of the object */
;;;3211   	if (res == FR_OK) {
;;;3212   		if (fp->flag & FA__ERROR) {			/* Check abort flag */
;;;3213   			res = FR_INT_ERR;
;;;3214   		} else {
;;;3215   			if (!(fp->flag & FA_WRITE))		/* Check access mode */
;;;3216   				res = FR_DENIED;
;;;3217   		}
;;;3218   	}
;;;3219   	if (res == FR_OK) {
;;;3220   		if (fp->fsize > fp->fptr) {
;;;3221   			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
;;;3222   			fp->flag |= FA__WRITTEN;
;;;3223   			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
;;;3224   				res = remove_chain(fp->fs, fp->sclust);
;;;3225   				fp->sclust = 0;
;;;3226   			} else {				/* When truncate a part of the file, remove remaining clusters */
;;;3227   				ncl = get_fat(fp->fs, fp->clust);
;;;3228   				res = FR_OK;
;;;3229   				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
;;;3230   				if (ncl == 1) res = FR_INT_ERR;
;;;3231   				if (res == FR_OK && ncl < fp->fs->n_fatent) {
;;;3232   					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
;;;3233   					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
;;;3234   				}
;;;3235   			}
;;;3236   		}
;;;3237   		if (res != FR_OK) fp->flag |= FA__ERROR;
;;;3238   	}
;;;3239   
;;;3240   	LEAVE_FF(fp->fs, res);
;;;3241   }
0018b8  bd70              POP      {r4-r6,pc}
                  |L1.6330|
0018ba  4620              MOV      r0,r4                 ;3210
0018bc  f7fffffe          BL       validate
0018c0  4605              MOV      r5,r0                 ;3210
0018c2  b955              CBNZ     r5,|L1.6362|
0018c4  79a0              LDRB     r0,[r4,#6]            ;3212
0018c6  f0000080          AND      r0,r0,#0x80           ;3212
0018ca  b108              CBZ      r0,|L1.6352|
0018cc  2502              MOVS     r5,#2                 ;3213
0018ce  e004              B        |L1.6362|
                  |L1.6352|
0018d0  79a0              LDRB     r0,[r4,#6]            ;3215
0018d2  f0000002          AND      r0,r0,#2              ;3215
0018d6  b900              CBNZ     r0,|L1.6362|
0018d8  2507              MOVS     r5,#7                 ;3216
                  |L1.6362|
0018da  2d00              CMP      r5,#0                 ;3219
0018dc  d136              BNE      |L1.6476|
0018de  e9d41002          LDRD     r1,r0,[r4,#8]         ;3220
0018e2  4288              CMP      r0,r1                 ;3220
0018e4  d92d              BLS      |L1.6466|
0018e6  68a0              LDR      r0,[r4,#8]            ;3221
0018e8  60e0              STR      r0,[r4,#0xc]          ;3221
0018ea  79a0              LDRB     r0,[r4,#6]            ;3222
0018ec  f0400020          ORR      r0,r0,#0x20           ;3222
0018f0  71a0              STRB     r0,[r4,#6]            ;3222
0018f2  68a0              LDR      r0,[r4,#8]            ;3223
0018f4  b938              CBNZ     r0,|L1.6406|
0018f6  6921              LDR      r1,[r4,#0x10]         ;3224
0018f8  6820              LDR      r0,[r4,#0]            ;3224
0018fa  f7fffffe          BL       remove_chain
0018fe  4605              MOV      r5,r0                 ;3224
001900  2000              MOVS     r0,#0                 ;3225
001902  6120              STR      r0,[r4,#0x10]         ;3225
001904  e01d              B        |L1.6466|
                  |L1.6406|
001906  6961              LDR      r1,[r4,#0x14]         ;3227
001908  6820              LDR      r0,[r4,#0]            ;3227
00190a  f7fffffe          BL       get_fat
00190e  4606              MOV      r6,r0                 ;3227
001910  2500              MOVS     r5,#0                 ;3228
001912  1c70              ADDS     r0,r6,#1              ;3229
001914  b900              CBNZ     r0,|L1.6424|
001916  2501              MOVS     r5,#1                 ;3229
                  |L1.6424|
001918  2e01              CMP      r6,#1                 ;3230
00191a  d100              BNE      |L1.6430|
00191c  2502              MOVS     r5,#2                 ;3230
                  |L1.6430|
00191e  b985              CBNZ     r5,|L1.6466|
001920  6820              LDR      r0,[r4,#0]            ;3231
001922  6980              LDR      r0,[r0,#0x18]         ;3231
001924  42b0              CMP      r0,r6                 ;3231
001926  d90c              BLS      |L1.6466|
001928  f06f4270          MVN      r2,#0xf0000000        ;3232
00192c  6961              LDR      r1,[r4,#0x14]         ;3232
00192e  6820              LDR      r0,[r4,#0]            ;3232
001930  f7fffffe          BL       put_fat
001934  4605              MOV      r5,r0                 ;3232
001936  b925              CBNZ     r5,|L1.6466|
001938  4631              MOV      r1,r6                 ;3233
00193a  6820              LDR      r0,[r4,#0]            ;3233
00193c  f7fffffe          BL       remove_chain
001940  4605              MOV      r5,r0                 ;3233
                  |L1.6466|
001942  b11d              CBZ      r5,|L1.6476|
001944  79a0              LDRB     r0,[r4,#6]            ;3237
001946  f0400080          ORR      r0,r0,#0x80           ;3237
00194a  71a0              STRB     r0,[r4,#6]            ;3237
                  |L1.6476|
00194c  4628              MOV      r0,r5                 ;3240
00194e  e7b3              B        |L1.6328|
;;;3242   
                          ENDP

                  f_unlink PROC
;;;3249   
;;;3250   FRESULT f_unlink (
001950  b571              PUSH     {r0,r4-r6,lr}
;;;3251   	const TCHAR *path		/* Pointer to the file or directory path */
;;;3252   )
;;;3253   {
001952  b091              SUB      sp,sp,#0x44
;;;3254   	FRESULT res;
;;;3255   	DIR dj, sdj;
;;;3256   	BYTE *dir;
;;;3257   	DWORD dclst;
;;;3258   	DEF_NAMEBUF;
;;;3259   
;;;3260   
;;;3261   	res = chk_mounted(&path, &dj.fs, 1);
001954  2201              MOVS     r2,#1
001956  a90a              ADD      r1,sp,#0x28
001958  a811              ADD      r0,sp,#0x44
00195a  f7fffffe          BL       chk_mounted
00195e  4604              MOV      r4,r0
;;;3262   	if (res == FR_OK) {
001960  2c00              CMP      r4,#0
001962  d146              BNE      |L1.6642|
;;;3263   		INIT_BUF(dj);
001964  f8cdd040          STR      sp,[sp,#0x40]
;;;3264   		res = follow_path(&dj, path);		/* Follow the file path */
001968  a80a              ADD      r0,sp,#0x28
00196a  9911              LDR      r1,[sp,#0x44]
00196c  f7fffffe          BL       follow_path
001970  4604              MOV      r4,r0
;;;3265   		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
001972  bf00              NOP      
;;;3266   			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
;;;3267   #if _FS_LOCK
;;;3268   		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
;;;3269   #endif
;;;3270   		if (res == FR_OK) {					/* The object is accessible */
001974  2c00              CMP      r4,#0
001976  d13c              BNE      |L1.6642|
;;;3271   			dir = dj.dir;
001978  9e0f              LDR      r6,[sp,#0x3c]
;;;3272   			if (!dir) {
00197a  b90e              CBNZ     r6,|L1.6528|
;;;3273   				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
00197c  2406              MOVS     r4,#6
00197e  e004              B        |L1.6538|
                  |L1.6528|
;;;3274   			} else {
;;;3275   				if (dir[DIR_Attr] & AM_RDO)
001980  7af0              LDRB     r0,[r6,#0xb]
001982  f0000001          AND      r0,r0,#1
001986  b100              CBZ      r0,|L1.6538|
;;;3276   					res = FR_DENIED;		/* Cannot remove R/O object */
001988  2407              MOVS     r4,#7
                  |L1.6538|
;;;3277   			}
;;;3278   			dclst = ld_clust(dj.fs, dir);
00198a  4631              MOV      r1,r6
00198c  980a              LDR      r0,[sp,#0x28]
00198e  f7fffffe          BL       ld_clust
001992  4605              MOV      r5,r0
;;;3279   			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
001994  b9e4              CBNZ     r4,|L1.6608|
001996  7af0              LDRB     r0,[r6,#0xb]
001998  f0000010          AND      r0,r0,#0x10
00199c  b1c0              CBZ      r0,|L1.6608|
;;;3280   				if (dclst < 2) {
00199e  2d02              CMP      r5,#2
0019a0  d201              BCS      |L1.6566|
;;;3281   					res = FR_INT_ERR;
0019a2  2402              MOVS     r4,#2
0019a4  e014              B        |L1.6608|
                  |L1.6566|
;;;3282   				} else {
;;;3283   					mem_cpy(&sdj, &dj, sizeof (DIR));	/* Check if the sub-dir is empty or not */
0019a6  221c              MOVS     r2,#0x1c
0019a8  a90a              ADD      r1,sp,#0x28
0019aa  a803              ADD      r0,sp,#0xc
0019ac  f7fffffe          BL       mem_cpy
;;;3284   					sdj.sclust = dclst;
0019b0  9505              STR      r5,[sp,#0x14]
;;;3285   					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
0019b2  2102              MOVS     r1,#2
0019b4  a803              ADD      r0,sp,#0xc
0019b6  f7fffffe          BL       dir_sdi
0019ba  4604              MOV      r4,r0
;;;3286   					if (res == FR_OK) {
0019bc  b944              CBNZ     r4,|L1.6608|
;;;3287   						res = dir_read(&sdj);
0019be  a803              ADD      r0,sp,#0xc
0019c0  f7fffffe          BL       dir_read
0019c4  4604              MOV      r4,r0
;;;3288   						if (res == FR_OK		/* Not empty dir */
0019c6  b904              CBNZ     r4,|L1.6602|
;;;3289   #if _FS_RPATH
;;;3290   						|| dclst == dj.fs->cdir	/* Current dir */
;;;3291   #endif
;;;3292   						) res = FR_DENIED;
0019c8  2407              MOVS     r4,#7
                  |L1.6602|
;;;3293   						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
0019ca  2c04              CMP      r4,#4
0019cc  d100              BNE      |L1.6608|
0019ce  2400              MOVS     r4,#0
                  |L1.6608|
;;;3294   					}
;;;3295   				}
;;;3296   			}
;;;3297   			if (res == FR_OK) {
0019d0  b97c              CBNZ     r4,|L1.6642|
;;;3298   				res = dir_remove(&dj);		/* Remove the directory entry */
0019d2  a80a              ADD      r0,sp,#0x28
0019d4  f7fffffe          BL       dir_remove
0019d8  4604              MOV      r4,r0
;;;3299   				if (res == FR_OK) {
0019da  b954              CBNZ     r4,|L1.6642|
;;;3300   					if (dclst)				/* Remove the cluster chain if exist */
0019dc  b125              CBZ      r5,|L1.6632|
;;;3301   						res = remove_chain(dj.fs, dclst);
0019de  4629              MOV      r1,r5
0019e0  980a              LDR      r0,[sp,#0x28]
0019e2  f7fffffe          BL       remove_chain
0019e6  4604              MOV      r4,r0
                  |L1.6632|
;;;3302   					if (res == FR_OK) res = sync(dj.fs);
0019e8  b91c              CBNZ     r4,|L1.6642|
0019ea  980a              LDR      r0,[sp,#0x28]
0019ec  f7fffffe          BL       sync
0019f0  4604              MOV      r4,r0
                  |L1.6642|
;;;3303   				}
;;;3304   			}
;;;3305   		}
;;;3306   		FREE_BUF();
;;;3307   	}
;;;3308   	LEAVE_FF(dj.fs, res);
0019f2  4620              MOV      r0,r4
;;;3309   }
0019f4  b012              ADD      sp,sp,#0x48
0019f6  bd70              POP      {r4-r6,pc}
;;;3310   
                          ENDP

                  f_mkdir PROC
;;;3317   
;;;3318   FRESULT f_mkdir (
0019f8  e92d47f1          PUSH     {r0,r4-r10,lr}
;;;3319   	const TCHAR *path		/* Pointer to the directory path */
;;;3320   )
;;;3321   {
0019fc  b08b              SUB      sp,sp,#0x2c
;;;3322   	FRESULT res;
;;;3323   	DIR dj;
;;;3324   	BYTE *dir, n;
;;;3325   	DWORD dsc, dcl, pcl, tim = get_fattime();
0019fe  f7fffffe          BL       get_fattime
001a02  4606              MOV      r6,r0
;;;3326   	DEF_NAMEBUF;
;;;3327   
;;;3328   
;;;3329   	res = chk_mounted(&path, &dj.fs, 1);
001a04  2201              MOVS     r2,#1
001a06  a904              ADD      r1,sp,#0x10
001a08  a80b              ADD      r0,sp,#0x2c
001a0a  f7fffffe          BL       chk_mounted
001a0e  4605              MOV      r5,r0
;;;3330   	if (res == FR_OK) {
001a10  2d00              CMP      r5,#0
                  |L1.6674|
001a12  d16f              BNE      |L1.6900|
;;;3331   		INIT_BUF(dj);
001a14  a801              ADD      r0,sp,#4
001a16  900a              STR      r0,[sp,#0x28]
;;;3332   		res = follow_path(&dj, path);			/* Follow the file path */
001a18  a804              ADD      r0,sp,#0x10
001a1a  990b              LDR      r1,[sp,#0x2c]
001a1c  f7fffffe          BL       follow_path
001a20  4605              MOV      r5,r0
;;;3333   		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
001a22  b905              CBNZ     r5,|L1.6694|
001a24  2508              MOVS     r5,#8
                  |L1.6694|
;;;3334   		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
001a26  bf00              NOP      
;;;3335   			res = FR_INVALID_NAME;
;;;3336   		if (res == FR_NO_FILE) {				/* Can create a new directory */
001a28  2d04              CMP      r5,#4
001a2a  d1f2              BNE      |L1.6674|
;;;3337   			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
001a2c  2100              MOVS     r1,#0
001a2e  9804              LDR      r0,[sp,#0x10]
001a30  f7fffffe          BL       create_chain
001a34  4607              MOV      r7,r0
;;;3338   			res = FR_OK;
001a36  2500              MOVS     r5,#0
;;;3339   			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
001a38  b907              CBNZ     r7,|L1.6716|
001a3a  2507              MOVS     r5,#7
                  |L1.6716|
;;;3340   			if (dcl == 1) res = FR_INT_ERR;
001a3c  2f01              CMP      r7,#1
001a3e  d100              BNE      |L1.6722|
001a40  2502              MOVS     r5,#2
                  |L1.6722|
;;;3341   			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
001a42  1c78              ADDS     r0,r7,#1
001a44  b900              CBNZ     r0,|L1.6728|
001a46  2501              MOVS     r5,#1
                  |L1.6728|
;;;3342   			if (res == FR_OK)					/* Flush FAT */
001a48  b925              CBNZ     r5,|L1.6740|
;;;3343   				res = move_window(dj.fs, 0);
001a4a  2100              MOVS     r1,#0
001a4c  9804              LDR      r0,[sp,#0x10]
001a4e  f7fffffe          BL       move_window
001a52  4605              MOV      r5,r0
                  |L1.6740|
;;;3344   			if (res == FR_OK) {					/* Initialize the new directory table */
001a54  2d00              CMP      r5,#0
001a56  d15c              BNE      |L1.6930|
;;;3345   				dsc = clust2sect(dj.fs, dcl);
001a58  4639              MOV      r1,r7
001a5a  9804              LDR      r0,[sp,#0x10]
001a5c  f7fffffe          BL       clust2sect
001a60  4681              MOV      r9,r0
;;;3346   				dir = dj.fs->win;
001a62  9804              LDR      r0,[sp,#0x10]
001a64  f1000430          ADD      r4,r0,#0x30
;;;3347   				mem_set(dir, 0, SS(dj.fs));
001a68  f44f7200          MOV      r2,#0x200
001a6c  2100              MOVS     r1,#0
001a6e  4620              MOV      r0,r4
001a70  f7fffffe          BL       mem_set
;;;3348   				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
001a74  220b              MOVS     r2,#0xb
001a76  2120              MOVS     r1,#0x20
001a78  4620              MOV      r0,r4
001a7a  f7fffffe          BL       mem_set
;;;3349   				dir[DIR_Name] = '.';
001a7e  202e              MOVS     r0,#0x2e
001a80  7020              STRB     r0,[r4,#0]
;;;3350   				dir[DIR_Attr] = AM_DIR;
001a82  2010              MOVS     r0,#0x10
001a84  72e0              STRB     r0,[r4,#0xb]
;;;3351   				ST_DWORD(dir+DIR_WrtTime, tim);
001a86  75a6              STRB     r6,[r4,#0x16]
001a88  0a31              LSRS     r1,r6,#8
001a8a  75e1              STRB     r1,[r4,#0x17]
001a8c  0c31              LSRS     r1,r6,#16
001a8e  7621              STRB     r1,[r4,#0x18]
001a90  0e31              LSRS     r1,r6,#24
001a92  7661              STRB     r1,[r4,#0x19]
;;;3352   				st_clust(dir, dcl);
001a94  4639              MOV      r1,r7
001a96  4620              MOV      r0,r4
001a98  f7fffffe          BL       st_clust
;;;3353   				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
001a9c  2220              MOVS     r2,#0x20
001a9e  4621              MOV      r1,r4
001aa0  f1040020          ADD      r0,r4,#0x20
001aa4  f7fffffe          BL       mem_cpy
;;;3354   				dir[33] = '.'; pcl = dj.sclust;
001aa8  202e              MOVS     r0,#0x2e
001aaa  f8840021          STRB     r0,[r4,#0x21]
001aae  f8dda018          LDR      r10,[sp,#0x18]
;;;3355   				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
001ab2  9804              LDR      r0,[sp,#0x10]
001ab4  7800              LDRB     r0,[r0,#0]
001ab6  2803              CMP      r0,#3
001ab8  d104              BNE      |L1.6852|
001aba  9804              LDR      r0,[sp,#0x10]
001abc  6a40              LDR      r0,[r0,#0x24]
001abe  4550              CMP      r0,r10
001ac0  d100              BNE      |L1.6852|
;;;3356   					pcl = 0;
001ac2  46aa              MOV      r10,r5
                  |L1.6852|
;;;3357   				st_clust(dir+SZ_DIR, pcl);
001ac4  4651              MOV      r1,r10
001ac6  f1040020          ADD      r0,r4,#0x20
001aca  f7fffffe          BL       st_clust
;;;3358   				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
001ace  9804              LDR      r0,[sp,#0x10]
001ad0  f8908002          LDRB     r8,[r0,#2]
001ad4  e019              B        |L1.6922|
                  |L1.6870|
;;;3359   					dj.fs->winsect = dsc++;
001ad6  9804              LDR      r0,[sp,#0x10]
001ad8  f8c0902c          STR      r9,[r0,#0x2c]
001adc  f1090901          ADD      r9,r9,#1
;;;3360   					dj.fs->wflag = 1;
001ae0  2001              MOVS     r0,#1
001ae2  9904              LDR      r1,[sp,#0x10]
001ae4  7108              STRB     r0,[r1,#4]
;;;3361   					res = move_window(dj.fs, 0);
001ae6  2100              MOVS     r1,#0
001ae8  9804              LDR      r0,[sp,#0x10]
001aea  f7fffffe          BL       move_window
001aee  4605              MOV      r5,r0
;;;3362   					if (res != FR_OK) break;
001af0  b10d              CBZ      r5,|L1.6902|
001af2  e00d              B        |L1.6928|
                  |L1.6900|
001af4  e02d              B        |L1.6994|
                  |L1.6902|
;;;3363   					mem_set(dir, 0, SS(dj.fs));
001af6  f44f7200          MOV      r2,#0x200
001afa  2100              MOVS     r1,#0
001afc  4620              MOV      r0,r4
001afe  f7fffffe          BL       mem_set
001b02  f1a80001          SUB      r0,r8,#1              ;3358
001b06  f00008ff          AND      r8,r0,#0xff           ;3358
                  |L1.6922|
001b0a  f1b80f00          CMP      r8,#0                 ;3358
001b0e  d1e2              BNE      |L1.6870|
                  |L1.6928|
001b10  bf00              NOP                            ;3362
                  |L1.6930|
;;;3364   				}
;;;3365   			}
;;;3366   			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
001b12  b91d              CBNZ     r5,|L1.6940|
001b14  a804              ADD      r0,sp,#0x10
001b16  f7fffffe          BL       dir_register
001b1a  4605              MOV      r5,r0
                  |L1.6940|
;;;3367   			if (res != FR_OK) {
001b1c  b125              CBZ      r5,|L1.6952|
;;;3368   				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
001b1e  4639              MOV      r1,r7
001b20  9804              LDR      r0,[sp,#0x10]
001b22  f7fffffe          BL       remove_chain
001b26  e014              B        |L1.6994|
                  |L1.6952|
;;;3369   			} else {
;;;3370   				dir = dj.dir;
001b28  9c09              LDR      r4,[sp,#0x24]
;;;3371   				dir[DIR_Attr] = AM_DIR;				/* Attribute */
001b2a  2010              MOVS     r0,#0x10
001b2c  72e0              STRB     r0,[r4,#0xb]
;;;3372   				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
001b2e  75a6              STRB     r6,[r4,#0x16]
001b30  0a31              LSRS     r1,r6,#8
001b32  75e1              STRB     r1,[r4,#0x17]
001b34  0c31              LSRS     r1,r6,#16
001b36  7621              STRB     r1,[r4,#0x18]
001b38  0e31              LSRS     r1,r6,#24
001b3a  7661              STRB     r1,[r4,#0x19]
;;;3373   				st_clust(dir, dcl);					/* Table start cluster */
001b3c  4639              MOV      r1,r7
001b3e  4620              MOV      r0,r4
001b40  f7fffffe          BL       st_clust
;;;3374   				dj.fs->wflag = 1;
001b44  2001              MOVS     r0,#1
001b46  9904              LDR      r1,[sp,#0x10]
001b48  7108              STRB     r0,[r1,#4]
;;;3375   				res = sync(dj.fs);
001b4a  9804              LDR      r0,[sp,#0x10]
001b4c  f7fffffe          BL       sync
001b50  4605              MOV      r5,r0
                  |L1.6994|
;;;3376   			}
;;;3377   		}
;;;3378   		FREE_BUF();
;;;3379   	}
;;;3380   
;;;3381   	LEAVE_FF(dj.fs, res);
001b52  4628              MOV      r0,r5
;;;3382   }
001b54  b00c              ADD      sp,sp,#0x30
001b56  e8bd87f0          POP      {r4-r10,pc}
;;;3383   
                          ENDP

                  f_chmod PROC
;;;3390   
;;;3391   FRESULT f_chmod (
001b5a  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;3392   	const TCHAR *path,	/* Pointer to the file path */
;;;3393   	BYTE value,			/* Attribute bits */
;;;3394   	BYTE mask			/* Attribute mask to change */
;;;3395   )
;;;3396   {
001b5c  b08a              SUB      sp,sp,#0x28
001b5e  460f              MOV      r7,r1
001b60  4614              MOV      r4,r2
;;;3397   	FRESULT res;
;;;3398   	DIR dj;
;;;3399   	BYTE *dir;
;;;3400   	DEF_NAMEBUF;
;;;3401   
;;;3402   
;;;3403   	res = chk_mounted(&path, &dj.fs, 1);
001b62  2201              MOVS     r2,#1
001b64  a903              ADD      r1,sp,#0xc
001b66  a80a              ADD      r0,sp,#0x28
001b68  f7fffffe          BL       chk_mounted
001b6c  4606              MOV      r6,r0
;;;3404   	if (res == FR_OK) {
001b6e  b9de              CBNZ     r6,|L1.7080|
;;;3405   		INIT_BUF(dj);
001b70  f8cdd024          STR      sp,[sp,#0x24]
;;;3406   		res = follow_path(&dj, path);		/* Follow the file path */
001b74  a803              ADD      r0,sp,#0xc
001b76  990a              LDR      r1,[sp,#0x28]
001b78  f7fffffe          BL       follow_path
001b7c  4606              MOV      r6,r0
;;;3407   		FREE_BUF();
;;;3408   		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
001b7e  bf00              NOP      
;;;3409   			res = FR_INVALID_NAME;
;;;3410   		if (res == FR_OK) {
001b80  b996              CBNZ     r6,|L1.7080|
;;;3411   			dir = dj.dir;
001b82  9d08              LDR      r5,[sp,#0x20]
;;;3412   			if (!dir) {						/* Is it a root directory? */
001b84  b90d              CBNZ     r5,|L1.7050|
;;;3413   				res = FR_INVALID_NAME;
001b86  2606              MOVS     r6,#6
001b88  e00e              B        |L1.7080|
                  |L1.7050|
;;;3414   			} else {						/* File or sub directory */
;;;3415   				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
001b8a  f0040427          AND      r4,r4,#0x27
;;;3416   				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
001b8e  ea070004          AND      r0,r7,r4
001b92  7ae9              LDRB     r1,[r5,#0xb]
001b94  43a1              BICS     r1,r1,r4
001b96  4308              ORRS     r0,r0,r1
001b98  72e8              STRB     r0,[r5,#0xb]
;;;3417   				dj.fs->wflag = 1;
001b9a  2001              MOVS     r0,#1
001b9c  9903              LDR      r1,[sp,#0xc]
001b9e  7108              STRB     r0,[r1,#4]
;;;3418   				res = sync(dj.fs);
001ba0  9803              LDR      r0,[sp,#0xc]
001ba2  f7fffffe          BL       sync
001ba6  4606              MOV      r6,r0
                  |L1.7080|
;;;3419   			}
;;;3420   		}
;;;3421   	}
;;;3422   
;;;3423   	LEAVE_FF(dj.fs, res);
001ba8  4630              MOV      r0,r6
;;;3424   }
001baa  b00d              ADD      sp,sp,#0x34
001bac  bdf0              POP      {r4-r7,pc}
;;;3425   
                          ENDP

                  f_utime PROC
;;;3432   
;;;3433   FRESULT f_utime (
001bae  b573              PUSH     {r0,r1,r4-r6,lr}
;;;3434   	const TCHAR *path,	/* Pointer to the file/directory name */
;;;3435   	const FILINFO *fno	/* Pointer to the time stamp to be set */
;;;3436   )
;;;3437   {
001bb0  b08a              SUB      sp,sp,#0x28
001bb2  460d              MOV      r5,r1
;;;3438   	FRESULT res;
;;;3439   	DIR dj;
;;;3440   	BYTE *dir;
;;;3441   	DEF_NAMEBUF;
;;;3442   
;;;3443   
;;;3444   	res = chk_mounted(&path, &dj.fs, 1);
001bb4  2201              MOVS     r2,#1
001bb6  a903              ADD      r1,sp,#0xc
001bb8  a80a              ADD      r0,sp,#0x28
001bba  f7fffffe          BL       chk_mounted
001bbe  4606              MOV      r6,r0
;;;3445   	if (res == FR_OK) {
001bc0  b9ee              CBNZ     r6,|L1.7166|
;;;3446   		INIT_BUF(dj);
001bc2  f8cdd024          STR      sp,[sp,#0x24]
;;;3447   		res = follow_path(&dj, path);	/* Follow the file path */
001bc6  a803              ADD      r0,sp,#0xc
001bc8  990a              LDR      r1,[sp,#0x28]
001bca  f7fffffe          BL       follow_path
001bce  4606              MOV      r6,r0
;;;3448   		FREE_BUF();
;;;3449   		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
001bd0  bf00              NOP      
;;;3450   			res = FR_INVALID_NAME;
;;;3451   		if (res == FR_OK) {
001bd2  b9a6              CBNZ     r6,|L1.7166|
;;;3452   			dir = dj.dir;
001bd4  9c08              LDR      r4,[sp,#0x20]
;;;3453   			if (!dir) {					/* Root directory */
001bd6  b90c              CBNZ     r4,|L1.7132|
;;;3454   				res = FR_INVALID_NAME;
001bd8  2606              MOVS     r6,#6
001bda  e010              B        |L1.7166|
                  |L1.7132|
;;;3455   			} else {					/* File or sub-directory */
;;;3456   				ST_WORD(dir+DIR_WrtTime, fno->ftime);
001bdc  79a8              LDRB     r0,[r5,#6]
001bde  75a0              STRB     r0,[r4,#0x16]
001be0  88e8              LDRH     r0,[r5,#6]
001be2  1201              ASRS     r1,r0,#8
001be4  75e1              STRB     r1,[r4,#0x17]
;;;3457   				ST_WORD(dir+DIR_WrtDate, fno->fdate);
001be6  7928              LDRB     r0,[r5,#4]
001be8  7620              STRB     r0,[r4,#0x18]
001bea  88a8              LDRH     r0,[r5,#4]
001bec  1201              ASRS     r1,r0,#8
001bee  7661              STRB     r1,[r4,#0x19]
;;;3458   				dj.fs->wflag = 1;
001bf0  2001              MOVS     r0,#1
001bf2  9903              LDR      r1,[sp,#0xc]
001bf4  7108              STRB     r0,[r1,#4]
;;;3459   				res = sync(dj.fs);
001bf6  9803              LDR      r0,[sp,#0xc]
001bf8  f7fffffe          BL       sync
001bfc  4606              MOV      r6,r0
                  |L1.7166|
;;;3460   			}
;;;3461   		}
;;;3462   	}
;;;3463   
;;;3464   	LEAVE_FF(dj.fs, res);
001bfe  4630              MOV      r0,r6
;;;3465   }
001c00  b00c              ADD      sp,sp,#0x30
001c02  bd70              POP      {r4-r6,pc}
;;;3466   
                          ENDP

                  f_rename PROC
;;;3473   
;;;3474   FRESULT f_rename (
001c04  e92d41f3          PUSH     {r0,r1,r4-r8,lr}
;;;3475   	const TCHAR *path_old,	/* Pointer to the old name */
;;;3476   	const TCHAR *path_new	/* Pointer to the new name */
;;;3477   )
;;;3478   {
001c08  b098              SUB      sp,sp,#0x60
001c0a  460f              MOV      r7,r1
;;;3479   	FRESULT res;
;;;3480   	DIR djo, djn;
;;;3481   	BYTE buf[21], *dir;
;;;3482   	DWORD dw;
;;;3483   	DEF_NAMEBUF;
;;;3484   
;;;3485   
;;;3486   	res = chk_mounted(&path_old, &djo.fs, 1);
001c0c  2201              MOVS     r2,#1
001c0e  a911              ADD      r1,sp,#0x44
001c10  a818              ADD      r0,sp,#0x60
001c12  f7fffffe          BL       chk_mounted
001c16  4604              MOV      r4,r0
;;;3487   	if (res == FR_OK) {
001c18  2c00              CMP      r4,#0
001c1a  d179              BNE      |L1.7440|
;;;3488   		djn.fs = djo.fs;
001c1c  9811              LDR      r0,[sp,#0x44]
001c1e  900a              STR      r0,[sp,#0x28]
;;;3489   		INIT_BUF(djo);
001c20  a801              ADD      r0,sp,#4
001c22  9017              STR      r0,[sp,#0x5c]
;;;3490   		res = follow_path(&djo, path_old);		/* Check old object */
001c24  a811              ADD      r0,sp,#0x44
001c26  9918              LDR      r1,[sp,#0x60]
001c28  f7fffffe          BL       follow_path
001c2c  4604              MOV      r4,r0
;;;3491   		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
001c2e  bf00              NOP      
;;;3492   			res = FR_INVALID_NAME;
;;;3493   #if _FS_LOCK
;;;3494   		if (res == FR_OK) res = chk_lock(&djo, 2);
;;;3495   #endif
;;;3496   		if (res == FR_OK) {						/* Old object is found */
001c30  2c00              CMP      r4,#0
001c32  d16d              BNE      |L1.7440|
;;;3497   			if (!djo.dir) {						/* Is root dir? */
001c34  9816              LDR      r0,[sp,#0x58]
001c36  b908              CBNZ     r0,|L1.7228|
;;;3498   				res = FR_NO_FILE;
001c38  2404              MOVS     r4,#4
001c3a  e069              B        |L1.7440|
                  |L1.7228|
;;;3499   			} else {
;;;3500   				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
001c3c  9816              LDR      r0,[sp,#0x58]
001c3e  f100010b          ADD      r1,r0,#0xb
001c42  2215              MOVS     r2,#0x15
001c44  a804              ADD      r0,sp,#0x10
001c46  f7fffffe          BL       mem_cpy
;;;3501   				mem_cpy(&djn, &djo, sizeof (DIR));		/* Check new object */
001c4a  221c              MOVS     r2,#0x1c
001c4c  a911              ADD      r1,sp,#0x44
001c4e  a80a              ADD      r0,sp,#0x28
001c50  f7fffffe          BL       mem_cpy
;;;3502   				res = follow_path(&djn, path_new);
001c54  4639              MOV      r1,r7
001c56  a80a              ADD      r0,sp,#0x28
001c58  f7fffffe          BL       follow_path
001c5c  4604              MOV      r4,r0
;;;3503   				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
001c5e  b904              CBNZ     r4,|L1.7266|
001c60  2408              MOVS     r4,#8
                  |L1.7266|
;;;3504   				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
001c62  2c04              CMP      r4,#4
001c64  d154              BNE      |L1.7440|
;;;3505   /* Start critical section that an interruption or error can cause cross-link */
;;;3506   					res = dir_register(&djn);			/* Register the new entry */
001c66  a80a              ADD      r0,sp,#0x28
001c68  f7fffffe          BL       dir_register
001c6c  4604              MOV      r4,r0
;;;3507   					if (res == FR_OK) {
001c6e  2c00              CMP      r4,#0
001c70  d14e              BNE      |L1.7440|
;;;3508   						dir = djn.dir;					/* Copy object information except for name */
001c72  9d0f              LDR      r5,[sp,#0x3c]
;;;3509   						mem_cpy(dir+13, buf+2, 19);
001c74  2213              MOVS     r2,#0x13
001c76  f10d0112          ADD      r1,sp,#0x12
001c7a  f105000d          ADD      r0,r5,#0xd
001c7e  f7fffffe          BL       mem_cpy
;;;3510   						dir[DIR_Attr] = buf[0] | AM_ARC;
001c82  f89d0010          LDRB     r0,[sp,#0x10]
001c86  f0400020          ORR      r0,r0,#0x20
001c8a  72e8              STRB     r0,[r5,#0xb]
;;;3511   						djo.fs->wflag = 1;
001c8c  2001              MOVS     r0,#1
001c8e  9911              LDR      r1,[sp,#0x44]
001c90  7108              STRB     r0,[r1,#4]
;;;3512   						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
001c92  990c              LDR      r1,[sp,#0x30]
001c94  9813              LDR      r0,[sp,#0x4c]
001c96  4288              CMP      r0,r1
001c98  d030              BEQ      |L1.7420|
001c9a  7ae8              LDRB     r0,[r5,#0xb]
001c9c  f0000010          AND      r0,r0,#0x10
001ca0  b360              CBZ      r0,|L1.7420|
;;;3513   							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
001ca2  4629              MOV      r1,r5
001ca4  9811              LDR      r0,[sp,#0x44]
001ca6  f7fffffe          BL       ld_clust
001caa  4680              MOV      r8,r0
001cac  4641              MOV      r1,r8
001cae  9811              LDR      r0,[sp,#0x44]
001cb0  f7fffffe          BL       clust2sect
001cb4  4606              MOV      r6,r0
;;;3514   							if (!dw) {
001cb6  b90e              CBNZ     r6,|L1.7356|
;;;3515   								res = FR_INT_ERR;
001cb8  2402              MOVS     r4,#2
001cba  e01f              B        |L1.7420|
                  |L1.7356|
;;;3516   							} else {
;;;3517   								res = move_window(djo.fs, dw);
001cbc  4631              MOV      r1,r6
001cbe  9811              LDR      r0,[sp,#0x44]
001cc0  f7fffffe          BL       move_window
001cc4  4604              MOV      r4,r0
;;;3518   								dir = djo.fs->win+SZ_DIR;	/* .. entry */
001cc6  9811              LDR      r0,[sp,#0x44]
001cc8  f1000550          ADD      r5,r0,#0x50
;;;3519   								if (res == FR_OK && dir[1] == '.') {
001ccc  b9b4              CBNZ     r4,|L1.7420|
001cce  7868              LDRB     r0,[r5,#1]
001cd0  282e              CMP      r0,#0x2e
001cd2  d113              BNE      |L1.7420|
;;;3520   									dw = (djo.fs->fs_type == FS_FAT32 && djn.sclust == djo.fs->dirbase) ? 0 : djn.sclust;
001cd4  9811              LDR      r0,[sp,#0x44]
001cd6  7800              LDRB     r0,[r0,#0]
001cd8  2803              CMP      r0,#3
001cda  d106              BNE      |L1.7402|
001cdc  9911              LDR      r1,[sp,#0x44]
001cde  980c              LDR      r0,[sp,#0x30]
001ce0  6a49              LDR      r1,[r1,#0x24]
001ce2  4288              CMP      r0,r1
001ce4  d101              BNE      |L1.7402|
001ce6  2000              MOVS     r0,#0
001ce8  e000              B        |L1.7404|
                  |L1.7402|
001cea  980c              LDR      r0,[sp,#0x30]
                  |L1.7404|
001cec  4606              MOV      r6,r0
;;;3521   									st_clust(dir, dw);
001cee  4631              MOV      r1,r6
001cf0  4628              MOV      r0,r5
001cf2  f7fffffe          BL       st_clust
;;;3522   									djo.fs->wflag = 1;
001cf6  2001              MOVS     r0,#1
001cf8  9911              LDR      r1,[sp,#0x44]
001cfa  7108              STRB     r0,[r1,#4]
                  |L1.7420|
;;;3523   								}
;;;3524   							}
;;;3525   						}
;;;3526   						if (res == FR_OK) {
001cfc  b944              CBNZ     r4,|L1.7440|
;;;3527   							res = dir_remove(&djo);		/* Remove old entry */
001cfe  a811              ADD      r0,sp,#0x44
001d00  f7fffffe          BL       dir_remove
001d04  4604              MOV      r4,r0
;;;3528   							if (res == FR_OK)
001d06  b91c              CBNZ     r4,|L1.7440|
;;;3529   								res = sync(djo.fs);
001d08  9811              LDR      r0,[sp,#0x44]
001d0a  f7fffffe          BL       sync
001d0e  4604              MOV      r4,r0
                  |L1.7440|
;;;3530   						}
;;;3531   					}
;;;3532   /* End critical section */
;;;3533   				}
;;;3534   			}
;;;3535   		}
;;;3536   		FREE_BUF();
;;;3537   	}
;;;3538   	LEAVE_FF(djo.fs, res);
001d10  4620              MOV      r0,r4
;;;3539   }
001d12  b01a              ADD      sp,sp,#0x68
001d14  e8bd81f0          POP      {r4-r8,pc}
;;;3540   
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  FatFs
                          DCD      0x00000000
                  Fsid
000004  0000              DCB      0x00,0x00
