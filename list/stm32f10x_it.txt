; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\stm32f10x_it.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\stm32f10x_it.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -IF:\excitationPulse\Ver_F8_·­Ò³\RTE -ID:\Keil_v5\MDK\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\Keil_v5\MDK\ARM\CMSIS\Include -D__UVISION_VERSION=515 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\stm32f10x_it.crf user\stm32f10x_it.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  NMIException PROC
;;;32     *******************************************************************************/
;;;33     void NMIException(void)
000000  4770              BX       lr
;;;34     {
;;;35      
;;;36     }
;;;37     
                          ENDP

                  HardFaultException PROC
;;;44     *******************************************************************************/
;;;45     void HardFaultException(void)
000002  bf00              NOP      
                  |L1.4|
;;;46     {
;;;47       /* Go to infinite loop when Hard Fault exception occurs */
;;;48       while (1)
000004  e7fe              B        |L1.4|
;;;49       {
;;;50       }
;;;51     }
;;;52     
                          ENDP

                  MemManageException PROC
;;;59     *******************************************************************************/
;;;60     void MemManageException(void)
000006  bf00              NOP      
                  |L1.8|
;;;61     {
;;;62       /* Go to infinite loop when Memory Manage exception occurs */
;;;63       while (1)
000008  e7fe              B        |L1.8|
;;;64       {
;;;65       }
;;;66     }
;;;67     
                          ENDP

                  BusFaultException PROC
;;;74     *******************************************************************************/
;;;75     void BusFaultException(void)
00000a  bf00              NOP      
                  |L1.12|
;;;76     {
;;;77       /* Go to infinite loop when Bus Fault exception occurs */
;;;78       while (1)
00000c  e7fe              B        |L1.12|
;;;79       {
;;;80       }
;;;81     }
;;;82     
                          ENDP

                  UsageFaultException PROC
;;;89     *******************************************************************************/
;;;90     void UsageFaultException(void)
00000e  bf00              NOP      
                  |L1.16|
;;;91     {
;;;92       /* Go to infinite loop when Usage Fault exception occurs */
;;;93       while (1)
000010  e7fe              B        |L1.16|
;;;94       {
;;;95       }
;;;96     }
;;;97     
                          ENDP

                  DebugMonitor PROC
;;;104    *******************************************************************************/
;;;105    void DebugMonitor(void)
000012  4770              BX       lr
;;;106    {
;;;107    }
;;;108    
                          ENDP

                  SVCHandler PROC
;;;115    *******************************************************************************/
;;;116    void SVCHandler(void)
000014  4770              BX       lr
;;;117    {
;;;118    }
;;;119    
                          ENDP

                  PendSVC PROC
;;;126    *******************************************************************************/
;;;127    void PendSVC(void)
000016  4770              BX       lr
;;;128    {
;;;129    }
;;;130    
                          ENDP

                  SysTickHandler PROC
;;;137    *******************************************************************************/
;;;138    void SysTickHandler(void)
000018  4770              BX       lr
;;;139    {
;;;140       
;;;141         
;;;142    }
;;;143    
                          ENDP

                  WWDG_IRQHandler PROC
;;;151    *******************************************************************************/
;;;152    void WWDG_IRQHandler(void)
00001a  4770              BX       lr
;;;153    {
;;;154    }
;;;155    
                          ENDP

                  PVD_IRQHandler PROC
;;;162    *******************************************************************************/
;;;163    void PVD_IRQHandler(void)
00001c  4770              BX       lr
;;;164    {
;;;165    }
;;;166    
                          ENDP

                  TAMPER_IRQHandler PROC
;;;173    *******************************************************************************/
;;;174    void TAMPER_IRQHandler(void)
00001e  4770              BX       lr
;;;175    {
;;;176    }
;;;177    
                          ENDP

                  FLASH_IRQHandler PROC
;;;186    *******************************************************************************/
;;;187    void FLASH_IRQHandler(void)
000020  4770              BX       lr
;;;188    {
;;;189    }
;;;190    
                          ENDP

                  RCC_IRQHandler PROC
;;;197    *******************************************************************************/
;;;198    void RCC_IRQHandler(void)
000022  4770              BX       lr
;;;199    {
;;;200    }
;;;201    
                          ENDP

                  EXTI0_IRQHandler PROC
;;;208    *******************************************************************************/
;;;209    void EXTI0_IRQHandler(void)
000024  4770              BX       lr
;;;210    {
;;;211    }
;;;212    
                          ENDP

                  EXTI1_IRQHandler PROC
;;;219    *******************************************************************************/
;;;220    void EXTI1_IRQHandler(void)
000026  4770              BX       lr
;;;221    {
;;;222    }
;;;223    
                          ENDP

                  EXTI2_IRQHandler PROC
;;;232    ////////////////¼üÅÌÐÐÏß2ÖÐ¶Ï
;;;233    void EXTI2_IRQHandler(void)
000028  4770              BX       lr
;;;234    {
;;;235     
;;;236    }
;;;237    /*******************************************************************************
                          ENDP

                  EXTI3_IRQHandler PROC
;;;243    *******************************************************************************/
;;;244    void EXTI3_IRQHandler(void)
00002a  4770              BX       lr
;;;245    {  
;;;246    }
;;;247    
                          ENDP

                  EXTI4_IRQHandler PROC
;;;254    *******************************************************************************/
;;;255    void EXTI4_IRQHandler(void)
00002c  4770              BX       lr
;;;256    {  
;;;257    }
;;;258    
                          ENDP

                  DMAChannel1_IRQHandler PROC
;;;265    *******************************************************************************/
;;;266    void DMAChannel1_IRQHandler(void)
00002e  4770              BX       lr
;;;267    {
;;;268    }
;;;269    
                          ENDP

                  DMAChannel2_IRQHandler PROC
;;;276    *******************************************************************************/
;;;277    void DMAChannel2_IRQHandler(void)
000030  4770              BX       lr
;;;278    {
;;;279    }
;;;280    
                          ENDP

                  DMAChannel3_IRQHandler PROC
;;;287    *******************************************************************************/
;;;288    void DMAChannel3_IRQHandler(void)
000032  4770              BX       lr
;;;289    {
;;;290    }
;;;291    
                          ENDP

                  DMAChannel4_IRQHandler PROC
;;;298    *******************************************************************************/
;;;299    void DMAChannel4_IRQHandler(void)
000034  4770              BX       lr
;;;300    {
;;;301    }
;;;302    
                          ENDP

                  DMAChannel5_IRQHandler PROC
;;;309    *******************************************************************************/
;;;310    void DMAChannel5_IRQHandler(void)
000036  4770              BX       lr
;;;311    {
;;;312    }
;;;313    
                          ENDP

                  DMAChannel6_IRQHandler PROC
;;;320    *******************************************************************************/
;;;321    void DMAChannel6_IRQHandler(void)
000038  4770              BX       lr
;;;322    {
;;;323    }
;;;324    
                          ENDP

                  DMAChannel7_IRQHandler PROC
;;;331    *******************************************************************************/
;;;332    void DMAChannel7_IRQHandler(void)
00003a  4770              BX       lr
;;;333    {
;;;334    }
;;;335    
                          ENDP

                  ADC_IRQHandler PROC
;;;342    *******************************************************************************/
;;;343    void ADC_IRQHandler(void)
00003c  4770              BX       lr
;;;344    {
;;;345    }
;;;346    
                          ENDP

                  USB_HP_CAN_TX_IRQHandler PROC
;;;354    *******************************************************************************/
;;;355    void USB_HP_CAN_TX_IRQHandler(void)
00003e  4770              BX       lr
;;;356    {
;;;357     
;;;358    }
;;;359    
                          ENDP

                  USB_LP_CAN_RX0_IRQHandler PROC
;;;367    *******************************************************************************/
;;;368    void USB_LP_CAN_RX0_IRQHandler(void)
000040  4770              BX       lr
;;;369    {
;;;370     
;;;371    }
;;;372    
                          ENDP

                  CAN_RX1_IRQHandler PROC
;;;379    *******************************************************************************/
;;;380    void CAN_RX1_IRQHandler(void)
000042  4770              BX       lr
;;;381    {
;;;382    }
;;;383    
                          ENDP

                  CAN_SCE_IRQHandler PROC
;;;390    *******************************************************************************/
;;;391    void CAN_SCE_IRQHandler(void)
000044  4770              BX       lr
;;;392    {
;;;393    }
;;;394    
                          ENDP

                  EXTI9_5_IRQHandler PROC
;;;401    *******************************************************************************/
;;;402    void EXTI9_5_IRQHandler(void)
000046  4770              BX       lr
;;;403    { 
;;;404    }
;;;405    
                          ENDP

                  TIM1_BRK_IRQHandler PROC
;;;412    *******************************************************************************/
;;;413    void TIM1_BRK_IRQHandler(void)
000048  4770              BX       lr
;;;414    {
;;;415    }
;;;416    
                          ENDP

                  TIM1_UP_IRQHandler PROC
;;;424    *******************************************************************************/
;;;425    void TIM1_UP_IRQHandler(void)
00004a  4770              BX       lr
;;;426    {
;;;427      /* Clear the TIM1 Update pending bit */
;;;428     
;;;429    
;;;430    }
;;;431    
                          ENDP

                  TIM1_TRG_COM_IRQHandler PROC
;;;439    *******************************************************************************/
;;;440    void TIM1_TRG_COM_IRQHandler(void)
00004c  4770              BX       lr
;;;441    {
;;;442    }
;;;443    
                          ENDP

                  TIM1_CC_IRQHandler PROC
;;;450    *******************************************************************************/
;;;451    void TIM1_CC_IRQHandler(void)
00004e  4770              BX       lr
;;;452    {
;;;453    }
;;;454    
                          ENDP

                  TIM2_IRQHandler PROC
;;;461    *******************************************************************************/
;;;462    void TIM2_IRQHandler(void)
000050  b510              PUSH     {r4,lr}
;;;463    {  
;;;464    	static int i1 = 0;    //½øÈëÖÐ¶Ï´ÎÊý
;;;465    	static int j1 = 1;    //µçÆ½·´×ª´ÎÊý
;;;466    	static int i2 = 0;    //½øÈëÖÐ¶Ï´ÎÊý
;;;467    	static int j2 = 1;    //µçÆ½·´×ª´ÎÊý
;;;468    	static int i3 = 0;    //½øÈëÖÐ¶Ï´ÎÊý
;;;469    	static int j3 = 1;    //µçÆ½·´×ª´ÎÊý
;;;470    	static int i4 = 0;    //½øÈëÖÐ¶Ï´ÎÊý
;;;471    	static int j4 = 1;    //µçÆ½·´×ª´ÎÊý
;;;472    	
;;;473    	if (TIM_GetITStatus(TIM2, TIM_IT_CC2) != RESET)	    //ÅÐ¶Ï×´Ì¬¼Ä´æÆ÷ TIM3_SR[2] ÊÇ·ñ·¢ÉúÁË²¶»ñ/±È½Ï2 ÖÐ¶Ï
000052  2104              MOVS     r1,#4
000054  0708              LSLS     r0,r1,#28
000056  f7fffffe          BL       TIM_GetITStatus
00005a  b198              CBZ      r0,|L1.132|
;;;474    	{
;;;475    		TIM_ClearITPendingBit(TIM2, TIM_IT_CC2);			//Èí¼þÇå³ý×´Ì¬¼Ä´æÆ÷ TIM3_SR[2] ²¶»ñ/±È½Ï2 ÖÐ¶ÏÖÐ¶Ï±êÖ¾
00005c  2104              MOVS     r1,#4
00005e  0708              LSLS     r0,r1,#28
000060  f7fffffe          BL       TIM_ClearITPendingBit
;;;476    
;;;477    		capture2 = TIM_GetCapture2(TIM2);					//»ñÈ¡TIM3_CCR2µÄÔ¤×°Öµ
000064  f04f4080          MOV      r0,#0x40000000
000068  f7fffffe          BL       TIM_GetCapture2
00006c  49fe              LDR      r1,|L1.1128|
00006e  6008              STR      r0,[r1,#0]  ; capture2
;;;478    		TIM_SetCompare2(TIM2, capture2+ CCR2_Val);			//ºÍCCR2_ValÀÛ¼Óºó×°ÈëTIM3_CCR2	 ÕâÊÇÎªÁËÅäºÏ¼ÆÊýÆ÷ÖµµÄµÝÔö¡£ÒÔÔÚÏÂÒ»´Î×÷³ö±È½Ï¡£
000070  4608              MOV      r0,r1
000072  8800              LDRH     r0,[r0,#0]  ; capture2
000074  4afd              LDR      r2,|L1.1132|
000076  8812              LDRH     r2,[r2,#0]  ; CCR2_Val
000078  4410              ADD      r0,r0,r2
00007a  b281              UXTH     r1,r0
00007c  f04f4080          MOV      r0,#0x40000000
000080  f7fffffe          BL       TIM_SetCompare2
                  |L1.132|
;;;479    	}
;;;480    	
;;;481    	TimCount++;             //µ¹¼ÆÊ±¼ÆÊ±
000084  48fa              LDR      r0,|L1.1136|
000086  6800              LDR      r0,[r0,#0]  ; TimCount
000088  1c40              ADDS     r0,r0,#1
00008a  49f9              LDR      r1,|L1.1136|
00008c  6008              STR      r0,[r1,#0]  ; TimCount
;;;482    	
;;;483    	i1++;
00008e  48f9              LDR      r0,|L1.1140|
000090  6800              LDR      r0,[r0,#0]  ; i1
000092  1c40              ADDS     r0,r0,#1
000094  49f7              LDR      r1,|L1.1140|
000096  6008              STR      r0,[r1,#0]  ; i1
;;;484    	i2++;
000098  48f7              LDR      r0,|L1.1144|
00009a  6800              LDR      r0,[r0,#0]  ; i2
00009c  1c40              ADDS     r0,r0,#1
00009e  49f6              LDR      r1,|L1.1144|
0000a0  6008              STR      r0,[r1,#0]  ; i2
;;;485    	i3++;
0000a2  48f6              LDR      r0,|L1.1148|
0000a4  6800              LDR      r0,[r0,#0]  ; i3
0000a6  1c40              ADDS     r0,r0,#1
0000a8  49f4              LDR      r1,|L1.1148|
0000aa  6008              STR      r0,[r1,#0]  ; i3
;;;486    	i4++;
0000ac  48f4              LDR      r0,|L1.1152|
0000ae  6800              LDR      r0,[r0,#0]  ; i4
0000b0  1c40              ADDS     r0,r0,#1
0000b2  49f3              LDR      r1,|L1.1152|
0000b4  6008              STR      r0,[r1,#0]  ; i4
;;;487    
;;;488    	if(i1<(int)(100/Frequency[0]))  //
0000b6  48f3              LDR      r0,|L1.1156|
0000b8  6800              LDR      r0,[r0,#0]  ; Frequency
0000ba  2164              MOVS     r1,#0x64
0000bc  fb91f0f0          SDIV     r0,r1,r0
0000c0  49ec              LDR      r1,|L1.1140|
0000c2  6809              LDR      r1,[r1,#0]  ; i1
0000c4  4288              CMP      r0,r1
0000c6  dd1d              BLE      |L1.260|
;;;489    	{
;;;490    		j1++;
0000c8  48ef              LDR      r0,|L1.1160|
0000ca  6800              LDR      r0,[r0,#0]  ; j1
0000cc  1c40              ADDS     r0,r0,#1
0000ce  49ee              LDR      r1,|L1.1160|
0000d0  6008              STR      r0,[r1,#0]  ; j1
;;;491    		if(j1<(2*Num_Pulse[0] + 2))   //µ±Ê±¼ä³¬¹ýÂö³å¸öÊýËùÕ¼µÄÊ±¼äÊ±²»ÔÙ½øÐÐµçÆ½·­×ª
0000d2  48ee              LDR      r0,|L1.1164|
0000d4  6800              LDR      r0,[r0,#0]  ; Num_Pulse
0000d6  0040              LSLS     r0,r0,#1
0000d8  1c80              ADDS     r0,r0,#2
0000da  6809              LDR      r1,[r1,#0]  ; j1
0000dc  4288              CMP      r0,r1
0000de  dd17              BLE      |L1.272|
;;;492    		{
;;;493    			if(j1%2 == 0)
0000e0  49e9              LDR      r1,|L1.1160|
0000e2  6808              LDR      r0,[r1,#0]  ; j1
0000e4  eb0071d0          ADD      r1,r0,r0,LSR #31
0000e8  1049              ASRS     r1,r1,#1
0000ea  eba00141          SUB      r1,r0,r1,LSL #1
0000ee  b921              CBNZ     r1,|L1.250|
;;;494    			{
;;;495    				ChannelOneSet;
0000f0  2180              MOVS     r1,#0x80
0000f2  48e7              LDR      r0,|L1.1168|
0000f4  f7fffffe          BL       GPIO_SetBits
0000f8  e00a              B        |L1.272|
                  |L1.250|
;;;496    			}
;;;497    			else
;;;498    			{
;;;499    				ChannelOneReset;
0000fa  2180              MOVS     r1,#0x80
0000fc  48e4              LDR      r0,|L1.1168|
0000fe  f7fffffe          BL       GPIO_ResetBits
000102  e005              B        |L1.272|
                  |L1.260|
;;;500    			}
;;;501    		}
;;;502    	}
;;;503    	else
;;;504    	{
;;;505    		i1 = 0;
000104  2000              MOVS     r0,#0
000106  49db              LDR      r1,|L1.1140|
000108  6008              STR      r0,[r1,#0]  ; i1
;;;506    		j1 = 1;
00010a  2001              MOVS     r0,#1
00010c  49de              LDR      r1,|L1.1160|
00010e  6008              STR      r0,[r1,#0]  ; j1
                  |L1.272|
;;;507    	}
;;;508    	
;;;509    	if(i2<(int)(100/Frequency[1]))
000110  48dc              LDR      r0,|L1.1156|
000112  6840              LDR      r0,[r0,#4]  ; Frequency
000114  2164              MOVS     r1,#0x64
000116  fb91f0f0          SDIV     r0,r1,r0
00011a  49d7              LDR      r1,|L1.1144|
00011c  6809              LDR      r1,[r1,#0]  ; i2
00011e  4288              CMP      r0,r1
000120  dd1d              BLE      |L1.350|
;;;510    	{
;;;511    		j2++;
000122  48dc              LDR      r0,|L1.1172|
000124  6800              LDR      r0,[r0,#0]  ; j2
000126  1c40              ADDS     r0,r0,#1
000128  49da              LDR      r1,|L1.1172|
00012a  6008              STR      r0,[r1,#0]  ; j2
;;;512    		if(j2<(2*Num_Pulse[1] + 2))
00012c  48d7              LDR      r0,|L1.1164|
00012e  6840              LDR      r0,[r0,#4]  ; Num_Pulse
000130  0040              LSLS     r0,r0,#1
000132  1c80              ADDS     r0,r0,#2
000134  6809              LDR      r1,[r1,#0]  ; j2
000136  4288              CMP      r0,r1
000138  dd17              BLE      |L1.362|
;;;513    		{
;;;514    			if(j2%2 == 0)
00013a  49d6              LDR      r1,|L1.1172|
00013c  6808              LDR      r0,[r1,#0]  ; j2
00013e  eb0071d0          ADD      r1,r0,r0,LSR #31
000142  1049              ASRS     r1,r1,#1
000144  eba00141          SUB      r1,r0,r1,LSL #1
000148  b921              CBNZ     r1,|L1.340|
;;;515    			{
;;;516    				ChannelTwoSet;
00014a  2140              MOVS     r1,#0x40
00014c  48d0              LDR      r0,|L1.1168|
00014e  f7fffffe          BL       GPIO_SetBits
000152  e00a              B        |L1.362|
                  |L1.340|
;;;517    			}
;;;518    			else
;;;519    			{
;;;520    				ChannelTwoReset;
000154  2140              MOVS     r1,#0x40
000156  48ce              LDR      r0,|L1.1168|
000158  f7fffffe          BL       GPIO_ResetBits
00015c  e005              B        |L1.362|
                  |L1.350|
;;;521    			}
;;;522    		}
;;;523    	}
;;;524    	else
;;;525    	{
;;;526    		i2 = 0;
00015e  2000              MOVS     r0,#0
000160  49c5              LDR      r1,|L1.1144|
000162  6008              STR      r0,[r1,#0]  ; i2
;;;527    		j2 = 1;
000164  2001              MOVS     r0,#1
000166  49cb              LDR      r1,|L1.1172|
000168  6008              STR      r0,[r1,#0]  ; j2
                  |L1.362|
;;;528    	}
;;;529    	
;;;530    	if(i3<(int)(100/Frequency[2]))
00016a  48c6              LDR      r0,|L1.1156|
00016c  6880              LDR      r0,[r0,#8]  ; Frequency
00016e  2164              MOVS     r1,#0x64
000170  fb91f0f0          SDIV     r0,r1,r0
000174  49c1              LDR      r1,|L1.1148|
000176  6809              LDR      r1,[r1,#0]  ; i3
000178  4288              CMP      r0,r1
00017a  dd1d              BLE      |L1.440|
;;;531    	{
;;;532    		j3++;
00017c  48c6              LDR      r0,|L1.1176|
00017e  6800              LDR      r0,[r0,#0]  ; j3
000180  1c40              ADDS     r0,r0,#1
000182  49c5              LDR      r1,|L1.1176|
000184  6008              STR      r0,[r1,#0]  ; j3
;;;533    		if(j3<(2*Num_Pulse[2] + 2))
000186  48c1              LDR      r0,|L1.1164|
000188  6880              LDR      r0,[r0,#8]  ; Num_Pulse
00018a  0040              LSLS     r0,r0,#1
00018c  1c80              ADDS     r0,r0,#2
00018e  6809              LDR      r1,[r1,#0]  ; j3
000190  4288              CMP      r0,r1
000192  dd17              BLE      |L1.452|
;;;534    		{
;;;535    			if(j3%2 == 0)
000194  49c0              LDR      r1,|L1.1176|
000196  6808              LDR      r0,[r1,#0]  ; j3
000198  eb0071d0          ADD      r1,r0,r0,LSR #31
00019c  1049              ASRS     r1,r1,#1
00019e  eba00141          SUB      r1,r0,r1,LSL #1
0001a2  b921              CBNZ     r1,|L1.430|
;;;536    			{
;;;537    				ChannelThreeSet;
0001a4  2120              MOVS     r1,#0x20
0001a6  48ba              LDR      r0,|L1.1168|
0001a8  f7fffffe          BL       GPIO_SetBits
0001ac  e00a              B        |L1.452|
                  |L1.430|
;;;538    			}
;;;539    			else
;;;540    			{
;;;541    				ChannelThreeReset;
0001ae  2120              MOVS     r1,#0x20
0001b0  48b7              LDR      r0,|L1.1168|
0001b2  f7fffffe          BL       GPIO_ResetBits
0001b6  e005              B        |L1.452|
                  |L1.440|
;;;542    			}
;;;543    		}
;;;544    	}
;;;545    	else
;;;546    	{
;;;547    		i3 = 0;
0001b8  2000              MOVS     r0,#0
0001ba  49b0              LDR      r1,|L1.1148|
0001bc  6008              STR      r0,[r1,#0]  ; i3
;;;548    		j3 = 1;
0001be  2001              MOVS     r0,#1
0001c0  49b5              LDR      r1,|L1.1176|
0001c2  6008              STR      r0,[r1,#0]  ; j3
                  |L1.452|
;;;549    	}
;;;550    	
;;;551    	if(i4<(int)(100/Frequency[3]))
0001c4  48af              LDR      r0,|L1.1156|
0001c6  68c0              LDR      r0,[r0,#0xc]  ; Frequency
0001c8  2164              MOVS     r1,#0x64
0001ca  fb91f0f0          SDIV     r0,r1,r0
0001ce  49ac              LDR      r1,|L1.1152|
0001d0  6809              LDR      r1,[r1,#0]  ; i4
0001d2  4288              CMP      r0,r1
0001d4  dd1d              BLE      |L1.530|
;;;552    	{
;;;553    		j4++;
0001d6  48b1              LDR      r0,|L1.1180|
0001d8  6800              LDR      r0,[r0,#0]  ; j4
0001da  1c40              ADDS     r0,r0,#1
0001dc  49af              LDR      r1,|L1.1180|
0001de  6008              STR      r0,[r1,#0]  ; j4
;;;554    		if(j4<(2*Num_Pulse[3] + 2))
0001e0  48aa              LDR      r0,|L1.1164|
0001e2  68c0              LDR      r0,[r0,#0xc]  ; Num_Pulse
0001e4  0040              LSLS     r0,r0,#1
0001e6  1c80              ADDS     r0,r0,#2
0001e8  6809              LDR      r1,[r1,#0]  ; j4
0001ea  4288              CMP      r0,r1
0001ec  dd17              BLE      |L1.542|
;;;555    		{
;;;556    			if(j4%2 == 0)
0001ee  49ab              LDR      r1,|L1.1180|
0001f0  6808              LDR      r0,[r1,#0]  ; j4
0001f2  eb0071d0          ADD      r1,r0,r0,LSR #31
0001f6  1049              ASRS     r1,r1,#1
0001f8  eba00141          SUB      r1,r0,r1,LSL #1
0001fc  b921              CBNZ     r1,|L1.520|
;;;557    			{
;;;558    				ChannelFourSet;
0001fe  2110              MOVS     r1,#0x10
000200  48a3              LDR      r0,|L1.1168|
000202  f7fffffe          BL       GPIO_SetBits
000206  e00a              B        |L1.542|
                  |L1.520|
;;;559    			}
;;;560    			else
;;;561    			{
;;;562    				ChannelFourReset;
000208  2110              MOVS     r1,#0x10
00020a  48a1              LDR      r0,|L1.1168|
00020c  f7fffffe          BL       GPIO_ResetBits
000210  e005              B        |L1.542|
                  |L1.530|
;;;563    			}
;;;564    		}
;;;565    	}
;;;566    	else
;;;567    	{
;;;568    		i4 = 0;
000212  2000              MOVS     r0,#0
000214  499a              LDR      r1,|L1.1152|
000216  6008              STR      r0,[r1,#0]  ; i4
;;;569    		j4 = 1;
000218  2001              MOVS     r0,#1
00021a  49a0              LDR      r1,|L1.1180|
00021c  6008              STR      r0,[r1,#0]  ; j4
                  |L1.542|
;;;570    	}
;;;571    }
00021e  bd10              POP      {r4,pc}
;;;572    
                          ENDP

                  TIM3_IRQHandler PROC
;;;579    *******************************************************************************/
;;;580    void TIM3_IRQHandler(void)
000220  b508              PUSH     {r3,lr}
;;;581    { 
;;;582    	/*
;;;583    	static int i5 = 0;    //½øÈëÖÐ¶Ï´ÎÊý
;;;584    	static int j5 = 1;    //µçÆ½·´×ª´ÎÊý
;;;585    	static int i6 = 0;    //½øÈëÖÐ¶Ï´ÎÊý
;;;586    	static int j6 = 1;    //µçÆ½·´×ª´ÎÊý
;;;587    	static int i7 = 0;    //½øÈëÖÐ¶Ï´ÎÊý
;;;588    	static int j7 = 1;    //µçÆ½·´×ª´ÎÊý
;;;589    	static int i8 = 0;    //½øÈëÖÐ¶Ï´ÎÊý
;;;590    	static int j8 = 1;    //µçÆ½·´×ª´ÎÊý
;;;591    	*/
;;;592    	
;;;593    	static int TimCount_AD = 0;
;;;594    	
;;;595    	if (TIM_GetITStatus(TIM3, TIM_IT_CC3) != RESET)	    //ÅÐ¶Ï×´Ì¬¼Ä´æÆ÷ TIM3_SR[2] ÊÇ·ñ·¢ÉúÁË²¶»ñ/±È½Ï2 ÖÐ¶Ï
000222  2108              MOVS     r1,#8
000224  489e              LDR      r0,|L1.1184|
000226  f7fffffe          BL       TIM_GetITStatus
00022a  b180              CBZ      r0,|L1.590|
;;;596    	{
;;;597    		TIM_ClearITPendingBit(TIM3, TIM_IT_CC3);			//Èí¼þÇå³ý×´Ì¬¼Ä´æÆ÷ TIM3_SR[2] ²¶»ñ/±È½Ï2 ÖÐ¶ÏÖÐ¶Ï±êÖ¾
00022c  2108              MOVS     r1,#8
00022e  489c              LDR      r0,|L1.1184|
000230  f7fffffe          BL       TIM_ClearITPendingBit
;;;598    
;;;599    		capture3 = TIM_GetCapture3(TIM3);					//»ñÈ¡TIM3_CCR2µÄÔ¤×°Öµ
000234  489a              LDR      r0,|L1.1184|
000236  f7fffffe          BL       TIM_GetCapture3
00023a  499a              LDR      r1,|L1.1188|
00023c  6008              STR      r0,[r1,#0]  ; capture3
;;;600    		TIM_SetCompare3(TIM3, capture3+ 1125);			//ºÍCCR2_ValÀÛ¼Óºó×°ÈëTIM3_CCR2	 ÕâÊÇÎªÁËÅäºÏ¼ÆÊýÆ÷ÖµµÄµÝÔö¡£ÒÔÔÚÏÂÒ»´Î×÷³ö±È½Ï¡£
00023e  4608              MOV      r0,r1
000240  8800              LDRH     r0,[r0,#0]  ; capture3
000242  f2004065          ADD      r0,r0,#0x465
000246  b281              UXTH     r1,r0
000248  4895              LDR      r0,|L1.1184|
00024a  f7fffffe          BL       TIM_SetCompare3
                  |L1.590|
;;;601    
;;;602    	}
;;;603    
;;;604    	TimCount_AD++;
00024e  4896              LDR      r0,|L1.1192|
000250  6800              LDR      r0,[r0,#0]  ; TimCount_AD
000252  1c40              ADDS     r0,r0,#1
000254  4994              LDR      r1,|L1.1192|
000256  6008              STR      r0,[r1,#0]  ; TimCount_AD
;;;605    	if(TimCount_AD > 100)
000258  4608              MOV      r0,r1
00025a  6800              LDR      r0,[r0,#0]  ; TimCount_AD
00025c  2864              CMP      r0,#0x64
00025e  dd38              BLE      |L1.722|
;;;606    	{
;;;607    		TimCount_AD = 0;
000260  2000              MOVS     r0,#0
000262  6008              STR      r0,[r1,#0]  ; TimCount_AD
;;;608    		POINT_COLOR=0;
000264  4991              LDR      r1,|L1.1196|
000266  8008              STRH     r0,[r1,#0]
;;;609    
;;;610    		if(ADC_ConvertedValue >= 3010)
000268  4891              LDR      r0,|L1.1200|
00026a  8800              LDRH     r0,[r0,#0]  ; ADC_ConvertedValue
00026c  f64031c2          MOV      r1,#0xbc2
000270  4288              CMP      r0,r1
000272  db2f              BLT      |L1.724|
;;;611    		{
;;;612    			FillColor(441,12,463,20,0xffff);
000274  f64f70ff          MOV      r0,#0xffff
000278  2314              MOVS     r3,#0x14
00027a  f24012cf          MOV      r2,#0x1cf
00027e  210c              MOVS     r1,#0xc
000280  9000              STR      r0,[sp,#0]
000282  f24010b9          MOV      r0,#0x1b9
000286  f7fffffe          BL       FillColor
;;;613    			FillColor(459,12,463,20,0x001f);
00028a  201f              MOVS     r0,#0x1f
00028c  2314              MOVS     r3,#0x14
00028e  f24012cf          MOV      r2,#0x1cf
000292  210c              MOVS     r1,#0xc
000294  9000              STR      r0,[sp,#0]
000296  1f10              SUBS     r0,r2,#4
000298  f7fffffe          BL       FillColor
;;;614    			FillColor(453,12,457,20,0x001f);
00029c  201f              MOVS     r0,#0x1f
00029e  2314              MOVS     r3,#0x14
0002a0  f24012c9          MOV      r2,#0x1c9
0002a4  210c              MOVS     r1,#0xc
0002a6  9000              STR      r0,[sp,#0]
0002a8  1f10              SUBS     r0,r2,#4
0002aa  f7fffffe          BL       FillColor
;;;615    			FillColor(447,12,451,20,0x001f);
0002ae  201f              MOVS     r0,#0x1f
0002b0  2314              MOVS     r3,#0x14
0002b2  f24012c3          MOV      r2,#0x1c3
0002b6  210c              MOVS     r1,#0xc
0002b8  9000              STR      r0,[sp,#0]
0002ba  1f10              SUBS     r0,r2,#4
0002bc  f7fffffe          BL       FillColor
;;;616    			FillColor(441,12,445,20,0x001f);
0002c0  201f              MOVS     r0,#0x1f
0002c2  2314              MOVS     r3,#0x14
0002c4  f24012bd          MOV      r2,#0x1bd
0002c8  210c              MOVS     r1,#0xc
0002ca  9000              STR      r0,[sp,#0]
0002cc  1f10              SUBS     r0,r2,#4
0002ce  f7fffffe          BL       FillColor
                  |L1.722|
0002d2  e0f8              B        |L1.1222|
                  |L1.724|
;;;617    		}
;;;618    		else if(ADC_ConvertedValue >= 2960 && ADC_ConvertedValue < 3010)
0002d4  4876              LDR      r0,|L1.1200|
0002d6  8800              LDRH     r0,[r0,#0]  ; ADC_ConvertedValue
0002d8  f5b06f39          CMP      r0,#0xb90
0002dc  db21              BLT      |L1.802|
0002de  4874              LDR      r0,|L1.1200|
0002e0  8800              LDRH     r0,[r0,#0]  ; ADC_ConvertedValue
0002e2  f64031c2          MOV      r1,#0xbc2
0002e6  4288              CMP      r0,r1
0002e8  da1b              BGE      |L1.802|
;;;619    		{
;;;620    			FillColor(459,12,463,20,0x001f);
0002ea  201f              MOVS     r0,#0x1f
0002ec  2314              MOVS     r3,#0x14
0002ee  f24012cf          MOV      r2,#0x1cf
0002f2  210c              MOVS     r1,#0xc
0002f4  9000              STR      r0,[sp,#0]
0002f6  1f10              SUBS     r0,r2,#4
0002f8  f7fffffe          BL       FillColor
;;;621    			FillColor(453,12,457,20,0x001f);
0002fc  201f              MOVS     r0,#0x1f
0002fe  2314              MOVS     r3,#0x14
000300  f24012c9          MOV      r2,#0x1c9
000304  210c              MOVS     r1,#0xc
000306  9000              STR      r0,[sp,#0]
000308  1f10              SUBS     r0,r2,#4
00030a  f7fffffe          BL       FillColor
;;;622    			FillColor(447,12,451,20,0x001f);		
00030e  201f              MOVS     r0,#0x1f
000310  2314              MOVS     r3,#0x14
000312  f24012c3          MOV      r2,#0x1c3
000316  210c              MOVS     r1,#0xc
000318  9000              STR      r0,[sp,#0]
00031a  1f10              SUBS     r0,r2,#4
00031c  f7fffffe          BL       FillColor
000320  e0d1              B        |L1.1222|
                  |L1.802|
;;;623    		}
;;;624    		else if(ADC_ConvertedValue >= 2910 && ADC_ConvertedValue < 2960)
000322  4863              LDR      r0,|L1.1200|
000324  8800              LDRH     r0,[r0,#0]  ; ADC_ConvertedValue
000326  f640315e          MOV      r1,#0xb5e
00032a  4288              CMP      r0,r1
00032c  db2b              BLT      |L1.902|
00032e  4860              LDR      r0,|L1.1200|
000330  8800              LDRH     r0,[r0,#0]  ; ADC_ConvertedValue
000332  f5b06f39          CMP      r0,#0xb90
000336  da26              BGE      |L1.902|
;;;625    		{
;;;626    			FillColor(441,12,463,20,0xffff);
000338  f64f70ff          MOV      r0,#0xffff
00033c  2314              MOVS     r3,#0x14
00033e  f24012cf          MOV      r2,#0x1cf
000342  210c              MOVS     r1,#0xc
000344  9000              STR      r0,[sp,#0]
000346  f24010b9          MOV      r0,#0x1b9
00034a  f7fffffe          BL       FillColor
;;;627    			FillColor(459,12,463,20,0x001f);
00034e  201f              MOVS     r0,#0x1f
000350  2314              MOVS     r3,#0x14
000352  f24012cf          MOV      r2,#0x1cf
000356  210c              MOVS     r1,#0xc
000358  9000              STR      r0,[sp,#0]
00035a  1f10              SUBS     r0,r2,#4
00035c  f7fffffe          BL       FillColor
;;;628    			FillColor(453,12,457,20,0x001f);
000360  201f              MOVS     r0,#0x1f
000362  2314              MOVS     r3,#0x14
000364  f24012c9          MOV      r2,#0x1c9
000368  210c              MOVS     r1,#0xc
00036a  9000              STR      r0,[sp,#0]
00036c  1f10              SUBS     r0,r2,#4
00036e  f7fffffe          BL       FillColor
;;;629    			FillColor(447,12,451,20,0x001f);
000372  201f              MOVS     r0,#0x1f
000374  2314              MOVS     r3,#0x14
000376  f24012c3          MOV      r2,#0x1c3
00037a  210c              MOVS     r1,#0xc
00037c  9000              STR      r0,[sp,#0]
00037e  1f10              SUBS     r0,r2,#4
000380  f7fffffe          BL       FillColor
000384  e09f              B        |L1.1222|
                  |L1.902|
;;;630    		}
;;;631    		else if(ADC_ConvertedValue >= 2860 && ADC_ConvertedValue < 2910)
000386  484a              LDR      r0,|L1.1200|
000388  8800              LDRH     r0,[r0,#0]  ; ADC_ConvertedValue
00038a  f640312c          MOV      r1,#0xb2c
00038e  4288              CMP      r0,r1
000390  db18              BLT      |L1.964|
000392  4847              LDR      r0,|L1.1200|
000394  8800              LDRH     r0,[r0,#0]  ; ADC_ConvertedValue
000396  f640315e          MOV      r1,#0xb5e
00039a  4288              CMP      r0,r1
00039c  da12              BGE      |L1.964|
;;;632    		{
;;;633    			FillColor(459,12,463,20,0x001f);
00039e  201f              MOVS     r0,#0x1f
0003a0  2314              MOVS     r3,#0x14
0003a2  f24012cf          MOV      r2,#0x1cf
0003a6  210c              MOVS     r1,#0xc
0003a8  9000              STR      r0,[sp,#0]
0003aa  1f10              SUBS     r0,r2,#4
0003ac  f7fffffe          BL       FillColor
;;;634    			FillColor(453,12,457,20,0x001f);
0003b0  201f              MOVS     r0,#0x1f
0003b2  2314              MOVS     r3,#0x14
0003b4  f24012c9          MOV      r2,#0x1c9
0003b8  210c              MOVS     r1,#0xc
0003ba  9000              STR      r0,[sp,#0]
0003bc  1f10              SUBS     r0,r2,#4
0003be  f7fffffe          BL       FillColor
0003c2  e080              B        |L1.1222|
                  |L1.964|
;;;635    		}
;;;636    		else if(ADC_ConvertedValue >= 2810 && ADC_ConvertedValue < 2860)
0003c4  483a              LDR      r0,|L1.1200|
0003c6  8800              LDRH     r0,[r0,#0]  ; ADC_ConvertedValue
0003c8  f64021fa          MOV      r1,#0xafa
0003cc  4288              CMP      r0,r1
0003ce  db23              BLT      |L1.1048|
0003d0  4837              LDR      r0,|L1.1200|
0003d2  8800              LDRH     r0,[r0,#0]  ; ADC_ConvertedValue
0003d4  f640312c          MOV      r1,#0xb2c
0003d8  4288              CMP      r0,r1
0003da  da1d              BGE      |L1.1048|
;;;637    		{
;;;638    			FillColor(441,12,463,20,0xffff);
0003dc  f64f70ff          MOV      r0,#0xffff
0003e0  2314              MOVS     r3,#0x14
0003e2  f24012cf          MOV      r2,#0x1cf
0003e6  210c              MOVS     r1,#0xc
0003e8  9000              STR      r0,[sp,#0]
0003ea  f24010b9          MOV      r0,#0x1b9
0003ee  f7fffffe          BL       FillColor
;;;639    			FillColor(459,12,463,20,0x001f);
0003f2  201f              MOVS     r0,#0x1f
0003f4  2314              MOVS     r3,#0x14
0003f6  f24012cf          MOV      r2,#0x1cf
0003fa  210c              MOVS     r1,#0xc
0003fc  9000              STR      r0,[sp,#0]
0003fe  1f10              SUBS     r0,r2,#4
000400  f7fffffe          BL       FillColor
;;;640    			FillColor(453,12,457,20,0x001f);
000404  201f              MOVS     r0,#0x1f
000406  2314              MOVS     r3,#0x14
000408  f24012c9          MOV      r2,#0x1c9
00040c  210c              MOVS     r1,#0xc
00040e  9000              STR      r0,[sp,#0]
000410  1f10              SUBS     r0,r2,#4
000412  f7fffffe          BL       FillColor
000416  e056              B        |L1.1222|
                  |L1.1048|
;;;641    		}
;;;642    		else if(ADC_ConvertedValue >= 2760 && ADC_ConvertedValue < 2810)
000418  4825              LDR      r0,|L1.1200|
00041a  8800              LDRH     r0,[r0,#0]  ; ADC_ConvertedValue
00041c  f64021c8          MOV      r1,#0xac8
000420  4288              CMP      r0,r1
000422  db0f              BLT      |L1.1092|
000424  4822              LDR      r0,|L1.1200|
000426  8800              LDRH     r0,[r0,#0]  ; ADC_ConvertedValue
000428  f64021fa          MOV      r1,#0xafa
00042c  4288              CMP      r0,r1
00042e  da09              BGE      |L1.1092|
;;;643    		{
;;;644    			FillColor(459,12,463,20,0x001f);
000430  201f              MOVS     r0,#0x1f
000432  2314              MOVS     r3,#0x14
000434  f24012cf          MOV      r2,#0x1cf
000438  210c              MOVS     r1,#0xc
00043a  9000              STR      r0,[sp,#0]
00043c  1f10              SUBS     r0,r2,#4
00043e  f7fffffe          BL       FillColor
000442  e040              B        |L1.1222|
                  |L1.1092|
;;;645    		}	
;;;646    		else if(ADC_ConvertedValue < 2760)
000444  481a              LDR      r0,|L1.1200|
000446  8800              LDRH     r0,[r0,#0]  ; ADC_ConvertedValue
000448  f64021c8          MOV      r1,#0xac8
00044c  4288              CMP      r0,r1
00044e  da3a              BGE      |L1.1222|
;;;647    		{
;;;648    			FillColor(441,12,463,20,0xffff);
000450  f64f70ff          MOV      r0,#0xffff
000454  2314              MOVS     r3,#0x14
000456  f24012cf          MOV      r2,#0x1cf
00045a  210c              MOVS     r1,#0xc
00045c  9000              STR      r0,[sp,#0]
00045e  f24010b9          MOV      r0,#0x1b9
000462  f7fffffe          BL       FillColor
;;;649    			FillColor(459,12,463,20,0x001f);
000466  e025              B        |L1.1204|
                  |L1.1128|
                          DCD      capture2
                  |L1.1132|
                          DCD      CCR2_Val
                  |L1.1136|
                          DCD      TimCount
                  |L1.1140|
                          DCD      ||i1||
                  |L1.1144|
                          DCD      ||i2||
                  |L1.1148|
                          DCD      ||i3||
                  |L1.1152|
                          DCD      ||i4||
                  |L1.1156|
                          DCD      Frequency
                  |L1.1160|
                          DCD      ||j1||
                  |L1.1164|
                          DCD      Num_Pulse
                  |L1.1168|
                          DCD      0x40011000
                  |L1.1172|
                          DCD      ||j2||
                  |L1.1176|
                          DCD      ||j3||
                  |L1.1180|
                          DCD      ||j4||
                  |L1.1184|
                          DCD      0x40000400
                  |L1.1188|
                          DCD      capture3
                  |L1.1192|
                          DCD      TimCount_AD
                  |L1.1196|
                          DCD      POINT_COLOR
                  |L1.1200|
                          DCD      ADC_ConvertedValue
                  |L1.1204|
0004b4  201f              MOVS     r0,#0x1f
0004b6  2314              MOVS     r3,#0x14
0004b8  f24012cf          MOV      r2,#0x1cf
0004bc  210c              MOVS     r1,#0xc
0004be  9000              STR      r0,[sp,#0]
0004c0  1f10              SUBS     r0,r2,#4
0004c2  f7fffffe          BL       FillColor
                  |L1.1222|
;;;650    		}	
;;;651    		
;;;652    		
;;;653    //		TFT_ShowNum(200,230,ADC_ConvertedValue,0x001f);
;;;654    //		TFT_ShowChar(208,250,'.',0x001f);
;;;655    //		tempFloat = (float)ADC_ConvertedValue/412 - 3.30485;
;;;656    //		
;;;657    //		tempInt = (int)(tempFloat*100)%100;
;;;658    //		TFT_ShowNum(216,250,tempInt,0x001f);
;;;659    //		
;;;660    //		tempInt = (int)tempFloat;
;;;661    //		TFT_ShowNum(200,250,tempInt,0x001f);
;;;662    	}
;;;663    /*	i5++;
;;;664    	i6++;
;;;665    	i7++;
;;;666    	i8++;
;;;667    	
;;;668    	if(i5<(int)(100/Frequency[4]))
;;;669    	{
;;;670    		j5++;
;;;671    		if(j5<(2*Num_Pulse[4] + 2))
;;;672    		{
;;;673    			if(j5%2 == 0)
;;;674    			{
;;;675    				ChannelFiveSet;
;;;676    			}
;;;677    			else
;;;678    			{
;;;679    				ChannelFiveReset;
;;;680    			}
;;;681    		}
;;;682    	}
;;;683    	else
;;;684    	{
;;;685    		i5 = 0;
;;;686    		j5 = 1;
;;;687    	}
;;;688    	
;;;689    	if(i6<(int)(100/Frequency[5]))
;;;690    	{
;;;691    		j6++;
;;;692    		if(j6<(2*Num_Pulse[5] + 2))
;;;693    		{
;;;694    			if(j6%2 == 0)
;;;695    			{
;;;696    				ChannelSixSet;
;;;697    			}
;;;698    			else
;;;699    			{
;;;700    				ChannelSixReset;
;;;701    			}
;;;702    		}
;;;703    	}
;;;704    	else
;;;705    	{
;;;706    		i6 = 0;
;;;707    		j6 = 1;
;;;708    	}
;;;709    	
;;;710    	if(i7<(int)(100/Frequency[6]))
;;;711    	{
;;;712    		j7++;
;;;713    		if(j7<(2*Num_Pulse[6] + 2))
;;;714    		{
;;;715    			if(j7%2 == 0)
;;;716    			{
;;;717    				ChannelSevenSet;
;;;718    			}
;;;719    			else
;;;720    			{
;;;721    				ChannelSevenReset;
;;;722    			}
;;;723    		}
;;;724    	}
;;;725    	else
;;;726    	{
;;;727    		i7 = 0;
;;;728    		j7 = 1;
;;;729    	}
;;;730    	
;;;731    	if(i8<(int)(100/Frequency[7]))
;;;732    	{
;;;733    		j8++;
;;;734    		if(j8<(2*Num_Pulse[7] + 2))
;;;735    		{
;;;736    			if(j8%2 == 0)
;;;737    			{
;;;738    				ChannelEightSet;
;;;739    			}
;;;740    			else
;;;741    			{
;;;742    				ChannelEightReset;
;;;743    			}
;;;744    		}
;;;745    	}
;;;746    	else
;;;747    	{
;;;748    		i8 = 0;
;;;749    		j8 = 1;
;;;750    	}*/
;;;751    }
0004c6  bd08              POP      {r3,pc}
;;;752    
                          ENDP

                  TIM4_IRQHandler PROC
;;;759    *******************************************************************************/
;;;760    void TIM4_IRQHandler(void)
0004c8  4770              BX       lr
;;;761    {
;;;762    }
;;;763    
                          ENDP

                  I2C1_EV_IRQHandler PROC
;;;770    *******************************************************************************/
;;;771    void I2C1_EV_IRQHandler(void)
0004ca  4770              BX       lr
;;;772    {
;;;773    }
;;;774    
                          ENDP

                  I2C1_ER_IRQHandler PROC
;;;781    *******************************************************************************/
;;;782    void I2C1_ER_IRQHandler(void)
0004cc  4770              BX       lr
;;;783    {
;;;784    }
;;;785    
                          ENDP

                  I2C2_EV_IRQHandler PROC
;;;792    *******************************************************************************/
;;;793    void I2C2_EV_IRQHandler(void)
0004ce  4770              BX       lr
;;;794    {
;;;795    }
;;;796    
                          ENDP

                  I2C2_ER_IRQHandler PROC
;;;803    *******************************************************************************/
;;;804    void I2C2_ER_IRQHandler(void)
0004d0  4770              BX       lr
;;;805    {
;;;806    }
;;;807    
                          ENDP

                  SPI1_IRQHandler PROC
;;;814    *******************************************************************************/
;;;815    void SPI1_IRQHandler(void)
0004d2  4770              BX       lr
;;;816    {
;;;817    }
;;;818    
                          ENDP

                  SPI2_IRQHandler PROC
;;;825    *******************************************************************************/
;;;826    void SPI2_IRQHandler(void)
0004d4  4770              BX       lr
;;;827    {
;;;828     
;;;829    }
;;;830    
                          ENDP

                  USART1_IRQHandler PROC
;;;837    *******************************************************************************/
;;;838    void USART1_IRQHandler(void)
0004d6  4770              BX       lr
;;;839    {
;;;840    
;;;841       
;;;842    }
;;;843    
                          ENDP

                  USART2_IRQHandler PROC
;;;850    *******************************************************************************/
;;;851    void USART2_IRQHandler(void)
0004d8  4770              BX       lr
;;;852    {	
;;;853    	
;;;854    }
;;;855    
                          ENDP

                  USART3_IRQHandler PROC
;;;862    *******************************************************************************/
;;;863    void USART3_IRQHandler(void)
0004da  4770              BX       lr
;;;864    {
;;;865     
;;;866    }
;;;867    
                          ENDP

                  EXTI15_10_IRQHandler PROC
;;;874    *******************************************************************************/
;;;875    void EXTI15_10_IRQHandler(void)
0004dc  4770              BX       lr
;;;876    {
;;;877     
;;;878    }
;;;879    
                          ENDP

                  RTC_IRQHandler PROC
;;;886    *******************************************************************************/
;;;887    void RTC_IRQHandler(void)
0004de  4770              BX       lr
;;;888    {
;;;889    
;;;890    }
;;;891    
                          ENDP

                  USBWakeUp_IRQHandler PROC
;;;899    *******************************************************************************/
;;;900    void USBWakeUp_IRQHandler(void)
0004e0  4770              BX       lr
;;;901    {
;;;902    }
;;;903    
                          ENDP

                  TIM8_BRK_IRQHandler PROC
;;;910    *******************************************************************************/
;;;911    void TIM8_BRK_IRQHandler(void)
0004e2  4770              BX       lr
;;;912    {
;;;913    }
;;;914    
                          ENDP

                  TIM8_UP_IRQHandler PROC
;;;922    *******************************************************************************/
;;;923    void TIM8_UP_IRQHandler(void)
0004e4  4770              BX       lr
;;;924    {
;;;925    }
;;;926    
                          ENDP

                  TIM8_TRG_COM_IRQHandler PROC
;;;934    *******************************************************************************/
;;;935    void TIM8_TRG_COM_IRQHandler(void)
0004e6  4770              BX       lr
;;;936    {
;;;937    }
;;;938    
                          ENDP

                  TIM8_CC_IRQHandler PROC
;;;945    *******************************************************************************/
;;;946    void TIM8_CC_IRQHandler(void)
0004e8  4770              BX       lr
;;;947    {
;;;948    }
;;;949    
                          ENDP

                  ADC3_IRQHandler PROC
;;;956    *******************************************************************************/
;;;957    void ADC3_IRQHandler(void)
0004ea  4770              BX       lr
;;;958    {
;;;959    }
;;;960    
                          ENDP

                  FSMC_IRQHandler PROC
;;;967    *******************************************************************************/
;;;968    void FSMC_IRQHandler(void)
0004ec  4770              BX       lr
;;;969    {
;;;970    }
;;;971    
                          ENDP

                  SDIO_IRQHandler PROC
;;;978    *******************************************************************************/
;;;979    void SDIO_IRQHandler(void)
0004ee  4770              BX       lr
;;;980    {
;;;981    }
;;;982    
                          ENDP

                  TIM5_IRQHandler PROC
;;;989    *******************************************************************************/
;;;990    void TIM5_IRQHandler(void)
0004f0  4770              BX       lr
;;;991    {
;;;992    }
;;;993    
                          ENDP

                  SPI3_IRQHandler PROC
;;;1000   *******************************************************************************/
;;;1001   void SPI3_IRQHandler(void)
0004f2  4770              BX       lr
;;;1002   {
;;;1003   }
;;;1004   
                          ENDP

                  UART4_IRQHandler PROC
;;;1011   *******************************************************************************/
;;;1012   void UART4_IRQHandler(void)
0004f4  4770              BX       lr
;;;1013   {
;;;1014   }
;;;1015   
                          ENDP

                  UART5_IRQHandler PROC
;;;1022   *******************************************************************************/
;;;1023   void UART5_IRQHandler(void)
0004f6  4770              BX       lr
;;;1024   {
;;;1025   }
;;;1026   
                          ENDP

                  TIM6_IRQHandler PROC
;;;1033   *******************************************************************************/
;;;1034   void TIM6_IRQHandler(void)
0004f8  4770              BX       lr
;;;1035   {
;;;1036   }
;;;1037   
                          ENDP

                  TIM7_IRQHandler PROC
;;;1044   *******************************************************************************/
;;;1045   void TIM7_IRQHandler(void)
0004fa  4770              BX       lr
;;;1046   {
;;;1047   }
;;;1048   
                          ENDP

                  DMA2_Channel1_IRQHandler PROC
;;;1055   *******************************************************************************/
;;;1056   void DMA2_Channel1_IRQHandler(void)
0004fc  4770              BX       lr
;;;1057   {
;;;1058   }
;;;1059   
                          ENDP

                  DMA2_Channel2_IRQHandler PROC
;;;1066   *******************************************************************************/
;;;1067   void DMA2_Channel2_IRQHandler(void)
0004fe  4770              BX       lr
;;;1068   {
;;;1069   }
;;;1070   
                          ENDP

                  DMA2_Channel3_IRQHandler PROC
;;;1077   *******************************************************************************/
;;;1078   void DMA2_Channel3_IRQHandler(void)
000500  4770              BX       lr
;;;1079   {
;;;1080   }
;;;1081   
                          ENDP

                  DMA2_Channel4_5_IRQHandler PROC
;;;1089   *******************************************************************************/
;;;1090   void DMA2_Channel4_5_IRQHandler(void)
000502  4770              BX       lr
;;;1091   {
;;;1092   }
;;;1093   
                          ENDP

                  RTCAlarm_IRQHandler PROC
;;;1101   *******************************************************************************/
;;;1102   void RTCAlarm_IRQHandler(void)
000504  4770              BX       lr
;;;1103   {
;;;1104    
;;;1105   }
;;;1106   /******************* (C) COPYRIGHT 2008 STMicroelectronics *****END OF FILE****/
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  buf
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  capture2
                          DCD      0x00000000
                  capture3
                          DCD      0x00000000
                  capture4
                          DCD      0x00000000
                  CCR2_Val
                          DCD      0x00002bf2
                  tempFloat
                          DCD      0x00000000
                  tempInt
                          DCD      0x00000000
                  ||i1||
                          DCD      0x00000000
                  ||j1||
                          DCD      0x00000001
                  ||i2||
                          DCD      0x00000000
                  ||j2||
                          DCD      0x00000001
                  ||i3||
                          DCD      0x00000000
                  ||j3||
                          DCD      0x00000001
                  ||i4||
                          DCD      0x00000000
                  ||j4||
                          DCD      0x00000001
                  TimCount_AD
                          DCD      0x00000000
