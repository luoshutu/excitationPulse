; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\mcp.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\mcp.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -I.\CM3 -I.\TFT -IF:\excitationPulse\Ver_F8_翻页\RTE -ID:\Keil_v5\MDK\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\Keil_v5\MDK\ARM\CMSIS\Include -D__UVISION_VERSION=515 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210B_EVAL --omf_browse=.\obj\mcp.crf user\MCP.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  delay PROC
;;;6      
;;;7      void delay(__IO uint32_t nTime)
000000  b501              PUSH     {r0,lr}
;;;8      {
;;;9      	nTime = 16*nTime;
000002  9800              LDR      r0,[sp,#0]
000004  0100              LSLS     r0,r0,#4
000006  9000              STR      r0,[sp,#0]
;;;10     	while(nTime) 
000008  e002              B        |L1.16|
                  |L1.10|
;;;11     	{ 
;;;12     	 nTime--; 
00000a  9800              LDR      r0,[sp,#0]
00000c  1e40              SUBS     r0,r0,#1
00000e  9000              STR      r0,[sp,#0]
                  |L1.16|
000010  9800              LDR      r0,[sp,#0]            ;10
000012  2800              CMP      r0,#0                 ;10
000014  d1f9              BNE      |L1.10|
;;;13     	} 
;;;14     }
000016  bd08              POP      {r3,pc}
;;;15     
                          ENDP

                  MCP_Delay PROC
;;;16     //控制I2C速度的延时
;;;17     void MCP_Delay(void)
000018  b500              PUSH     {lr}
;;;18     {
;;;19     	delay(1);
00001a  2001              MOVS     r0,#1
00001c  f7fffffe          BL       delay
;;;20     } 
000020  bd00              POP      {pc}
;;;21     
                          ENDP

                  MCP_I2C_Init PROC
;;;22     //MCP芯片I2C接口初始化 
;;;23     void MCP_I2C_Init(void)
000022  b508              PUSH     {r3,lr}
;;;24     {					     
;;;25     	GPIO_InitTypeDef GPIO_InitStructure;
;;;26     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2|GPIO_Pin_3;				       
000024  200c              MOVS     r0,#0xc
000026  f8ad0000          STRH     r0,[sp,#0]
;;;27     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
00002a  2010              MOVS     r0,#0x10
00002c  f88d0003          STRB     r0,[sp,#3]
;;;28     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000030  2003              MOVS     r0,#3
000032  f88d0002          STRB     r0,[sp,#2]
;;;29     	GPIO_Init(GPIOE, &GPIO_InitStructure);	 
000036  4669              MOV      r1,sp
000038  488c              LDR      r0,|L1.620|
00003a  f7fffffe          BL       GPIO_Init
;;;30     
;;;31     	GPIO_SetBits(GPIOE, GPIO_Pin_2);	   //
00003e  2104              MOVS     r1,#4
000040  488a              LDR      r0,|L1.620|
000042  f7fffffe          BL       GPIO_SetBits
;;;32     	GPIO_SetBits(GPIOE, GPIO_Pin_3);
000046  2108              MOVS     r1,#8
000048  4888              LDR      r0,|L1.620|
00004a  f7fffffe          BL       GPIO_SetBits
;;;33     }
00004e  bd08              POP      {r3,pc}
;;;34     
                          ENDP

                  MCP_SDA_IN PROC
;;;35     void MCP_SDA_IN(void)  
000050  b508              PUSH     {r3,lr}
;;;36     {
;;;37       GPIO_InitTypeDef  GPIO_InitStructure;  
;;;38       GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;	     
000052  2008              MOVS     r0,#8
000054  f8ad0000          STRH     r0,[sp,#0]
;;;39       GPIO_InitStructure.GPIO_Mode =GPIO_Mode_IN_FLOATING; 
000058  2004              MOVS     r0,#4
00005a  f88d0003          STRB     r0,[sp,#3]
;;;40       GPIO_Init(GPIOE, &GPIO_InitStructure);
00005e  4669              MOV      r1,sp
000060  4882              LDR      r0,|L1.620|
000062  f7fffffe          BL       GPIO_Init
;;;41     }
000066  bd08              POP      {r3,pc}
;;;42     
                          ENDP

                  MCP_SDA_OUT PROC
;;;43     void MCP_SDA_OUT(void) {
000068  b508              PUSH     {r3,lr}
;;;44       GPIO_InitTypeDef  GPIO_InitStructure; 
;;;45       GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
00006a  2008              MOVS     r0,#8
00006c  f8ad0000          STRH     r0,[sp,#0]
;;;46       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000070  2003              MOVS     r0,#3
000072  f88d0002          STRB     r0,[sp,#2]
;;;47       GPIO_InitStructure.GPIO_Mode =GPIO_Mode_Out_PP ;//  
000076  2010              MOVS     r0,#0x10
000078  f88d0003          STRB     r0,[sp,#3]
;;;48       GPIO_Init(GPIOE, &GPIO_InitStructure);
00007c  4669              MOV      r1,sp
00007e  487b              LDR      r0,|L1.620|
000080  f7fffffe          BL       GPIO_Init
;;;49     }
000084  bd08              POP      {r3,pc}
;;;50     
                          ENDP

                  MCP_I2C_Start PROC
;;;51     //产生I2C起始信号
;;;52     void MCP_I2C_Start(void)
000086  b510              PUSH     {r4,lr}
;;;53     {
;;;54     
;;;55     	MCP_SDA_OUT();     //sda线输出
000088  f7fffffe          BL       MCP_SDA_OUT
;;;56     	MCP_I2C_SDA_H;	  	  
00008c  2108              MOVS     r1,#8
00008e  4877              LDR      r0,|L1.620|
000090  f7fffffe          BL       GPIO_SetBits
;;;57     	MCP_I2C_SCL_H;
000094  2104              MOVS     r1,#4
000096  4875              LDR      r0,|L1.620|
000098  f7fffffe          BL       GPIO_SetBits
;;;58     	delay(3);
00009c  2003              MOVS     r0,#3
00009e  f7fffffe          BL       delay
;;;59      	MCP_I2C_SDA_L;     
0000a2  2108              MOVS     r1,#8
0000a4  4871              LDR      r0,|L1.620|
0000a6  f7fffffe          BL       GPIO_ResetBits
;;;60     	MCP_Delay();
0000aa  f7fffffe          BL       MCP_Delay
;;;61     	MCP_I2C_SCL_L;     
0000ae  2104              MOVS     r1,#4
0000b0  486e              LDR      r0,|L1.620|
0000b2  f7fffffe          BL       GPIO_ResetBits
;;;62     }	  
0000b6  bd10              POP      {r4,pc}
;;;63     //产生I2C停止信号
                          ENDP

                  MCP_I2C_Stop PROC
;;;64     void MCP_I2C_Stop(void)
0000b8  b510              PUSH     {r4,lr}
;;;65     {
;;;66     	MCP_SDA_OUT();//sda线输出
0000ba  f7fffffe          BL       MCP_SDA_OUT
;;;67     	MCP_I2C_SDA_L;
0000be  2108              MOVS     r1,#8
0000c0  486a              LDR      r0,|L1.620|
0000c2  f7fffffe          BL       GPIO_ResetBits
;;;68     	MCP_Delay();
0000c6  f7fffffe          BL       MCP_Delay
;;;69     	MCP_I2C_SCL_H;
0000ca  2104              MOVS     r1,#4
0000cc  4867              LDR      r0,|L1.620|
0000ce  f7fffffe          BL       GPIO_SetBits
;;;70     	delay(3);
0000d2  2003              MOVS     r0,#3
0000d4  f7fffffe          BL       delay
;;;71     	MCP_I2C_SDA_H;
0000d8  2108              MOVS     r1,#8
0000da  4864              LDR      r0,|L1.620|
0000dc  f7fffffe          BL       GPIO_SetBits
;;;72     }
0000e0  bd10              POP      {r4,pc}
;;;73     //等待应答信号到来
                          ENDP

                  MCP_I2C_Wait_Ack PROC
;;;75     //        0，接收应答成功
;;;76     u8 MCP_I2C_Wait_Ack(void)
0000e2  b510              PUSH     {r4,lr}
;;;77     {
;;;78     	u8 ucErrTime=0;
0000e4  2400              MOVS     r4,#0
;;;79     	MCP_SDA_IN();      //SDA设置为输入  
0000e6  f7fffffe          BL       MCP_SDA_IN
;;;80     	MCP_I2C_SDA_H;	   
0000ea  2108              MOVS     r1,#8
0000ec  485f              LDR      r0,|L1.620|
0000ee  f7fffffe          BL       GPIO_SetBits
;;;81     	MCP_I2C_SCL_H;
0000f2  2104              MOVS     r1,#4
0000f4  485d              LDR      r0,|L1.620|
0000f6  f7fffffe          BL       GPIO_SetBits
;;;82     	MCP_Delay();
0000fa  f7fffffe          BL       MCP_Delay
;;;83     	while(MCP_READ_SDA)
0000fe  e009              B        |L1.276|
                  |L1.256|
;;;84     	{
;;;85     		ucErrTime++;
000100  1c60              ADDS     r0,r4,#1
000102  b2c4              UXTB     r4,r0
;;;86     		if(ucErrTime>250)
000104  2cfa              CMP      r4,#0xfa
000106  dd03              BLE      |L1.272|
;;;87     		{
;;;88     			MCP_I2C_Stop();
000108  f7fffffe          BL       MCP_I2C_Stop
;;;89     			return 1;
00010c  2001              MOVS     r0,#1
                  |L1.270|
;;;90     		} 
;;;91     		MCP_Delay();
;;;92     	}
;;;93     	MCP_I2C_SCL_L;//时钟输出0 	   
;;;94     	return 0;  
;;;95     } 
00010e  bd10              POP      {r4,pc}
                  |L1.272|
000110  f7fffffe          BL       MCP_Delay
                  |L1.276|
000114  2108              MOVS     r1,#8                 ;83
000116  4855              LDR      r0,|L1.620|
000118  f7fffffe          BL       GPIO_ReadInputDataBit
00011c  2800              CMP      r0,#0                 ;83
00011e  d1ef              BNE      |L1.256|
000120  2104              MOVS     r1,#4                 ;93
000122  4852              LDR      r0,|L1.620|
000124  f7fffffe          BL       GPIO_ResetBits
000128  2000              MOVS     r0,#0                 ;94
00012a  e7f0              B        |L1.270|
;;;96     //产生ACK应答
                          ENDP

                  MCP_I2C_Ack PROC
;;;97     void MCP_I2C_Ack(void)
00012c  b510              PUSH     {r4,lr}
;;;98     {
;;;99     	MCP_I2C_SCL_L;
00012e  2104              MOVS     r1,#4
000130  484e              LDR      r0,|L1.620|
000132  f7fffffe          BL       GPIO_ResetBits
;;;100    	MCP_SDA_OUT();
000136  f7fffffe          BL       MCP_SDA_OUT
;;;101    	MCP_Delay();
00013a  f7fffffe          BL       MCP_Delay
;;;102    	MCP_I2C_SDA_L;
00013e  2108              MOVS     r1,#8
000140  484a              LDR      r0,|L1.620|
000142  f7fffffe          BL       GPIO_ResetBits
;;;103    	MCP_Delay();
000146  f7fffffe          BL       MCP_Delay
;;;104    	MCP_I2C_SCL_H;
00014a  2104              MOVS     r1,#4
00014c  4847              LDR      r0,|L1.620|
00014e  f7fffffe          BL       GPIO_SetBits
;;;105    	MCP_Delay();
000152  f7fffffe          BL       MCP_Delay
;;;106    	MCP_I2C_SCL_L;
000156  2104              MOVS     r1,#4
000158  4844              LDR      r0,|L1.620|
00015a  f7fffffe          BL       GPIO_ResetBits
;;;107    }
00015e  bd10              POP      {r4,pc}
;;;108    //不产生ACK应答		    
                          ENDP

                  MCP_I2C_NAck PROC
;;;109    void MCP_I2C_NAck(void)
000160  b510              PUSH     {r4,lr}
;;;110    {
;;;111    	MCP_I2C_SCL_L;
000162  2104              MOVS     r1,#4
000164  4841              LDR      r0,|L1.620|
000166  f7fffffe          BL       GPIO_ResetBits
;;;112    	MCP_SDA_OUT();
00016a  f7fffffe          BL       MCP_SDA_OUT
;;;113    	MCP_Delay();
00016e  f7fffffe          BL       MCP_Delay
;;;114    	MCP_I2C_SDA_H;
000172  2108              MOVS     r1,#8
000174  483d              LDR      r0,|L1.620|
000176  f7fffffe          BL       GPIO_SetBits
;;;115    	MCP_Delay();
00017a  f7fffffe          BL       MCP_Delay
;;;116    	MCP_I2C_SCL_H;
00017e  2104              MOVS     r1,#4
000180  483a              LDR      r0,|L1.620|
000182  f7fffffe          BL       GPIO_SetBits
;;;117    	MCP_Delay();
000186  f7fffffe          BL       MCP_Delay
;;;118    	MCP_I2C_SCL_L;
00018a  2104              MOVS     r1,#4
00018c  4837              LDR      r0,|L1.620|
00018e  f7fffffe          BL       GPIO_ResetBits
;;;119    }					 				     
000192  bd10              POP      {r4,pc}
;;;120    //I2C发送一个字节
                          ENDP

                  MCP_I2C_Send_Byte PROC
;;;123    //0，无应答			  
;;;124    void MCP_I2C_Send_Byte(u8 txd)
000194  b570              PUSH     {r4-r6,lr}
;;;125    {                        
000196  4604              MOV      r4,r0
;;;126      u8 t;   
;;;127    	MCP_SDA_OUT(); 	    
000198  f7fffffe          BL       MCP_SDA_OUT
;;;128      MCP_I2C_SCL_L;//拉低时钟开始数据传输
00019c  2104              MOVS     r1,#4
00019e  4833              LDR      r0,|L1.620|
0001a0  f7fffffe          BL       GPIO_ResetBits
;;;129    	MCP_Delay();
0001a4  f7fffffe          BL       MCP_Delay
;;;130    	for(t=0;t<8;t++)
0001a8  2500              MOVS     r5,#0
0001aa  e01d              B        |L1.488|
                  |L1.428|
;;;131    	{              
;;;132    		if(txd&0x80) MCP_I2C_SDA_H;
0001ac  f0040080          AND      r0,r4,#0x80
0001b0  b120              CBZ      r0,|L1.444|
0001b2  2108              MOVS     r1,#8
0001b4  482d              LDR      r0,|L1.620|
0001b6  f7fffffe          BL       GPIO_SetBits
0001ba  e003              B        |L1.452|
                  |L1.444|
;;;133    		else MCP_I2C_SDA_L;
0001bc  2108              MOVS     r1,#8
0001be  482b              LDR      r0,|L1.620|
0001c0  f7fffffe          BL       GPIO_ResetBits
                  |L1.452|
;;;134    		txd<<=1;
0001c4  0660              LSLS     r0,r4,#25
0001c6  0e04              LSRS     r4,r0,#24
;;;135    		MCP_Delay();		
0001c8  f7fffffe          BL       MCP_Delay
;;;136    		MCP_I2C_SCL_H; 
0001cc  2104              MOVS     r1,#4
0001ce  4827              LDR      r0,|L1.620|
0001d0  f7fffffe          BL       GPIO_SetBits
;;;137    		MCP_Delay();
0001d4  f7fffffe          BL       MCP_Delay
;;;138    		MCP_I2C_SCL_L;	
0001d8  2104              MOVS     r1,#4
0001da  4824              LDR      r0,|L1.620|
0001dc  f7fffffe          BL       GPIO_ResetBits
;;;139    		MCP_Delay();
0001e0  f7fffffe          BL       MCP_Delay
0001e4  1c68              ADDS     r0,r5,#1              ;130
0001e6  b2c5              UXTB     r5,r0                 ;130
                  |L1.488|
0001e8  2d08              CMP      r5,#8                 ;130
0001ea  dbdf              BLT      |L1.428|
;;;140    	}	 
;;;141    } 	
0001ec  bd70              POP      {r4-r6,pc}
;;;142        
                          ENDP

                  MCP_I2C_Read_Byte PROC
;;;143    //读1个字节，ack=1时，发送ACK，ack=0，发送nACK   
;;;144    u8 MCP_I2C_Read_Byte(unsigned char ack)
0001ee  b570              PUSH     {r4-r6,lr}
;;;145    {
0001f0  4605              MOV      r5,r0
;;;146    	u8 i,receive=0;
0001f2  2400              MOVS     r4,#0
;;;147     	MCP_SDA_IN();//SDA设置为输入
0001f4  f7fffffe          BL       MCP_SDA_IN
;;;148    	delay(1);
0001f8  2001              MOVS     r0,#1
0001fa  f7fffffe          BL       delay
;;;149    	for(i=0;i<8;i++ )
0001fe  2600              MOVS     r6,#0
000200  e014              B        |L1.556|
                  |L1.514|
;;;150    	{ 
;;;151    		MCP_I2C_SCL_L; 	    	   
000202  2104              MOVS     r1,#4
000204  4819              LDR      r0,|L1.620|
000206  f7fffffe          BL       GPIO_ResetBits
;;;152    		MCP_Delay();
00020a  f7fffffe          BL       MCP_Delay
;;;153    		MCP_I2C_SCL_H;	 
00020e  2104              MOVS     r1,#4
000210  4816              LDR      r0,|L1.620|
000212  f7fffffe          BL       GPIO_SetBits
;;;154    		receive<<=1;
000216  0660              LSLS     r0,r4,#25
000218  0e04              LSRS     r4,r0,#24
;;;155    		if(MCP_READ_SDA)receive++;   
00021a  2108              MOVS     r1,#8
00021c  4813              LDR      r0,|L1.620|
00021e  f7fffffe          BL       GPIO_ReadInputDataBit
000222  b108              CBZ      r0,|L1.552|
000224  1c60              ADDS     r0,r4,#1
000226  b2c4              UXTB     r4,r0
                  |L1.552|
000228  1c70              ADDS     r0,r6,#1              ;149
00022a  b2c6              UXTB     r6,r0                 ;149
                  |L1.556|
00022c  2e08              CMP      r6,#8                 ;149
00022e  dbe8              BLT      |L1.514|
;;;156    	}	  				 
;;;157    	if (!ack)MCP_I2C_NAck();   //发送nACK
000230  b915              CBNZ     r5,|L1.568|
000232  f7fffffe          BL       MCP_I2C_NAck
000236  e001              B        |L1.572|
                  |L1.568|
;;;158    	else MCP_I2C_Ack();        //发送ACK   
000238  f7fffffe          BL       MCP_I2C_Ack
                  |L1.572|
;;;159     	return receive;
00023c  4620              MOV      r0,r4
;;;160    }
00023e  bd70              POP      {r4-r6,pc}
;;;161    
                          ENDP

                  MCP_ResistanceSet PROC
;;;162    void MCP_ResistanceSet(u8 resistance)
000240  b510              PUSH     {r4,lr}
;;;163    {
000242  4604              MOV      r4,r0
;;;164    	MCP_I2C_Start();	
000244  f7fffffe          BL       MCP_I2C_Start
;;;165    	MCP_I2C_Send_Byte(MCP1_WR);   	    //发送对芯片1写入的命令 	 
000248  2058              MOVS     r0,#0x58
00024a  f7fffffe          BL       MCP_I2C_Send_Byte
;;;166    	MCP_I2C_Wait_Ack();
00024e  f7fffffe          BL       MCP_I2C_Wait_Ack
;;;167    	MCP_I2C_Send_Byte(Wiper0_Address);  //寄存器Wiper0的地址
000252  2000              MOVS     r0,#0
000254  f7fffffe          BL       MCP_I2C_Send_Byte
;;;168    	MCP_I2C_Wait_Ack();  
000258  f7fffffe          BL       MCP_I2C_Wait_Ack
;;;169    	MCP_I2C_Send_Byte(resistance);            //电阻值设置，0x00~0x80
00025c  4620              MOV      r0,r4
00025e  f7fffffe          BL       MCP_I2C_Send_Byte
;;;170    	MCP_I2C_Wait_Ack(); 
000262  f7fffffe          BL       MCP_I2C_Wait_Ack
;;;171    	MCP_I2C_Stop();					            //产生一个停止条件
000266  f7fffffe          BL       MCP_I2C_Stop
;;;172    }
00026a  bd10              POP      {r4,pc}
;;;173    
                          ENDP

                  |L1.620|
                          DCD      0x40011800
